{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/config/northDriver/Index.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/config/northDriver/Index.vue","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":null,"sources":["/home/ulrich/neuron-dashboard/src/views/config/northDriver/Index.vue"],"sourcesContent":["<template>\n  <emqx-card v-emqx-loading=\"isListLoading\">\n    <ViewHeaderBar>\n      <template v-slot:left>\n        <emqx-button type=\"primary\" size=\"small\" icon=\"iconfont iconcreate\" class=\"header-item btn\" @click=\"addConfig\">\n          {{ $t('config.addApplication') }}\n        </emqx-button>\n      </template>\n      <template v-slot:right>\n        <ListCardSwitch v-model=\"showType\" @change=\"changeListShowMode\" />\n      </template>\n    </ViewHeaderBar>\n\n    <ul v-if=\"showType === 'card'\" class=\"setup-list\">\n      <emqx-row :gutter=\"24\">\n        <emqx-col :span=\"8\" v-for=\"(item, index) in northDriverList\" :key=\"item.name\" tag=\"li\" class=\"setup-item\">\n          <SetupItemCard\n            :data=\"item\"\n            @toggle-status=\"setNodeStartStopStatus(item, $event, index)\"\n            @clickOperation=\"handleClickOperator($event, item)\"\n          />\n        </emqx-col>\n      </emqx-row>\n    </ul>\n\n    <emqx-table\n      v-if=\"showType === 'list'\"\n      :data=\"northDriverList\"\n      :empty-text=\"$t('common.emptyData')\"\n      :row-class-name=\"rowClassName\"\n      :default-sort=\"{ prop: sortBy.prop, order: `${sortBy.order}ending` }\"\n      @sort-change=\"sortDataByKey\"\n      @row-click=\"goGroupPage\"\n    >\n      <emqx-table-column :label=\"$t('common.name')\" prop=\"name\" sortable=\"custom\" show-overflow-tooltip>\n        <template #default=\"{ row }\">\n          <span v-if=\"isMonitorNode(row.name)\">{{ row.name }}</span>\n          <el-link v-else type=\"primary\" :underline=\"false\" href=\"javascript:;\" @click.stop=\"goGroupPage(row, $event)\">\n            {{ row.name }}\n          </el-link>\n        </template>\n      </emqx-table-column>\n      <!--  workStatus-->\n      <emqx-table-column :label=\"$t('config.workStatus')\" prop=\"statusText\" sortable=\"custom\">\n        <template #default=\"{ row }\">\n          <svg class=\"iconfont icon-svg\" aria-hidden=\"true\">\n            <use :xlink:href=\"`#${getNodeValue(row).statusIcon.value}`\" />\n          </svg>\n          {{ getNodeValue(row).statusText.value }}\n        </template>\n      </emqx-table-column>\n      <!-- connectionStatus -->\n      <emqx-table-column\n        :label=\"$t('config.connectionStatus')\"\n        prop=\"connectionStatusText\"\n        sortable=\"custom\"\n        min-width=\"90\"\n      >\n        <template #default=\"{ row }\">\n          {{ getNodeValue(row).connectionStatusText.value }}\n        </template>\n      </emqx-table-column>\n      <emqx-table-column :label=\"$t('config.plugin')\" prop=\"plugin\" sortable=\"custom\" />\n      <emqx-table-column align=\"left\" :label=\"$t('common.oper')\" width=\"180px\">\n        <template #default=\"{ row, index }\">\n          <div class=\"operator-wrap\">\n            <AComWithDesc :content=\"countNodeStartStopStatus(row) ? $t('common.stop') : $t('common.start')\">\n              <i\n                :class=\"countNodeStartStopStatus(row) ? 'el-icon-video-pause' : 'el-icon-video-play'\"\n                class=\"operation-icon\"\n                @click.stop=\"setNodeStartStopStatus(row, !countNodeStartStopStatus(row), index)\"\n              />\n            </AComWithDesc>\n            <AComWithDesc :content=\"$t('config.appConfig')\">\n              <i class=\"iconfont iconsetting operation-icon\" @click.stop=\"goNodeConfig(row)\" />\n            </AComWithDesc>\n\n            <AComWithDesc :content=\"$t('config.dataStatistics')\">\n              <span @click.stop=\"handleClickOperator('dataStatistics', row)\">\n                <img\n                  class=\"operation-image icon-image img-statistic-log\"\n                  src=\"~@/assets/images/statistics.png\"\n                  alt=\"debug-log\"\n                />\n              </span>\n            </AComWithDesc>\n\n            <emqx-dropdown trigger=\"click\" @command=\"handleClickOperator($event, row)\">\n              <AComWithDesc :content=\"$t('common.more')\">\n                <span class=\"el-dropdown-link\" @click.stop>\n                  <i class=\"el-icon-more operation-icon\" />\n                </span>\n              </AComWithDesc>\n              <template #dropdown>\n                <emqx-dropdown-menu>\n                  <emqx-dropdown-item v-if=\"!isMonitorNode(row.name)\" class=\"operation-item-wrap\" command=\"edit\">\n                    <i class=\"el-icon-edit-outline operation-icon\" />\n                    <span>{{ $t(`common.edit`) }}</span>\n                  </emqx-dropdown-item>\n                  <emqx-dropdown-item class=\"operation-item-wrap\" command=\"debugLogLevel\">\n                    <img\n                      class=\"operation-image img-debug-log\"\n                      src=\"~@/assets/images/debug-log-icon.png\"\n                      alt=\"debug-log\"\n                    />\n                    <span>{{ $t(`config.updateDebugLogLevel`) }}</span>\n                  </emqx-dropdown-item>\n                  <emqx-dropdown-item\n                    v-if=\"!isNotSupportRemoveNode(row.name)\"\n                    command=\"delete\"\n                    class=\"operation-item-wrap\"\n                  >\n                    <i class=\"iconfont icondelete operation-icon\" />\n                    <span>{{ $t(`common.delete`) }}</span>\n                  </emqx-dropdown-item>\n                </emqx-dropdown-menu>\n              </template>\n            </emqx-dropdown>\n          </div>\n        </template>\n      </emqx-table-column>\n    </emqx-table>\n\n    <emqx-empty v-if=\"!isListLoading && northDriverList.length === 0\" />\n  </emqx-card>\n\n  <DriverDialog v-model=\"showDialog\" :type=\"DriverDirection.North\" @submitted=\"getNorthDriverList\" />\n\n  <!-- Data Statistics -->\n  <DataStatisticsDrawer\n    v-if=\"dataStatisticsVisiable\"\n    v-model=\"dataStatisticsVisiable\"\n    :type=\"NodeCatogery.North\"\n    :node-name=\"nodeItemData.name\"\n  />\n\n  <EditNodeNameDialog\n    v-model=\"showEditDialog\"\n    :type=\"DriverDirection.North\"\n    :node-name=\"editDriverData.name\"\n    :node=\"editDriverData\"\n    @updated=\"reloadDriverList\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport store from '@/store'\nimport { useI18n } from 'vue-i18n'\nimport { ElLink } from 'element-plus'\nimport {\n  useToggleNodeStartStopStatus,\n  useDriverStatus,\n  useNodeStartStopStatus,\n  dataStatistics,\n  useListShowType,\n  useDriverName,\n} from '@/composables/config/useDriver'\nimport useNorthDriver from '@/composables/config/useNorthDriver'\nimport type { DriverItemInList } from '@/types/config'\nimport { DriverDirection, NodeCatogery } from '@/types/enums'\nimport DriverDialog from '@/views/config/components/DriverDialog.vue'\nimport EditNodeNameDialog from '@/views/config/components/EditNodeNameDialog.vue'\nimport SetupItemCard from './components/SetupItemCard.vue'\nimport { EmqxMessage } from '@emqx/emqx-ui'\nimport ViewHeaderBar from '@/components/ViewHeaderBar.vue'\nimport ListCardSwitch from '@/components/ListCardSwitch.vue'\nimport AComWithDesc from '@/components/AComWithDesc.vue'\nimport DataStatisticsDrawer from '../components/dataStatisticsDrawer.vue'\nimport { isTheSameParentRoute } from '@/utils/utils'\n\nexport default defineComponent({\n  beforeRouteEnter(to, from, next) {\n    const isSameParentRoute = isTheSameParentRoute(from, to)\n    if (!isSameParentRoute) {\n      store.commit('SET_LIST_SHOW_TYPE', 'list')\n    }\n    next()\n  },\n})\n</script>\n\n<script lang=\"ts\" setup>\nconst { t } = useI18n()\nconst {\n  northDriverList,\n  isListLoading,\n  getNorthDriverList,\n  reloadDriverList,\n\n  goGroupPage,\n  goNodeConfig,\n  modifyNodeLogLevel,\n  deleteDriver,\n\n  sortBy,\n  sortDataByKey,\n  changeListShowMode,\n\n  addConfig,\n  showDialog,\n  editDialog,\n  showEditDialog,\n  editDriverData,\n} = useNorthDriver(true, true)\n\nconst { isShowDataStatistics, dataStatisticsVisiable, nodeItemData } = dataStatistics()\nconst { isNotSupportRemoveNode, isMonitorNode } = useDriverName()\n\nconst { showType } = useListShowType()\n\nconst { toggleNodeStartStopStatus } = useToggleNodeStartStopStatus()\nconst { countNodeStartStopStatus } = useNodeStartStopStatus()\n\nconst setNodeStartStopStatus = async (node: DriverItemInList, status: boolean, nodeIndex: number) => {\n  try {\n    const ret = await toggleNodeStartStopStatus(node, status)\n    const message = status ? t('config.runSuc') : t('config.stopSuc')\n    EmqxMessage.success(message)\n    if (typeof ret === 'object') {\n      northDriverList.value.splice(nodeIndex, 1, ret)\n    } else {\n      getNorthDriverList()\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nconst getNodeValue = (node: DriverItemInList) => {\n  const useDriverStatusSet = useDriverStatus({ data: node })\n  return useDriverStatusSet\n}\n\nconst rowClassName = (data: { row: DriverItemInList; rowIndex: number }) => {\n  const { row: node } = data\n  return isMonitorNode(node.name) ? 'row-disabled' : 'table-row-click'\n}\n\nconst handleClickOperator = async (command: string, row: DriverItemInList) => {\n  const apiMap = new Map([\n    ['edit', editDialog],\n    ['dataStatistics', isShowDataStatistics],\n    ['debugLogLevel', modifyNodeLogLevel],\n    ['delete', deleteDriver],\n  ])\n  const apiFunc = apiMap.get(command)\n  if (apiFunc && typeof apiFunc === 'function') {\n    apiFunc(row)\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.setup-list {\n  list-style: none;\n  margin-top: 6px;\n\n  .setup-item {\n    margin-bottom: 24px;\n  }\n}\n\n.operation-item-wrap {\n  display: flex;\n  align-items: center;\n}\n.operation-icon {\n  font-size: 24px;\n  color: #20466c;\n}\n.operation-image {\n  margin-right: 8px;\n  position: relative;\n  left: 2px;\n  width: 22px;\n  cursor: pointer;\n}\n.icon-image {\n  display: inline-block;\n  margin: 0 10px 0 -6px;\n  width: 24px;\n}\n\n:deep(.row-disabled) {\n  cursor: not-allowed;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJkB;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD;AACA,oBAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACphD,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC;;;AAGsB;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjvF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACptrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC;AACH,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtzrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC;AACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}]}