{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/monitoring/DataMonitoring.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/monitoring/DataMonitoring.vue","mtime":1708521072013},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IGFzIF9kZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnCmltcG9ydCB7IHVucmVmIGFzIF91bnJlZiwgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCByZW5kZXJMaXN0IGFzIF9yZW5kZXJMaXN0LCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgd2l0aEN0eCBhcyBfd2l0aEN0eCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBpc1JlZiBhcyBfaXNSZWYsIGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlIH0gZnJvbSAidnVlIgoKY29uc3QgX2hvaXN0ZWRfMSA9IHsKICBrZXk6IDAsCiAgY2xhc3M6ICJoZWFkZXItaXRlbSIKfQpjb25zdCBfaG9pc3RlZF8yID0geyBjbGFzczogImxhYmVsIiB9CmNvbnN0IF9ob2lzdGVkXzMgPSB7IGNsYXNzOiAidGFibGUtY29udGFpbmVyIiB9CmNvbnN0IF9ob2lzdGVkXzQgPSB7IGNsYXNzOiAidmFsdWUtY29sdW1uLWhkIiB9CmNvbnN0IF9ob2lzdGVkXzUgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaSIsIHsgY2xhc3M6ICJpY29uZm9udCBpY29uYWxhcm0iIH0sIG51bGwsIC0xKQpjb25zdCBfaG9pc3RlZF82ID0geyBjbGFzczogImhleGFkZWNpbWFsLWxhYmVsIiB9CmNvbnN0IF9ob2lzdGVkXzcgPSB7IGtleTogMCB9CmNvbnN0IF9ob2lzdGVkXzggPSB7CiAga2V5OiAxLAogIGNsYXNzOiAiaGFzLWVycm9yIgp9CmNvbnN0IF9ob2lzdGVkXzkgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVRleHRWTm9kZSgiV3JpdGUiKQoKaW1wb3J0IHR5cGUgeyBSZWYgfSBmcm9tICd2dWUnCmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZScKaW1wb3J0IHsgRWxQb3BvdmVyIH0gZnJvbSAnZWxlbWVudC1wbHVzJwppbXBvcnQgdHlwZSB7IFRhZ0RhdGFJblRhYmxlIH0gZnJvbSAnQC9jb21wb3NhYmxlcy9kYXRhL3VzZURhdGFNb25pdG9yaW5nJwppbXBvcnQgdXNlRGF0YU1vbml0b3JpbmcgZnJvbSAnQC9jb21wb3NhYmxlcy9kYXRhL3VzZURhdGFNb25pdG9yaW5nJwppbXBvcnQgeyB1c2VUYWdEZWNpbWFsIH0gZnJvbSAnQC9jb21wb3NhYmxlcy9jb25maWcvdXNlQWRkVGFnQ29tbW9uJwppbXBvcnQgZGF0ZWZvcm1hdCBmcm9tICdkYXRlZm9ybWF0JwppbXBvcnQgeyBnZXRFcnJvck1zZyB9IGZyb20gJ0AvdXRpbHMvdXRpbHMnCmltcG9ydCBXcml0ZURpYWxvZyBmcm9tICcuL2NvbXBvbmVudHMvV3JpdGVEaWFsb2cudnVlJwppbXBvcnQgVmlld0hlYWRlckJhciBmcm9tICdAL2NvbXBvbmVudHMvVmlld0hlYWRlckJhci52dWUnCmltcG9ydCBLZXl3b3JkU2VyYWNoSW5wdXQgZnJvbSAnQC9jb21wb25lbnRzL0tleXdvcmRTZWFyY2hJbnB1dC52dWUnCgoKZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL19kZWZpbmVDb21wb25lbnQoewogIHNldHVwKF9fcHJvcHMpIHsKCmNvbnN0IHsKICBub2RlTGlzdCwKICBncm91cExpc3QsCiAga2V5d29yZFNlYXJjaCwKICBjdXJyZW50R3JvdXAsCiAgcGFnZUNvbnRyb2xsZXIsCiAgdGFibGVEYXRhLAogIHNob3dWYWx1ZUJ5SGV4YWRlY2ltYWwsCiAgdXBkYXRlZCwKICBjdXJyZW50Tm9kZU5hbWUsCgogIHRhYmxlRW1wdHlUZXh0LAoKICBoYW5kbGVTaG93VmFsdWVCeUhleGFkZWNpbWFsQ2hhbmdlZCwKICBjYW5Xcml0ZSwKICBoYW5kbGVTaXplQ2hhbmdlLAogIHNlbGVjdGVkTm9kZUNoYW5nZWQsCiAgc2VsZWN0ZWRHcm91cENoYW5nZWQsCiAgZGJHZXRUYWdMaXN0LAogIHNvcnREYXRhQnlLZXksCiAgd3JpdHRlblRhZywKfSA9IHVzZURhdGFNb25pdG9yaW5nKCkKCmNvbnN0IHNob3dXcml0ZURpYWxvZyA9IHJlZihmYWxzZSkKY29uc3QgY3VycmVudFRhZzogUmVmPHVuZGVmaW5lZCB8IFRhZ0RhdGFJblRhYmxlPiA9IHJlZih1bmRlZmluZWQpCgpjb25zdCB3cml0ZURhdGEgPSAoaXRlbTogVGFnRGF0YUluVGFibGUpID0+IHsKICBjdXJyZW50VGFnLnZhbHVlID0gaXRlbQogIHNob3dXcml0ZURpYWxvZy52YWx1ZSA9IHRydWUKfQpjb25zdCB7IHRhZ0RlY2ltYWxWYWx1ZSB9ID0gdXNlVGFnRGVjaW1hbCgpCgpyZXR1cm4gKF9jdHg6IGFueSxfY2FjaGU6IGFueSkgPT4gewogIGNvbnN0IF9jb21wb25lbnRfZW1xeF9vcHRpb24gPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC1vcHRpb24iKSEKICBjb25zdCBfY29tcG9uZW50X2VtcXhfc2VsZWN0ID0gX3Jlc29sdmVDb21wb25lbnQoImVtcXgtc2VsZWN0IikhCiAgY29uc3QgX2NvbXBvbmVudF9lbXF4X3RhYmxlX2NvbHVtbiA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbXF4LXRhYmxlLWNvbHVtbiIpIQogIGNvbnN0IF9jb21wb25lbnRfZW1xeF9zd2l0Y2ggPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC1zd2l0Y2giKSEKICBjb25zdCBfY29tcG9uZW50X2VtcXhfYnV0dG9uID0gX3Jlc29sdmVDb21wb25lbnQoImVtcXgtYnV0dG9uIikhCiAgY29uc3QgX2NvbXBvbmVudF9lbXF4X3RhYmxlID0gX3Jlc29sdmVDb21wb25lbnQoImVtcXgtdGFibGUiKSEKICBjb25zdCBfY29tcG9uZW50X2VtcXhfcGFnaW5hdGlvbiA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbXF4LXBhZ2luYXRpb24iKSEKICBjb25zdCBfY29tcG9uZW50X2VtcXhfY2FyZCA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbXF4LWNhcmQiKSEKCiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBbCiAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2NhcmQsIHsgY2xhc3M6ICJkYXRhLW1vbml0b3JpbmciIH0sIHsKICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgIF9jcmVhdGVWTm9kZShWaWV3SGVhZGVyQmFyLCBudWxsLCB7CiAgICAgICAgICBsZWZ0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgIChfdW5yZWYoY3VycmVudEdyb3VwKS5ncm91cE5hbWUpCiAgICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJzcGFuIiwgX2hvaXN0ZWRfMSwgWwogICAgICAgICAgICAgICAgICBfY3JlYXRlRWxlbWVudFZOb2RlKCJsYWJlbCIsIF9ob2lzdGVkXzIsIF90b0Rpc3BsYXlTdHJpbmcoX2N0eC4kdCgnZGF0YS51cGRhdGVkJykpLCAxKSwKICAgICAgICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoX3VucmVmKGRhdGVmb3JtYXQpKF91bnJlZih1cGRhdGVkKSwgJ3l5eXktbW0tZGQgSEg6TU06c3MnKSksIDEpCiAgICAgICAgICAgICAgICBdKSkKICAgICAgICAgICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoIiIsIHRydWUpCiAgICAgICAgICBdKSwKICAgICAgICAgIHJpZ2h0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfc2VsZWN0LCB7CiAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogX3VucmVmKGN1cnJlbnRHcm91cCkubm9kZSwKICAgICAgICAgICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gKCRldmVudDogYW55KSA9PiAoKF91bnJlZihjdXJyZW50R3JvdXApLm5vZGUpID0gJGV2ZW50KSksCiAgICAgICAgICAgICAgc2l6ZTogIm1lZGl1bSIsCiAgICAgICAgICAgICAgZmlsdGVyYWJsZTogIiIsCiAgICAgICAgICAgICAgY2xlYXJhYmxlOiAiIiwKICAgICAgICAgICAgICBjbGFzczogImhlYWRlci1pdGVtIHNlYXJjaC1ncm91cCBmaWx0ZXItc2VsZWN0b3IiLAogICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBfY3R4LiR0KCdjb25maWcuc291dGhEZXZpY2VQbGFjZWhvbGRlcicpLAogICAgICAgICAgICAgIG9uQ2hhbmdlOiBfdW5yZWYoc2VsZWN0ZWROb2RlQ2hhbmdlZCkKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFsKICAgICAgICAgICAgICAgIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlRWxlbWVudEJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoX3VucmVmKG5vZGVMaXN0KSwgKHsgbmFtZSB9KSA9PiB7CiAgICAgICAgICAgICAgICAgIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbXF4X29wdGlvbiwgewogICAgICAgICAgICAgICAgICAgIGtleTogbmFtZSwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmFtZSwKICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmFtZQogICAgICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbInZhbHVlIiwgImxhYmVsIl0pKQogICAgICAgICAgICAgICAgfSksIDEyOCkpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICB9LCA4LCBbIm1vZGVsVmFsdWUiLCAicGxhY2Vob2xkZXIiLCAib25DaGFuZ2UiXSksCiAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfc2VsZWN0LCB7CiAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogX3VucmVmKGN1cnJlbnRHcm91cCkuZ3JvdXBOYW1lLAogICAgICAgICAgICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSAoJGV2ZW50OiBhbnkpID0+ICgoX3VucmVmKGN1cnJlbnRHcm91cCkuZ3JvdXBOYW1lKSA9ICRldmVudCkpLAogICAgICAgICAgICAgIGZpbHRlcmFibGU6ICIiLAogICAgICAgICAgICAgIGNsZWFyYWJsZTogIiIsCiAgICAgICAgICAgICAgc2l6ZTogIm1lZGl1bSIsCiAgICAgICAgICAgICAgY2xhc3M6ICJoZWFkZXItaXRlbSBzZWFyY2gtZ3JvdXAgZmlsdGVyLXNlbGVjdG9yIiwKICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogX2N0eC4kdCgnY29uZmlnLmdyb3VwUGxhY2Vob2xkZXInKSwKICAgICAgICAgICAgICBvbkNoYW5nZTogX3VucmVmKHNlbGVjdGVkR3JvdXBDaGFuZ2VkKQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdChfdW5yZWYoZ3JvdXBMaXN0KSwgKGl0ZW0pID0+IHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VtcXhfb3B0aW9uLCB7CiAgICAgICAgICAgICAgICAgICAga2V5OiBpdGVtLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0ubmFtZSwKICAgICAgICAgICAgICAgICAgICBsYWJlbDogaXRlbS5uYW1lCiAgICAgICAgICAgICAgICAgIH0sIG51bGwsIDgsIFsidmFsdWUiLCAibGFiZWwiXSkpCiAgICAgICAgICAgICAgICB9KSwgMTI4KSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfOiAxCiAgICAgICAgICAgIH0sIDgsIFsibW9kZWxWYWx1ZSIsICJwbGFjZWhvbGRlciIsICJvbkNoYW5nZSJdKSwKICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKEtleXdvcmRTZXJhY2hJbnB1dCwgewogICAgICAgICAgICAgIG1vZGVsVmFsdWU6IF91bnJlZihrZXl3b3JkU2VhcmNoKSwKICAgICAgICAgICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gKCRldmVudDogYW55KSA9PiAoX2lzUmVmKGtleXdvcmRTZWFyY2gpID8gKGtleXdvcmRTZWFyY2gpLnZhbHVlID0gJGV2ZW50IDogbnVsbCkpLAogICAgICAgICAgICAgIGNsYXNzOiAiaGVhZGVyLWl0ZW0gc2VhcmNoX2lucHV0IiwKICAgICAgICAgICAgICBvbklucHV0OiBfdW5yZWYoZGJHZXRUYWdMaXN0KSwKICAgICAgICAgICAgICBvbkNsZWFyOiBfdW5yZWYoZGJHZXRUYWdMaXN0KSwKICAgICAgICAgICAgICBvbkVudGVyOiBfdW5yZWYoZGJHZXRUYWdMaXN0KQogICAgICAgICAgICB9LCBudWxsLCA4LCBbIm1vZGVsVmFsdWUiLCAib25JbnB1dCIsICJvbkNsZWFyIiwgIm9uRW50ZXIiXSkKICAgICAgICAgIF0pLAogICAgICAgICAgXzogMQogICAgICAgIH0pLAogICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzMsIFsKICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfdGFibGUsIHsKICAgICAgICAgICAgZGF0YTogX3VucmVmKHRhYmxlRGF0YSksCiAgICAgICAgICAgICJlbXB0eS10ZXh0IjogX3VucmVmKHRhYmxlRW1wdHlUZXh0KSwKICAgICAgICAgICAgb25Tb3J0Q2hhbmdlOiBfdW5yZWYoc29ydERhdGFCeUtleSkKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfdGFibGVfY29sdW1uLCB7CiAgICAgICAgICAgICAgICBwcm9wOiAidGFnTmFtZSIsCiAgICAgICAgICAgICAgICBsYWJlbDogX2N0eC4kdCgnY29tbW9uLm5hbWUnKSwKICAgICAgICAgICAgICAgIHNvcnRhYmxlOiAiY3VzdG9tIiwKICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiAiMTAwIgogICAgICAgICAgICAgIH0sIG51bGwsIDgsIFsibGFiZWwiXSksCiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZW1xeF90YWJsZV9jb2x1bW4sIHsKICAgICAgICAgICAgICAgIHByb3A6ICJhZGRyZXNzIiwKICAgICAgICAgICAgICAgIGxhYmVsOiBfY3R4LiR0KCdjb25maWcuYWRkcmVzcycpLAogICAgICAgICAgICAgICAgc29ydGFibGU6ICJjdXN0b20iLAogICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6ICIxMDAiCiAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgWyJsYWJlbCJdKSwKICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X3RhYmxlX2NvbHVtbiwgewogICAgICAgICAgICAgICAgbGFiZWw6IF9jdHguJHQoJ2NvbW1vbi50eXBlJyksCiAgICAgICAgICAgICAgICB3aWR0aDogIjkwIiwKICAgICAgICAgICAgICAgIHNvcnRhYmxlOiAiY3VzdG9tIiwKICAgICAgICAgICAgICAgIHByb3A6ICJ0eXBlTGFiZWwiCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKHsgcm93IH0pID0+IFsKICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKHJvdy50eXBlTGFiZWwpLCAxKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfOiAxCiAgICAgICAgICAgICAgfSwgOCwgWyJsYWJlbCJdKSwKICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X3RhYmxlX2NvbHVtbiwgewogICAgICAgICAgICAgICAgbGFiZWw6IF9jdHguJHQoJ2NvbmZpZy5kZWNpbWFsJykKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoeyByb3cgfSkgPT4gWwogICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcoX3VucmVmKHRhZ0RlY2ltYWxWYWx1ZSkocm93LmRlY2ltYWwpKSwgMSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgIH0sIDgsIFsibGFiZWwiXSksCiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZW1xeF90YWJsZV9jb2x1bW4sIHsKICAgICAgICAgICAgICAgIHByb3A6ICJ2YWx1ZVRvU2hvdyIsCiAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogIjEwMCIKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBoZWFkZXI6IF93aXRoQ3R4KCgpID0+IFsKICAgICAgICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfNCwgWwogICAgICAgICAgICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoInNwYW4iLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKF9jdHguJHQoJ2RhdGEudmFsdWUnKSksIDEpLAogICAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoRWxQb3BvdmVyKSwgewogICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiAidG9wLXN0YXJ0IiwKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxODAsCiAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiAiaG92ZXIiCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlOiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9ob2lzdGVkXzUKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlRWxlbWVudFZOb2RlKCJsYWJlbCIsIF9ob2lzdGVkXzYsIF90b0Rpc3BsYXlTdHJpbmcoX2N0eC4kdCgnZGF0YS5kaXNwbGF5VGhlVmFsdWVJbkhleGFkZWNpbWFsJykpLCAxKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZW1xeF9zd2l0Y2gsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAibWluaSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogX3VucmVmKHNob3dWYWx1ZUJ5SGV4YWRlY2ltYWwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzNdIHx8IChfY2FjaGVbM10gPSAoJGV2ZW50OiBhbnkpID0+IChfaXNSZWYoc2hvd1ZhbHVlQnlIZXhhZGVjaW1hbCkgPyAoc2hvd1ZhbHVlQnlIZXhhZGVjaW1hbCkudmFsdWUgPSAkZXZlbnQgOiBudWxsKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IF91bnJlZihoYW5kbGVTaG93VmFsdWVCeUhleGFkZWNpbWFsQ2hhbmdlZCkKICAgICAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgWyJtb2RlbFZhbHVlIiwgIm9uQ2hhbmdlIl0pCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF86IDEKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoeyByb3cgfSkgPT4gWwogICAgICAgICAgICAgICAgICAoIXJvdy5lcnJvcikKICAgICAgICAgICAgICAgICAgICA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soInNwYW4iLCBfaG9pc3RlZF83LCBfdG9EaXNwbGF5U3RyaW5nKHJvdy52YWx1ZVRvU2hvdyksIDEpKQogICAgICAgICAgICAgICAgICAgIDogKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygic3BhbiIsIF9ob2lzdGVkXzgsICIgRXJyb3IoIiArIF90b0Rpc3BsYXlTdHJpbmcocm93LmVycm9yKSArICIpOiAiICsgX3RvRGlzcGxheVN0cmluZyhfdW5yZWYoZ2V0RXJyb3JNc2cpKHJvdy5lcnJvcikpLCAxKSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfdGFibGVfY29sdW1uLCB7CiAgICAgICAgICAgICAgICBsYWJlbDogX2N0eC4kdCgnY29uZmlnLmRlc2MnKSwKICAgICAgICAgICAgICAgIHByb3A6ICJkZXNjcmlwdGlvbiIsCiAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogIjEwMCIKICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbImxhYmVsIl0pLAogICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfdGFibGVfY29sdW1uLCB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjEwMCIsCiAgICAgICAgICAgICAgICBsYWJlbDogX2N0eC4kdCgnY29tbW9uLm9wZXInKSwKICAgICAgICAgICAgICAgIGFsaWduOiAicmlnaHQiCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKHsgcm93IH0pID0+IFsKICAgICAgICAgICAgICAgICAgKF91bnJlZihjYW5Xcml0ZSkocm93KSkKICAgICAgICAgICAgICAgICAgICA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VtcXhfYnV0dG9uLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogMCwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiAoJGV2ZW50OiBhbnkpID0+ICh3cml0ZURhdGEocm93KSkKICAgICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9ob2lzdGVkXzkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF86IDIKICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMzIsIFsib25DbGljayJdKSkKICAgICAgICAgICAgICAgICAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoIiIsIHRydWUpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF86IDEKICAgICAgICAgICAgICB9LCA4LCBbImxhYmVsIl0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfOiAxCiAgICAgICAgICB9LCA4LCBbImRhdGEiLCAiZW1wdHktdGV4dCIsICJvblNvcnRDaGFuZ2UiXSkKICAgICAgICBdKSwKICAgICAgICAoX3VucmVmKHBhZ2VDb250cm9sbGVyKS50b3RhbCA+IDEwMCkKICAgICAgICAgID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZW1xeF9wYWdpbmF0aW9uLCB7CiAgICAgICAgICAgICAga2V5OiAwLAogICAgICAgICAgICAgIGxheW91dDogInRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQsIGp1bXBlciIsCiAgICAgICAgICAgICAgImN1cnJlbnQtcGFnZSI6IF91bnJlZihwYWdlQ29udHJvbGxlcikubnVtLAogICAgICAgICAgICAgICJvblVwZGF0ZTpjdXJyZW50LXBhZ2UiOiBfY2FjaGVbNF0gfHwgKF9jYWNoZVs0XSA9ICgkZXZlbnQ6IGFueSkgPT4gKChfdW5yZWYocGFnZUNvbnRyb2xsZXIpLm51bSkgPSAkZXZlbnQpKSwKICAgICAgICAgICAgICAicGFnZS1zaXplcyI6IFsxMDAsIDIwMCwgMzAwLCA0MDAsIDUwMF0sCiAgICAgICAgICAgICAgdG90YWw6IF91bnJlZihwYWdlQ29udHJvbGxlcikudG90YWwsCiAgICAgICAgICAgICAgInBhZ2Utc2l6ZSI6IF91bnJlZihwYWdlQ29udHJvbGxlcikuc2l6ZSwKICAgICAgICAgICAgICBvblNpemVDaGFuZ2U6IF91bnJlZihoYW5kbGVTaXplQ2hhbmdlKQogICAgICAgICAgICB9LCBudWxsLCA4LCBbImN1cnJlbnQtcGFnZSIsICJ0b3RhbCIsICJwYWdlLXNpemUiLCAib25TaXplQ2hhbmdlIl0pKQogICAgICAgICAgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCIiLCB0cnVlKQogICAgICBdKSwKICAgICAgXzogMQogICAgfSksCiAgICBfY3JlYXRlVk5vZGUoV3JpdGVEaWFsb2csIHsKICAgICAgbW9kZWxWYWx1ZTogc2hvd1dyaXRlRGlhbG9nLnZhbHVlLAogICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVs1XSB8fCAoX2NhY2hlWzVdID0gKCRldmVudDogYW55KSA9PiAoKHNob3dXcml0ZURpYWxvZykudmFsdWUgPSAkZXZlbnQpKSwKICAgICAgZ3JvdXA6IF91bnJlZihjdXJyZW50R3JvdXApLmdyb3VwTmFtZSwKICAgICAgdGFnOiBjdXJyZW50VGFnLnZhbHVlLAogICAgICAibm9kZS1uYW1lIjogX3VucmVmKGN1cnJlbnROb2RlTmFtZSksCiAgICAgIG9uVXBkYXRlZDogX3VucmVmKHdyaXR0ZW5UYWcpCiAgICB9LCBudWxsLCA4LCBbIm1vZGVsVmFsdWUiLCAiZ3JvdXAiLCAidGFnIiwgIm5vZGUtbmFtZSIsICJvblVwZGF0ZWQiXSkKICBdLCA2NCkpCn0KfQoKfSk="},{"version":3,"file":null,"sources":["/home/ulrich/neuron-dashboard/src/views/monitoring/DataMonitoring.vue"],"sourcesContent":["<template>\n  <emqx-card class=\"data-monitoring\">\n    <ViewHeaderBar>\n      <template v-slot:left>\n        <span v-if=\"currentGroup.groupName\" class=\"header-item\">\n          <label class=\"label\">{{ $t('data.updated') }}</label>\n          <span>{{ dateformat(updated, 'yyyy-mm-dd HH:MM:ss') }}</span>\n        </span>\n      </template>\n\n      <template v-slot:right>\n        <emqx-select\n          v-model=\"currentGroup.node\"\n          size=\"medium\"\n          filterable\n          clearable\n          class=\"header-item search-group filter-selector\"\n          :placeholder=\"$t('config.southDevicePlaceholder')\"\n          @change=\"selectedNodeChanged\"\n        >\n          <emqx-option v-for=\"{ name } in nodeList\" :key=\"name\" :value=\"name\" :label=\"name\" />\n        </emqx-select>\n\n        <emqx-select\n          v-model=\"currentGroup.groupName\"\n          filterable\n          clearable\n          size=\"medium\"\n          class=\"header-item search-group filter-selector\"\n          :placeholder=\"$t('config.groupPlaceholder')\"\n          @change=\"selectedGroupChanged\"\n        >\n          <emqx-option v-for=\"item in groupList\" :key=\"item.name\" :value=\"item.name\" :label=\"item.name\" />\n        </emqx-select>\n        <KeywordSerachInput\n          v-model=\"keywordSearch\"\n          class=\"header-item search_input\"\n          @input=\"dbGetTagList\"\n          @clear=\"dbGetTagList\"\n          @enter=\"dbGetTagList\"\n        />\n      </template>\n    </ViewHeaderBar>\n\n    <div class=\"table-container\">\n      <emqx-table :data=\"tableData\" :empty-text=\"tableEmptyText\" @sort-change=\"sortDataByKey\">\n        <emqx-table-column\n          prop=\"tagName\"\n          :label=\"$t('common.name')\"\n          sortable=\"custom\"\n          min-width=\"100\"\n        ></emqx-table-column>\n        <emqx-table-column\n          prop=\"address\"\n          :label=\"$t('config.address')\"\n          sortable=\"custom\"\n          min-width=\"100\"\n        ></emqx-table-column>\n        <emqx-table-column :label=\"$t('common.type')\" width=\"90\" sortable=\"custom\" prop=\"typeLabel\">\n          <template #default=\"{ row }\">{{ row.typeLabel }}</template>\n        </emqx-table-column>\n        <emqx-table-column :label=\"$t('config.decimal')\">\n          <template #default=\"{ row }\">{{ tagDecimalValue(row.decimal) }}</template>\n        </emqx-table-column>\n        <emqx-table-column prop=\"valueToShow\" min-width=\"100\">\n          <template #header>\n            <div class=\"value-column-hd\">\n              <span>{{ $t('data.value') }}</span>\n              <el-popover placement=\"top-start\" :width=\"180\" trigger=\"hover\">\n                <template #reference>\n                  <i class=\"iconfont iconalarm\" />\n                </template>\n                <label class=\"hexadecimal-label\">{{ $t('data.displayTheValueInHexadecimal') }}</label>\n                <emqx-switch\n                  size=\"mini\"\n                  v-model=\"showValueByHexadecimal\"\n                  @change=\"handleShowValueByHexadecimalChanged\"\n                />\n              </el-popover>\n            </div>\n          </template>\n          <template #default=\"{ row }\">\n            <span v-if=\"!row.error\">{{ row.valueToShow }}</span>\n            <span v-else class=\"has-error\"> Error({{ row.error }}): {{ getErrorMsg(row.error) }} </span>\n          </template>\n        </emqx-table-column>\n        <emqx-table-column :label=\"$t('config.desc')\" prop=\"description\" min-width=\"100\" />\n\n        <emqx-table-column width=\"100\" :label=\"$t('common.oper')\" align=\"right\">\n          <template #default=\"{ row }\">\n            <emqx-button type=\"text\" @click=\"writeData(row)\" v-if=\"canWrite(row)\">Write</emqx-button>\n          </template>\n        </emqx-table-column>\n      </emqx-table>\n    </div>\n    <emqx-pagination\n      v-if=\"pageController.total > 100\"\n      layout=\"total, sizes, prev, pager, next, jumper\"\n      v-model:current-page=\"pageController.num\"\n      :page-sizes=\"[100, 200, 300, 400, 500]\"\n      :total=\"pageController.total\"\n      :page-size=\"pageController.size\"\n      @size-change=\"handleSizeChange\"\n    />\n  </emqx-card>\n  <WriteDialog\n    v-model=\"showWriteDialog\"\n    :group=\"currentGroup.groupName\"\n    :tag=\"currentTag\"\n    :node-name=\"currentNodeName\"\n    @updated=\"writtenTag\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport type { Ref } from 'vue'\nimport { ref } from 'vue'\nimport { ElPopover } from 'element-plus'\nimport type { TagDataInTable } from '@/composables/data/useDataMonitoring'\nimport useDataMonitoring from '@/composables/data/useDataMonitoring'\nimport { useTagDecimal } from '@/composables/config/useAddTagCommon'\nimport dateformat from 'dateformat'\nimport { getErrorMsg } from '@/utils/utils'\nimport WriteDialog from './components/WriteDialog.vue'\nimport ViewHeaderBar from '@/components/ViewHeaderBar.vue'\nimport KeywordSerachInput from '@/components/KeywordSearchInput.vue'\n\nconst {\n  nodeList,\n  groupList,\n  keywordSearch,\n  currentGroup,\n  pageController,\n  tableData,\n  showValueByHexadecimal,\n  updated,\n  currentNodeName,\n\n  tableEmptyText,\n\n  handleShowValueByHexadecimalChanged,\n  canWrite,\n  handleSizeChange,\n  selectedNodeChanged,\n  selectedGroupChanged,\n  dbGetTagList,\n  sortDataByKey,\n  writtenTag,\n} = useDataMonitoring()\n\nconst showWriteDialog = ref(false)\nconst currentTag: Ref<undefined | TagDataInTable> = ref(undefined)\n\nconst writeData = (item: TagDataInTable) => {\n  currentTag.value = item\n  showWriteDialog.value = true\n}\nconst { tagDecimalValue } = useTagDecimal()\n</script>\n\n<style lang=\"scss\">\n.data-monitoring {\n  .filter-selector {\n    width: 220px;\n  }\n  .target-select {\n    > div {\n      display: inline-block;\n      &:not(:last-child) {\n        margin-right: 16px;\n      }\n    }\n  }\n  .table-container {\n    margin-bottom: 24px;\n  }\n  .emqx-pagination {\n    text-align: right;\n  }\n  .value-column-hd {\n    display: flex;\n    align-items: center;\n  }\n  .iconalarm {\n    font-size: 22px;\n    margin-left: 4px;\n    font-weight: normal;\n    cursor: pointer;\n    color: var(--main-green-color);\n  }\n  .has-error {\n    color: var(--main-red-color);\n  }\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmHA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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AC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC;AACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}]}