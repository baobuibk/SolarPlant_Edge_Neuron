{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/components/Breadcrumb.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/components/Breadcrumb.vue","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IGFzIF9kZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnCmltcG9ydCB7IHVucmVmIGFzIF91bnJlZiwgcmVuZGVyTGlzdCBhcyBfcmVuZGVyTGlzdCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgd2l0aE1vZGlmaWVycyBhcyBfd2l0aE1vZGlmaWVycywgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCBUcmFuc2l0aW9uR3JvdXAgYXMgX1RyYW5zaXRpb25Hcm91cCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiCgpjb25zdCBfd2l0aFNjb3BlSWQgPSBuID0+IChfcHVzaFNjb3BlSWQoImRhdGEtdi0xZDRkYThhNCIpLG49bigpLF9wb3BTY29wZUlkKCksbikKY29uc3QgX2hvaXN0ZWRfMSA9IHsKICBrZXk6IDAsCiAgY2xhc3M6ICJuby1yZWRpcmVjdCIKfQpjb25zdCBfaG9pc3RlZF8yID0gWyJvbkNsaWNrIl0KCgppbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIG9uQmVmb3JlTW91bnQsIHdhdGNoLCByZWFjdGl2ZSwgdG9SZWZzLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZScKaW1wb3J0IHsgdXNlUm91dGUsIHVzZVJvdXRlciB9IGZyb20gJ3Z1ZS1yb3V0ZXInCmltcG9ydCB7IHNldEJyZWFkY3J1bWJGdWxsUGF0aHMsIGdldEJyZWFkY3J1bWJGdWxsUGF0aHMgfSBmcm9tICdAL3V0aWxzL3VzZXInCgpjb25zdCBfX2RlZmF1bHRfXyA9IGRlZmluZUNvbXBvbmVudCh7CiAgbmFtZTogJ0JyZWFkY3J1bWInLAp9KQoKZnVuY3Rpb24gc2V0dXAoX19wcm9wcykgewoKY29uc3QgJHJvdXRlID0gdXNlUm91dGUoKQpjb25zdCAkcm91dGVyID0gdXNlUm91dGVyKCkKCmNvbnN0IHN0YXRlID0gcmVhY3RpdmUoewogIGxldmVsTGlzdDogW10gYXMgQXJyYXk8YW55PiwKfSkKY29uc3QgeyBsZXZlbExpc3QgfSA9IHRvUmVmcyhzdGF0ZSkKCm9uQmVmb3JlTW91bnQoKCkgPT4gewogIGdldEJyZWFkY3J1bWJzKCkKfSkKCndhdGNoKAogICgpID0+ICRyb3V0ZS5wYXRoLAogICgpID0+IHsKICAgIGdldEJyZWFkY3J1bWJzKCkKICB9LAogIHsgaW1tZWRpYXRlOiBmYWxzZSB9LAopCgpjb25zdCBpc1Nob3dCcmVhZGNydW1icyA9IGNvbXB1dGVkKCgpID0+ICEkcm91dGUubWV0YS5oaWRkZW5CcmVhZGNydW1iKQoKLy8gZ2V0IGxvY2Fsc3RvcmFnZSBicmVhZGNydW1icyAmJiBleGNoYW4KY29uc3QgZ2V0QnJlYWRjcnVtYnNUb01hcCA9ICgpOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0+IHsKICBjb25zdCBuYW1lRnVsbFBhdGhzID0gZ2V0QnJlYWRjcnVtYkZ1bGxQYXRocygpCiAgaWYgKCFuYW1lRnVsbFBhdGhzKSByZXR1cm4gbmV3IE1hcCgpCgogIGNvbnN0IG5hbWVGdWxsUGF0aEFycmF5OiBzdHJpbmdbXSA9IG5hbWVGdWxsUGF0aHMuc3BsaXQoJzsnKSAvLyBbJ25hbWU6IGZ1bGxwYXRoJywgJ25hbWUyOmZ1bGxwYXRoMiddCiAgY29uc3QgZnVsbFBhdGhBcnJheTogYW55ID0gbmFtZUZ1bGxQYXRoQXJyYXkubWFwKChpdGVtOiBzdHJpbmcpID0+IGl0ZW0uc3BsaXQoJzonKSkgLy8gW1tuYWVtLGZ1bGxwYXRoXSwgW25hbWVmdWxscGF0aDIyLCBdXQogIGNvbnN0IGZ1bGxQYXRoc01hcDogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXAoZnVsbFBhdGhBcnJheSkKICBmdWxsUGF0aHNNYXAuZGVsZXRlKCcnKQogIHJldHVybiBmdWxsUGF0aHNNYXAKfQovLyBzZXQgZnVsbHBhdGggdG8gYWxsIG1hdGNoZWQgcm91dGVzCmNvbnN0IGdldFJvdXRlc1dpdGhGdWxsUGF0aCA9IChyb3V0ZXM6IGFueVtdKTogYW55W10gPT4gewogIGNvbnN0IGZ1bGxQYXRocyA9IGdldEJyZWFkY3J1bWJzVG9NYXAoKQogIGNvbnN0IG5ld1JvdXRlID0gcm91dGVzLm1hcCgoaXRlbTogYW55KSA9PiB7CiAgICBjb25zdCBmdWxsUGF0aCA9IGZ1bGxQYXRocy5nZXQoaXRlbS5uYW1lKQogICAgaWYgKGZ1bGxQYXRoKSB7CiAgICAgIGl0ZW0uZnVsbFBhdGggPSBmdWxsUGF0aAogICAgfQogICAgcmV0dXJuIGl0ZW0KICB9KQogIHJldHVybiBuZXdSb3V0ZQp9Cgpjb25zdCBnZXRCcmVhZGNydW1icyA9ICgpID0+IHsKICBjb25zdCB7IGZ1bGxQYXRoLCBtYXRjaGVkIH0gPSAkcm91dGUKCiAgaWYgKCRyb3V0ZS5tZXRhLmhpZGRlbkJyZWFkY3J1bWIpIHsKICAgIHN0YXRlLmxldmVsTGlzdCA9IFtdCiAgICBzZXRCcmVhZGNydW1iRnVsbFBhdGhzKCcnKQogICAgcmV0dXJuCiAgfQoKICBjb25zdCBuZXdNYXRjaGVkID0gbWF0Y2hlZC5maWx0ZXIoKGl0ZW06IGFueSkgPT4gaXRlbS5tZXRhICYmIGl0ZW0ubWV0YS50aXRsZSkKICAvLyBzZXQgY3VyZW50IHJvdXRlIGZ1bGxwYXRoCiAgY29uc3QgY3VycmVudFJvdXRlID0gewogICAgLi4ubmV3TWF0Y2hlZFtuZXdNYXRjaGVkLmxlbmd0aCAtIDFdLAogICAgZnVsbFBhdGgsCiAgfQogIG5ld01hdGNoZWRbbmV3TWF0Y2hlZC5sZW5ndGggLSAxXSA9IGN1cnJlbnRSb3V0ZQoKICBjb25zdCBsYXN0TWF0Y2hlZFRvU3RyaW5nID0gZ2V0QnJlYWRjcnVtYkZ1bGxQYXRocygpCiAgY29uc3QgbGFzdGVNYXRjaGVkTWFwID0gZ2V0QnJlYWRjcnVtYnNUb01hcCgpIC8vIGxhc3QgdGltZSBtYXRjaGVkCgogIGNvbnN0IGxhc3RNYXRjaGVkTCA9IGxhc3RlTWF0Y2hlZE1hcC5zaXplCiAgY29uc3QgbmV3TWF0Y2hlZEwgPSBuZXdNYXRjaGVkPy5sZW5ndGgKICBjb25zdCByb290Um91dGVOYW1lOiBhbnkgPSBuZXdNYXRjaGVkTCA/IG5ld01hdGNoZWRbMF0ubmFtZSA6ICcnCgogIGlmIChsYXN0TWF0Y2hlZEwgJiYgbmV3TWF0Y2hlZEwgJiYgcm9vdFJvdXRlTmFtZSAmJiBsYXN0ZU1hdGNoZWRNYXAuZ2V0KHJvb3RSb3V0ZU5hbWUpKSB7CiAgICAvLyBzYW1lIHBhcmVudCBub2RlCiAgICBpZiAobGFzdE1hdGNoZWRMIDwgbmV3TWF0Y2hlZEwpIHsKICAgICAgLy8gaW50byBuZXcgcGFnZQogICAgICBjb25zdCByb3V0ZU5hbWU6IHN0cmluZyA9IFN0cmluZyhjdXJyZW50Um91dGUubmFtZSkgfHwgJycKICAgICAgY29uc3QgbmFtZUZ1bGxQYXRoR3JvdXAgPSBgJHtyb3V0ZU5hbWV9OiR7ZnVsbFBhdGh9O2AKICAgICAgc2V0QnJlYWRjcnVtYkZ1bGxQYXRocyhgJHtsYXN0TWF0Y2hlZFRvU3RyaW5nfSR7bmFtZUZ1bGxQYXRoR3JvdXB9YCkKICAgIH0KICB9IGVsc2UgewogICAgY29uc3QgbmFtZVBhdGhzID0gbmV3TWF0Y2hlZC5tYXAoKGl0ZW06IGFueSkgPT4gewogICAgICBjb25zdCBmdWxscGF0aCA9IGl0ZW0uZnVsbFBhdGggfHwgaXRlbS5wYXRoCiAgICAgIHJldHVybiBgJHtpdGVtLm5hbWV9OiR7ZnVsbHBhdGh9YAogICAgfSkKICAgIGNvbnN0IG5hbWVQYXRoVG9TdHJpbmcgPSBuYW1lUGF0aHMKICAgICAgPyBuYW1lUGF0aHMucmVkdWNlKChhcnIsIGN1cikgPT4gewogICAgICAgICAgcmV0dXJuIGAke2Fycn07JHtjdXJ9O2AKICAgICAgICB9KQogICAgICA6ICcnCiAgICBzZXRCcmVhZGNydW1iRnVsbFBhdGhzKG5hbWVQYXRoVG9TdHJpbmcpCiAgfQogIHN0YXRlLmxldmVsTGlzdCA9IGdldFJvdXRlc1dpdGhGdWxsUGF0aChuZXdNYXRjaGVkKQp9Cgpjb25zdCBvbkhhbmRsZUxpbmsgPSAoaXRlbTogYW55KSA9PiB7CiAgY29uc3QgeyByZWRpcmVjdCwgcGF0aCwgZnVsbFBhdGggfSA9IGl0ZW0KICBpZiAocmVkaXJlY3QpIHsKICAgICRyb3V0ZXIucHVzaChyZWRpcmVjdCkKICAgIHJldHVybgogIH0KICBjb25zdCB0b19wYXRoID0gZnVsbFBhdGggfHwgcGF0aAogICRyb3V0ZXIucHVzaCh0b19wYXRoKQp9CgpyZXR1cm4gKF9jdHg6IGFueSxfY2FjaGU6IGFueSkgPT4gewogIGNvbnN0IF9jb21wb25lbnRfZW1xeF9icmVhZGNydW1iX2l0ZW0gPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC1icmVhZGNydW1iLWl0ZW0iKSEKICBjb25zdCBfY29tcG9uZW50X2VtcXhfYnJlYWRjcnVtYiA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbXF4LWJyZWFkY3J1bWIiKSEKCiAgcmV0dXJuIChfdW5yZWYoaXNTaG93QnJlYWRjcnVtYnMpKQogICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbXF4X2JyZWFkY3J1bWIsIHsKICAgICAgICBrZXk6IDAsCiAgICAgICAgc2VwYXJhdG9yOiAiLyIKICAgICAgfSwgewogICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFsKICAgICAgICAgIF9jcmVhdGVWTm9kZShfVHJhbnNpdGlvbkdyb3VwLCB7CiAgICAgICAgICAgIG5hbWU6ICJicmVhZGNydW1iIiwKICAgICAgICAgICAgbW9kZTogIm91dC1pbiIKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlRWxlbWVudEJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoX3VucmVmKGxldmVsTGlzdCksIChpdGVtLCBpbmRleCkgPT4gewogICAgICAgICAgICAgICAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VtcXhfYnJlYWRjcnVtYl9pdGVtLCB7CiAgICAgICAgICAgICAgICAgIGtleTogaXRlbS5wYXRoCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFsKICAgICAgICAgICAgICAgICAgICAoaXRlbS5yZWRpcmVjdCA9PT0gJ25vUmVkaXJlY3QnIHx8IGluZGV4ID09PSBfdW5yZWYobGV2ZWxMaXN0KS5sZW5ndGggLSAxKQogICAgICAgICAgICAgICAgICAgICAgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJzcGFuIiwgX2hvaXN0ZWRfMSwgX3RvRGlzcGxheVN0cmluZyhfY3R4LiR0KGAke2l0ZW0ubWV0YS50aXRsZX1gKSksIDEpKQogICAgICAgICAgICAgICAgICAgICAgOiAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJhIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogMSwKICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBfd2l0aE1vZGlmaWVycygoJGV2ZW50OiBhbnkpID0+IChvbkhhbmRsZUxpbmsoaXRlbSkpLCBbInByZXZlbnQiXSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwgX3RvRGlzcGxheVN0cmluZyhfY3R4LiR0KGAke2l0ZW0ubWV0YS50aXRsZX1gKSksIDksIF9ob2lzdGVkXzIpKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgXzogMgogICAgICAgICAgICAgICAgfSwgMTAyNCkpCiAgICAgICAgICAgICAgfSksIDEyOCkpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfOiAxCiAgICAgICAgICB9KQogICAgICAgIF0pLAogICAgICAgIF86IDEKICAgICAgfSkpCiAgICA6IF9jcmVhdGVDb21tZW50Vk5vZGUoIiIsIHRydWUpCn0KfQoKCmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9fZGVmaW5lQ29tcG9uZW50KHsKICAuLi5fX2RlZmF1bHRfXywKICBzZXR1cH0p"},{"version":3,"file":null,"sources":["/home/ulrich/neuron-dashboard/src/components/Breadcrumb.vue"],"sourcesContent":["<template>\n  <emqx-breadcrumb v-if=\"isShowBreadcrumbs\" separator=\"/\">\n    <transition-group name=\"breadcrumb\" mode=\"out-in\">\n      <emqx-breadcrumb-item v-for=\"(item, index) in levelList\" :key=\"item.path\">\n        <span v-if=\"item.redirect === 'noRedirect' || index === levelList.length - 1\" class=\"no-redirect\">\n          {{ $t(`${item.meta.title}`) }}\n        </span>\n        <a v-else @click.prevent=\"onHandleLink(item)\">{{ $t(`${item.meta.title}`) }}</a>\n      </emqx-breadcrumb-item>\n    </transition-group>\n  </emqx-breadcrumb>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, onBeforeMount, watch, reactive, toRefs, computed } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport { setBreadcrumbFullPaths, getBreadcrumbFullPaths } from '@/utils/user'\n\nexport default defineComponent({\n  name: 'Breadcrumb',\n})\n</script>\n\n<script lang=\"ts\" setup>\nconst $route = useRoute()\nconst $router = useRouter()\n\nconst state = reactive({\n  levelList: [] as Array<any>,\n})\nconst { levelList } = toRefs(state)\n\nonBeforeMount(() => {\n  getBreadcrumbs()\n})\n\nwatch(\n  () => $route.path,\n  () => {\n    getBreadcrumbs()\n  },\n  { immediate: false },\n)\n\nconst isShowBreadcrumbs = computed(() => !$route.meta.hiddenBreadcrumb)\n\n// get localstorage breadcrumbs && exchan\nconst getBreadcrumbsToMap = (): Map<string, string> => {\n  const nameFullPaths = getBreadcrumbFullPaths()\n  if (!nameFullPaths) return new Map()\n\n  const nameFullPathArray: string[] = nameFullPaths.split(';') // ['name: fullpath', 'name2:fullpath2']\n  const fullPathArray: any = nameFullPathArray.map((item: string) => item.split(':')) // [[naem,fullpath], [namefullpath22, ]]\n  const fullPathsMap: Map<string, string> = new Map(fullPathArray)\n  fullPathsMap.delete('')\n  return fullPathsMap\n}\n// set fullpath to all matched routes\nconst getRoutesWithFullPath = (routes: any[]): any[] => {\n  const fullPaths = getBreadcrumbsToMap()\n  const newRoute = routes.map((item: any) => {\n    const fullPath = fullPaths.get(item.name)\n    if (fullPath) {\n      item.fullPath = fullPath\n    }\n    return item\n  })\n  return newRoute\n}\n\nconst getBreadcrumbs = () => {\n  const { fullPath, matched } = $route\n\n  if ($route.meta.hiddenBreadcrumb) {\n    state.levelList = []\n    setBreadcrumbFullPaths('')\n    return\n  }\n\n  const newMatched = matched.filter((item: any) => item.meta && item.meta.title)\n  // set curent route fullpath\n  const currentRoute = {\n    ...newMatched[newMatched.length - 1],\n    fullPath,\n  }\n  newMatched[newMatched.length - 1] = currentRoute\n\n  const lastMatchedToString = getBreadcrumbFullPaths()\n  const lasteMatchedMap = getBreadcrumbsToMap() // last time matched\n\n  const lastMatchedL = lasteMatchedMap.size\n  const newMatchedL = newMatched?.length\n  const rootRouteName: any = newMatchedL ? newMatched[0].name : ''\n\n  if (lastMatchedL && newMatchedL && rootRouteName && lasteMatchedMap.get(rootRouteName)) {\n    // same parent node\n    if (lastMatchedL < newMatchedL) {\n      // into new page\n      const routeName: string = String(currentRoute.name) || ''\n      const nameFullPathGroup = `${routeName}:${fullPath};`\n      setBreadcrumbFullPaths(`${lastMatchedToString}${nameFullPathGroup}`)\n    }\n  } else {\n    const namePaths = newMatched.map((item: any) => {\n      const fullpath = item.fullPath || item.path\n      return `${item.name}:${fullpath}`\n    })\n    const namePathToString = namePaths\n      ? namePaths.reduce((arr, cur) => {\n          return `${arr};${cur};`\n        })\n      : ''\n    setBreadcrumbFullPaths(namePathToString)\n  }\n  state.levelList = getRoutesWithFullPath(newMatched)\n}\n\nconst onHandleLink = (item: any) => {\n  const { redirect, path, fullPath } = item\n  if (redirect) {\n    $router.push(redirect)\n    return\n  }\n  const to_path = fullPath || path\n  $router.push(to_path)\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.nav-breadcrumb {\n  height: 32px;\n  background: #fff;\n  line-height: 32px;\n  border-bottom: 1px solid #e4e7ed;\n  padding: 0 20px;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;AAakB;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7E;AACA,oBAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC;;;AAGsB;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC;AACF;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtvlE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC;AACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACznB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxhF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjrD,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}]}