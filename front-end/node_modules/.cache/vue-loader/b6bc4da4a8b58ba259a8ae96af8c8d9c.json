{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/config/southDriver/Group.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/config/southDriver/Group.vue","mtime":1708521072013},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgd2l0aEFzeW5jQ29udGV4dCBhcyBfd2l0aEFzeW5jQ29udGV4dCwgZGVmaW5lQ29tcG9uZW50IGFzIF9kZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnCmltcG9ydCB7IHVucmVmIGFzIF91bnJlZiwgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCBpc1JlZiBhcyBfaXNSZWYsIHdpdGhNb2RpZmllcnMgYXMgX3dpdGhNb2RpZmllcnMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIHB1c2hTY29wZUlkIGFzIF9wdXNoU2NvcGVJZCwgcG9wU2NvcGVJZCBhcyBfcG9wU2NvcGVJZCB9IGZyb20gInZ1ZSIKCmNvbnN0IF93aXRoU2NvcGVJZCA9IG4gPT4gKF9wdXNoU2NvcGVJZCgiZGF0YS12LWY5MGQ1NDM4Iiksbj1uKCksX3BvcFNjb3BlSWQoKSxuKQpjb25zdCBfaG9pc3RlZF8xID0geyBjbGFzczogImNhcmQtdGl0bGUiIH0KY29uc3QgX2hvaXN0ZWRfMiA9IHsgY2xhc3M6ICJjYXJkLWJhci11bmRlci10aXRsZSBjb21tb24tZmxleCIgfQpjb25zdCBfaG9pc3RlZF8zID0geyBjbGFzczogImJhci1sZWZ0IGNvbW1vbi1mbGV4IiB9CmNvbnN0IF9ob2lzdGVkXzQgPSB7IGNsYXNzOiAiZHJpdmVyLW5hbWUiIH0KY29uc3QgX2hvaXN0ZWRfNSA9IHsgY2xhc3M6ICJidG5zIGNvbW1vbi1mbGV4IiB9CmNvbnN0IF9ob2lzdGVkXzYgPSB7IGNsYXNzOiAiYnRuLWdyb3VwIiB9CmNvbnN0IF9ob2lzdGVkXzcgPSAvKiNfX1BVUkVfXyovIF93aXRoU2NvcGVJZCgoKSA9PiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaSIsIHsgY2xhc3M6ICJpY29uZm9udCBpY29uLWltcG9ydCBpY29uZG93bmxvYWQiIH0sIG51bGwsIC0xKSkKY29uc3QgX2hvaXN0ZWRfOCA9IC8qI19fUFVSRV9fKi8gX3dpdGhTY29wZUlkKCgpID0+IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJpIiwgeyBjbGFzczogImljb25mb250IGljb24taW1wb3J0IGljb25zdWJtaXQiIH0sIG51bGwsIC0xKSkKY29uc3QgX2hvaXN0ZWRfOSA9IHsgY2xhc3M6ICJvcGVyYXRvci13cmFwIiB9CmNvbnN0IF9ob2lzdGVkXzEwID0gWyJvbkNsaWNrIl0KY29uc3QgX2hvaXN0ZWRfMTEgPSBbIm9uQ2xpY2siXQpjb25zdCBfaG9pc3RlZF8xMiA9IFsib25DbGljayJdCgppbXBvcnQgdHlwZSB7IFJlZiB9IGZyb20gJ3Z1ZScKaW1wb3J0IHsgcmVmIH0gZnJvbSAndnVlJwppbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICd2dWUtcm91dGVyJwppbXBvcnQgeyBFbExpbmsgfSBmcm9tICdlbGVtZW50LXBsdXMnCmltcG9ydCBBQ29tV2l0aERlc2MgZnJvbSAnQC9jb21wb25lbnRzL0FDb21XaXRoRGVzYy52dWUnCmltcG9ydCB1c2VHcm91cExpc3QgZnJvbSAnQC9jb21wb3NhYmxlcy9jb25maWcvdXNlR3JvdXBMaXN0JwppbXBvcnQgdHlwZSB7IEdyb3VwRGF0YSwgR3JvdXBGb3JtIH0gZnJvbSAnQC90eXBlcy9jb25maWcnCmltcG9ydCBHcm91cERpYWxvZyBmcm9tICcuL2NvbXBvbmVudHMvR3JvdXBEaWFsb2cudnVlJwppbXBvcnQgeyB1c2VOb2RlUGx1Z2luSW5mbyB9IGZyb20gJ0AvY29tcG9zYWJsZXMvY29uZmlnL3VzZVBsdWdpbkluZm8nCgoKZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL19kZWZpbmVDb21wb25lbnQoewogIGFzeW5jIHNldHVwKF9fcHJvcHMpIHsKCmxldCBfX3RlbXA6IGFueSwgX19yZXN0b3JlOiBhbnkKCmNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpCgpjb25zdCB7IG5vZGVQbHVnaW5JbmZvLCBnZXROb2RlUGx1Z2luSW5mbyB9ID0gdXNlTm9kZVBsdWdpbkluZm8oKQo7KAogIChbX190ZW1wLF9fcmVzdG9yZV0gPSBfd2l0aEFzeW5jQ29udGV4dCgoKSA9PiBnZXROb2RlUGx1Z2luSW5mbygpKSksCiAgYXdhaXQgX190ZW1wLAogIF9fcmVzdG9yZSgpCikKCmNvbnN0IHsKICBub2RlLAogIGdyb3VwTGlzdCwKICBncm91cENoZWNrZWRMaXN0LAogIGlzTGlzdExvYWRpbmcsCiAgYWxsQ2hlY2tlZCwKICBnZXRHcm91cExpc3QsCiAgc29ydEJ5LAogIHNvcnRHcm91cExpc3REYXRhLAogIGNsZWFyR3JvdXAsCiAgZGVsR3JvdXAsCiAgYmF0Y2hEZWxldGVHcm91cCwKICBpc0V4cG9ydGluZywKICBkb3dubG9hZFRlbXBsYXRlLAogIGltcG9ydFRhZ3NCeUdyb3VwcywKICBFeHBvcnRUYWdzQnlHcm91cHMsCiAgZ29Nb25pdG9yaW5nUGFnZSwKfSA9IHVzZUdyb3VwTGlzdChub2RlUGx1Z2luSW5mby52YWx1ZSkKCmNvbnN0IHNob3dHcm91cERpYWxvZyA9IHJlZihmYWxzZSkKY29uc3QgaXNFZGl0R3JvdXAgPSByZWYoZmFsc2UpCmNvbnN0IGN1cnJlbnRHcm91cDogUmVmPEdyb3VwRm9ybSB8IHVuZGVmaW5lZD4gPSByZWYodW5kZWZpbmVkKQoKY29uc3QgYWRkR3JvdXAgPSAoKSA9PiB7CiAgY3VycmVudEdyb3VwLnZhbHVlID0gdW5kZWZpbmVkCiAgc2hvd0dyb3VwRGlhbG9nLnZhbHVlID0gdHJ1ZQp9CgovLyB2aWV3IHwgZWRpdCBncm91cApjb25zdCBvcGVyYXRvckdyb3VwID0gKHsgbmFtZSwgaW50ZXJ2YWwsIGdyb3VwIH06IEdyb3VwRGF0YSwgaXNFZGl0PzogYm9vbGVhbikgPT4gewogIGlzRWRpdEdyb3VwLnZhbHVlID0gISFpc0VkaXQKICBjdXJyZW50R3JvdXAudmFsdWUgPSB7CiAgICBpbnRlcnZhbCwKICAgIG5hbWUsCiAgICBub2RlOiBub2RlLnZhbHVlLAogICAgZ3JvdXAsCiAgfQogIHNob3dHcm91cERpYWxvZy52YWx1ZSA9IHRydWUKfQoKY29uc3QgZ29UYWdQYWdlID0gKHsgbmFtZSB9OiBHcm91cERhdGEpID0+IHsKICByb3V0ZXIucHVzaCh7CiAgICBuYW1lOiAnU291dGhEcml2ZXJHcm91cFRhZycsCiAgICBwYXJhbXM6IHsgZ3JvdXA6IG5hbWUgfSwKICB9KQp9CgpyZXR1cm4gKF9jdHg6IGFueSxfY2FjaGU6IGFueSkgPT4gewogIGNvbnN0IF9jb21wb25lbnRfZW1xeF9idXR0b24gPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC1idXR0b24iKSEKICBjb25zdCBfY29tcG9uZW50X2VtcXhfdXBsb2FkID0gX3Jlc29sdmVDb21wb25lbnQoImVtcXgtdXBsb2FkIikhCiAgY29uc3QgX2NvbXBvbmVudF9lbXF4X2Ryb3Bkb3duX21lbnUgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC1kcm9wZG93bi1tZW51IikhCiAgY29uc3QgX2NvbXBvbmVudF9lbXF4X2Ryb3Bkb3duID0gX3Jlc29sdmVDb21wb25lbnQoImVtcXgtZHJvcGRvd24iKSEKICBjb25zdCBfY29tcG9uZW50X2VtcXhfY2hlY2tib3ggPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC1jaGVja2JveCIpIQogIGNvbnN0IF9jb21wb25lbnRfZW1xeF90YWJsZV9jb2x1bW4gPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC10YWJsZS1jb2x1bW4iKSEKICBjb25zdCBfY29tcG9uZW50X2VtcXhfdGFibGUgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC10YWJsZSIpIQogIGNvbnN0IF9jb21wb25lbnRfZW1xeF9jYXJkID0gX3Jlc29sdmVDb21wb25lbnQoImVtcXgtY2FyZCIpIQogIGNvbnN0IF9kaXJlY3RpdmVfZW1xeF9sb2FkaW5nID0gX3Jlc29sdmVEaXJlY3RpdmUoImVtcXgtbG9hZGluZyIpIQoKICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIFsKICAgIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2NhcmQsIHsgY2xhc3M6ICJncm91cCIgfSwgewogICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaDMiLCBfaG9pc3RlZF8xLCBfdG9EaXNwbGF5U3RyaW5nKF9jdHguJHQoJ2NvbmZpZy5ncm91cExpc3QnKSksIDEpLAogICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzIsIFsKICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzMsIFsKICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgicCIsIF9ob2lzdGVkXzQsIFsKICAgICAgICAgICAgICBfY3JlYXRlRWxlbWVudFZOb2RlKCJsYWJlbCIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoX2N0eC4kdCgnY29uZmlnLmRldmljZU5hbWUnKSksIDEpLAogICAgICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoInNwYW4iLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKF91bnJlZihub2RlKSksIDEpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzUsIFsKICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfNiwgWwogICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfZHJvcGRvd24sIHsKICAgICAgICAgICAgICAgICJoaWRlLXRpbWVvdXQiOiA1MTIsCiAgICAgICAgICAgICAgICAicG9wcGVyLWNsYXNzIjogImJ0bi1kb3dubG9hZC10ZW1wLXBvcHBlciIKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBkcm9wZG93bjogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2Ryb3Bkb3duX21lbnUsIG51bGwsIHsKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2J1dHRvbiwgewogICAgICAgICAgICAgICAgICAgICAgICBwbGFpbjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAiYnRuLWRvd25sb2FkLXRlbXAiLAogICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBfdW5yZWYoZG93bmxvYWRUZW1wbGF0ZSkKICAgICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoInNwYW4iLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKF9jdHguJHQoJ2NvbmZpZy5kb3dubG9hZFRlbXBsYXRlJykpLCAxKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgICAgICAgICAgfSwgOCwgWyJvbkNsaWNrIl0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfdXBsb2FkLCB7CiAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICJ1cGxvYWRlci10YWciLAogICAgICAgICAgICAgICAgICAgICJiZWZvcmUtdXBsb2FkIjogX3VucmVmKGltcG9ydFRhZ3NCeUdyb3VwcyksCiAgICAgICAgICAgICAgICAgICAgInNob3ctZmlsZS1saXN0IjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAicGxhY2Vob2xkZXIiCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2J1dHRvbiwgeyBzaXplOiAic21hbGwiIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9ob2lzdGVkXzcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoX2N0eC4kdCgnY29tbW9uLmltcG9ydCcpKSwgMSkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF86IDEKICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgICAgICB9LCA4LCBbImJlZm9yZS11cGxvYWQiXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfYnV0dG9uLCB7CiAgICAgICAgICAgICAgICBzaXplOiAic21hbGwiLAogICAgICAgICAgICAgICAgY2xhc3M6ICJleHBvcnQtdGFncy0tYnRuIiwKICAgICAgICAgICAgICAgIGRpc2FibGVkOiAhX3VucmVmKGdyb3VwQ2hlY2tlZExpc3QpLmxlbmd0aCwKICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF91bnJlZihFeHBvcnRUYWdzQnlHcm91cHMpLAogICAgICAgICAgICAgICAgbG9hZGluZzogX3VucmVmKGlzRXhwb3J0aW5nKQogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFsKICAgICAgICAgICAgICAgICAgX2hvaXN0ZWRfOCwKICAgICAgICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoX2N0eC4kdCgnY29tbW9uLmV4cG9ydCcpKSwgMSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgIH0sIDgsIFsiZGlzYWJsZWQiLCAib25DbGljayIsICJsb2FkaW5nIl0pLAogICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfYnV0dG9uLCB7CiAgICAgICAgICAgICAgICBzaXplOiAic21hbGwiLAogICAgICAgICAgICAgICAgdHlwZTogInByaW1hcnkiLAogICAgICAgICAgICAgICAgb25DbGljazogYWRkR3JvdXAKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgICAgICAgIF9jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyhfY3R4LiR0KCdjb21tb24uY3JlYXRlJykpLCAxKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfOiAxCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZW1xeF9idXR0b24sIHsKICAgICAgICAgICAgICAgIHNpemU6ICJzbWFsbCIsCiAgICAgICAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICAgICAgICBkaXNhYmxlZDogIV91bnJlZihncm91cExpc3QpLmxlbmd0aCwKICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF91bnJlZihjbGVhckdyb3VwKQogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFsKICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKF9jdHguJHQoJ2NvbW1vbi5jbGVhcicpKSwgMSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgIH0sIDgsIFsiZGlzYWJsZWQiLCAib25DbGljayJdKSwKICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2J1dHRvbiwgewogICAgICAgICAgICAgICAgc2l6ZTogInNtYWxsIiwKICAgICAgICAgICAgICAgIHR5cGU6ICJkYW5nZXIiLAogICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICFfdW5yZWYoZ3JvdXBDaGVja2VkTGlzdCkubGVuZ3RoLAogICAgICAgICAgICAgICAgb25DbGljazogX3VucmVmKGJhdGNoRGVsZXRlR3JvdXApCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcoX2N0eC4kdCgnY29tbW9uLmRlbGV0ZScpKSwgMSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgIH0sIDgsIFsiZGlzYWJsZWQiLCAib25DbGljayJdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X3RhYmxlLCB7CiAgICAgICAgICBkYXRhOiBfdW5yZWYoZ3JvdXBMaXN0KSwKICAgICAgICAgICJlbXB0eS10ZXh0IjogX2N0eC4kdCgnY29tbW9uLmVtcHR5RGF0YScpLAogICAgICAgICAgInJvdy1jbGFzcy1uYW1lIjogJ3RhYmxlLXJvdy1jbGljaycsCiAgICAgICAgICAiZGVmYXVsdC1zb3J0IjogeyBwcm9wOiBfdW5yZWYoc29ydEJ5KS5wcm9wLCBvcmRlcjogYCR7X3VucmVmKHNvcnRCeSkub3JkZXJ9ZW5kaW5nYCB9LAogICAgICAgICAgb25Tb3J0Q2hhbmdlOiBfdW5yZWYoc29ydEdyb3VwTGlzdERhdGEpLAogICAgICAgICAgb25Sb3dDbGljazogZ29UYWdQYWdlCiAgICAgICAgfSwgewogICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X3RhYmxlX2NvbHVtbiwgeyB3aWR0aDogMjggfSwgewogICAgICAgICAgICAgIGhlYWRlcjogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZW1xeF9jaGVja2JveCwgewogICAgICAgICAgICAgICAgICBtb2RlbFZhbHVlOiBfdW5yZWYoYWxsQ2hlY2tlZCksCiAgICAgICAgICAgICAgICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSAoJGV2ZW50OiBhbnkpID0+IChfaXNSZWYoYWxsQ2hlY2tlZCkgPyAoYWxsQ2hlY2tlZCkudmFsdWUgPSAkZXZlbnQgOiBudWxsKSkKICAgICAgICAgICAgICAgIH0sIG51bGwsIDgsIFsibW9kZWxWYWx1ZSJdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCh7IHJvdyB9KSA9PiBbCiAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2NoZWNrYm94LCB7CiAgICAgICAgICAgICAgICAgIG1vZGVsVmFsdWU6IHJvdy5jaGVja2VkLAogICAgICAgICAgICAgICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6ICgkZXZlbnQ6IGFueSkgPT4gKChyb3cuY2hlY2tlZCkgPSAkZXZlbnQpLAogICAgICAgICAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IF93aXRoTW9kaWZpZXJzKCgpID0+IHt9LCBbInN0b3AiXSkpCiAgICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbIm1vZGVsVmFsdWUiLCAib25VcGRhdGU6bW9kZWxWYWx1ZSJdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF86IDEKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfdGFibGVfY29sdW1uLCB7CiAgICAgICAgICAgICAgbGFiZWw6IF9jdHguJHQoJ2NvbW1vbi5ObycpLAogICAgICAgICAgICAgIHdpZHRoOiA2MAogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKHsgaW5kZXggfSkgPT4gWwogICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKGluZGV4ICsgMSksIDEpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICB9LCA4LCBbImxhYmVsIl0pLAogICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X3RhYmxlX2NvbHVtbiwgewogICAgICAgICAgICAgIGxhYmVsOiBfY3R4LiR0KCdjb25maWcuZ3JvdXBOYW1lJyksCiAgICAgICAgICAgICAgcHJvcDogIm5hbWUiLAogICAgICAgICAgICAgIHNvcnRhYmxlOiAiY3VzdG9tIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKHsgcm93IH0pID0+IFsKICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoRWxMaW5rKSwgewogICAgICAgICAgICAgICAgICB0eXBlOiAicHJpbWFyeSIsCiAgICAgICAgICAgICAgICAgIHVuZGVybGluZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgIGhyZWY6ICJqYXZhc2NyaXB0OjsiLAogICAgICAgICAgICAgICAgICBvbkNsaWNrOiBfd2l0aE1vZGlmaWVycygoJGV2ZW50OiBhbnkpID0+IChnb1RhZ1BhZ2Uocm93KSksIFsic3RvcCJdKQogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKHJvdy5uYW1lKSwgMSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF86IDIKICAgICAgICAgICAgICAgIH0sIDEwMzIsIFsib25DbGljayJdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF86IDEKICAgICAgICAgICAgfSwgOCwgWyJsYWJlbCJdKSwKICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZW1xeF90YWJsZV9jb2x1bW4sIHsKICAgICAgICAgICAgICBsYWJlbDogX2N0eC4kdCgnY29uZmlnLnRhZ0NvdW50cycpLAogICAgICAgICAgICAgIHByb3A6ICJ0YWdfY291bnQiCiAgICAgICAgICAgIH0sIG51bGwsIDgsIFsibGFiZWwiXSksCiAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfdGFibGVfY29sdW1uLCB7CiAgICAgICAgICAgICAgbGFiZWw6IF9jdHguJHQoJ2NvbmZpZy5pbnRlcnZhbCcpLAogICAgICAgICAgICAgIHByb3A6ICJpbnRlcnZhbCIKICAgICAgICAgICAgfSwgbnVsbCwgOCwgWyJsYWJlbCJdKSwKICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZW1xeF90YWJsZV9jb2x1bW4sIHsKICAgICAgICAgICAgICBhbGlnbjogImxlZnQiLAogICAgICAgICAgICAgIGxhYmVsOiBfY3R4LiR0KCdjb21tb24ub3BlcicpLAogICAgICAgICAgICAgIHdpZHRoOiAiMTQwcHgiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoeyByb3cgfSkgPT4gWwogICAgICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfOSwgWwogICAgICAgICAgICAgICAgICBfY3JlYXRlVk5vZGUoQUNvbVdpdGhEZXNjLCB7CiAgICAgICAgICAgICAgICAgICAgY29udGVudDogX2N0eC4kdCgnY29tbW9uLmVkaXQnKQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICJlbC1pY29uLWVkaXQtb3V0bGluZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF93aXRoTW9kaWZpZXJzKCgkZXZlbnQ6IGFueSkgPT4gKG9wZXJhdG9yR3JvdXAocm93LCB0cnVlKSksIFsic3RvcCJdKQogICAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgX2hvaXN0ZWRfMTApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgXzogMgogICAgICAgICAgICAgICAgICB9LCAxMDMyLCBbImNvbnRlbnQiXSksCiAgICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShBQ29tV2l0aERlc2MsIHsKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBfY3R4LiR0KCdkYXRhLm1vbml0b3JpbmcnKQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICJpY29uZm9udCBpY29uc3RhdHVzIGljb24tbW9uaXRvcmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF93aXRoTW9kaWZpZXJzKCgkZXZlbnQ6IGFueSkgPT4gKF91bnJlZihnb01vbml0b3JpbmdQYWdlKShyb3cpKSwgWyJzdG9wIl0pCiAgICAgICAgICAgICAgICAgICAgICB9LCBudWxsLCA4LCBfaG9pc3RlZF8xMSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfOiAyCiAgICAgICAgICAgICAgICAgIH0sIDEwMzIsIFsiY29udGVudCJdKSwKICAgICAgICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKEFDb21XaXRoRGVzYywgewogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IF9jdHguJHQoJ2NvbW1vbi5kZWxldGUnKQogICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICJpY29uZm9udCBpY29uZGVsZXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogX3dpdGhNb2RpZmllcnMoKCRldmVudDogYW55KSA9PiAoX3VucmVmKGRlbEdyb3VwKShyb3cpKSwgWyJzdG9wIl0pCiAgICAgICAgICAgICAgICAgICAgICB9LCBudWxsLCA4LCBfaG9pc3RlZF8xMikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfOiAyCiAgICAgICAgICAgICAgICAgIH0sIDEwMzIsIFsiY29udGVudCJdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfOiAxCiAgICAgICAgICAgIH0sIDgsIFsibGFiZWwiXSkKICAgICAgICAgIF0pLAogICAgICAgICAgXzogMQogICAgICAgIH0sIDgsIFsiZGF0YSIsICJlbXB0eS10ZXh0IiwgImRlZmF1bHQtc29ydCIsICJvblNvcnRDaGFuZ2UiXSkKICAgICAgXSksCiAgICAgIF86IDEKICAgIH0sIDUxMiksIFsKICAgICAgW19kaXJlY3RpdmVfZW1xeF9sb2FkaW5nLCBfdW5yZWYoaXNMaXN0TG9hZGluZyldCiAgICBdKSwKICAgIF9jcmVhdGVWTm9kZShHcm91cERpYWxvZywgewogICAgICBtb2RlbFZhbHVlOiBzaG93R3JvdXBEaWFsb2cudmFsdWUsCiAgICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSAoJGV2ZW50OiBhbnkpID0+ICgoc2hvd0dyb3VwRGlhbG9nKS52YWx1ZSA9ICRldmVudCkpLAogICAgICAiY3VycmVudC1ub2RlIjogX3VucmVmKG5vZGUpLAogICAgICBncm91cDogY3VycmVudEdyb3VwLnZhbHVlLAogICAgICAiaXMtZWRpdCI6IGlzRWRpdEdyb3VwLnZhbHVlLAogICAgICBvblN1Ym1pdHRlZDogX3VucmVmKGdldEdyb3VwTGlzdCkKICAgIH0sIG51bGwsIDgsIFsibW9kZWxWYWx1ZSIsICJjdXJyZW50LW5vZGUiLCAiZ3JvdXAiLCAiaXMtZWRpdCIsICJvblN1Ym1pdHRlZCJdKQogIF0sIDY0KSkKfQp9Cgp9KQ=="},{"version":3,"file":null,"sources":["/home/ulrich/neuron-dashboard/src/views/config/southDriver/Group.vue"],"sourcesContent":["<template>\n  <emqx-card class=\"group\" v-emqx-loading=\"isListLoading\">\n    <h3 class=\"card-title\">{{ $t('config.groupList') }}</h3>\n    <div class=\"card-bar-under-title common-flex\">\n      <div class=\"bar-left common-flex\">\n        <p class=\"driver-name\">\n          <label>{{ $t('config.deviceName') }}</label>\n          <span>{{ node }}</span>\n          <!-- <i class=\"el-icon-edit icon-edit\" :title=\"$t('common.edit')\" @click=\"editNodeName\" /> -->\n        </p>\n      </div>\n      <div class=\"btns common-flex\">\n        <div class=\"btn-group\">\n          <emqx-dropdown :hide-timeout=\"512\" popper-class=\"btn-download-temp-popper\">\n            <emqx-upload\n              class=\"uploader-tag\"\n              :before-upload=\"importTagsByGroups\"\n              :show-file-list=\"false\"\n              action=\"placeholder\"\n            >\n              <emqx-button size=\"small\">\n                <i class=\"iconfont icon-import icondownload\"></i>\n                <span>{{ $t('common.import') }}</span>\n              </emqx-button>\n            </emqx-upload>\n            <template #dropdown>\n              <emqx-dropdown-menu>\n                <emqx-button plain class=\"btn-download-temp\" @click=\"downloadTemplate\">\n                  <span>{{ $t('config.downloadTemplate') }}</span>\n                </emqx-button>\n              </emqx-dropdown-menu>\n            </template>\n          </emqx-dropdown>\n\n          <emqx-button\n            size=\"small\"\n            class=\"export-tags--btn\"\n            :disabled=\"!groupCheckedList.length\"\n            @click=\"ExportTagsByGroups\"\n            :loading=\"isExporting\"\n          >\n            <i class=\"iconfont icon-import iconsubmit\"></i>\n            <span>{{ $t('common.export') }}</span>\n          </emqx-button>\n          <emqx-button size=\"small\" type=\"primary\" @click=\"addGroup\">\n            {{ $t('common.create') }}\n          </emqx-button>\n          <emqx-button size=\"small\" type=\"warning\" :disabled=\"!groupList.length\" @click=\"clearGroup\">{{\n            $t('common.clear')\n          }}</emqx-button>\n          <emqx-button size=\"small\" type=\"danger\" :disabled=\"!groupCheckedList.length\" @click=\"batchDeleteGroup\">{{\n            $t('common.delete')\n          }}</emqx-button>\n        </div>\n      </div>\n    </div>\n\n    <emqx-table\n      :data=\"groupList\"\n      :empty-text=\"$t('common.emptyData')\"\n      :row-class-name=\"'table-row-click'\"\n      :default-sort=\"{ prop: sortBy.prop, order: `${sortBy.order}ending` }\"\n      @sort-change=\"sortGroupListData\"\n      @row-click=\"goTagPage\"\n    >\n      <emqx-table-column :width=\"28\">\n        <template #header>\n          <emqx-checkbox v-model=\"allChecked\" />\n        </template>\n        <template #default=\"{ row }\">\n          <emqx-checkbox v-model=\"row.checked\" @click.stop=\"() => {}\" />\n        </template>\n      </emqx-table-column>\n      <emqx-table-column :label=\"$t('common.No')\" :width=\"60\">\n        <template #default=\"{ index }\">{{ index + 1 }}</template>\n      </emqx-table-column>\n      <emqx-table-column :label=\"$t('config.groupName')\" prop=\"name\" sortable=\"custom\">\n        <template #default=\"{ row }\">\n          <el-link type=\"primary\" :underline=\"false\" href=\"javascript:;\" @click.stop=\"goTagPage(row)\">\n            {{ row.name }}\n          </el-link>\n        </template>\n      </emqx-table-column>\n      <emqx-table-column :label=\"$t('config.tagCounts')\" prop=\"tag_count\"></emqx-table-column>\n      <emqx-table-column :label=\"$t('config.interval')\" prop=\"interval\"></emqx-table-column>\n      <emqx-table-column align=\"left\" :label=\"$t('common.oper')\" width=\"140px\">\n        <template #default=\"{ row }\">\n          <div class=\"operator-wrap\">\n            <AComWithDesc :content=\"$t('common.edit')\">\n              <i class=\"el-icon-edit-outline\" @click.stop=\"operatorGroup(row, true)\" />\n            </AComWithDesc>\n            <AComWithDesc :content=\"$t('data.monitoring')\">\n              <i class=\"iconfont iconstatus icon-monitoring\" @click.stop=\"goMonitoringPage(row)\" />\n            </AComWithDesc>\n            <AComWithDesc :content=\"$t('common.delete')\">\n              <i class=\"iconfont icondelete\" @click.stop=\"delGroup(row)\" />\n            </AComWithDesc>\n          </div>\n        </template>\n      </emqx-table-column>\n    </emqx-table>\n  </emqx-card>\n\n  <GroupDialog\n    v-model=\"showGroupDialog\"\n    :current-node=\"node\"\n    :group=\"currentGroup\"\n    :is-edit=\"isEditGroup\"\n    @submitted=\"getGroupList\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport type { Ref } from 'vue'\nimport { ref } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { ElLink } from 'element-plus'\nimport AComWithDesc from '@/components/AComWithDesc.vue'\nimport useGroupList from '@/composables/config/useGroupList'\nimport type { GroupData, GroupForm } from '@/types/config'\nimport GroupDialog from './components/GroupDialog.vue'\nimport { useNodePluginInfo } from '@/composables/config/usePluginInfo'\n\nconst router = useRouter()\n\nconst { nodePluginInfo, getNodePluginInfo } = useNodePluginInfo()\nawait getNodePluginInfo()\n\nconst {\n  node,\n  groupList,\n  groupCheckedList,\n  isListLoading,\n  allChecked,\n  getGroupList,\n  sortBy,\n  sortGroupListData,\n  clearGroup,\n  delGroup,\n  batchDeleteGroup,\n  isExporting,\n  downloadTemplate,\n  importTagsByGroups,\n  ExportTagsByGroups,\n  goMonitoringPage,\n} = useGroupList(nodePluginInfo.value)\n\nconst showGroupDialog = ref(false)\nconst isEditGroup = ref(false)\nconst currentGroup: Ref<GroupForm | undefined> = ref(undefined)\n\nconst addGroup = () => {\n  currentGroup.value = undefined\n  showGroupDialog.value = true\n}\n\n// view | edit group\nconst operatorGroup = ({ name, interval, group }: GroupData, isEdit?: boolean) => {\n  isEditGroup.value = !!isEdit\n  currentGroup.value = {\n    interval,\n    name,\n    node: node.value,\n    group,\n  }\n  showGroupDialog.value = true\n}\n\nconst goTagPage = ({ name }: GroupData) => {\n  router.push({\n    name: 'SouthDriverGroupTag',\n    params: { group: name },\n  })\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.driver-name {\n  margin-right: 22px;\n}\n.btn-group {\n  &:not(:last-child) {\n    margin-right: 32px;\n  }\n}\n\n.uploader-tag,\n.export-tags--btn {\n  display: inline-block;\n  margin-left: 10px;\n}\n\n.btn-download-temp-popper .el-dropdown-menu {\n  padding: 0;\n}\n.btn-download-temp {\n  font-weight: normal;\n  border: none;\n}\n\n.icon-monitoring {\n  font-size: 22px !important;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiHA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,C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C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}]}