{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/config/southDriver/components/SouthDriveItemCard.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/config/southDriver/components/SouthDriveItemCard.vue","mtime":1708521072013},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":null,"sources":["/home/ulrich/neuron-dashboard/src/views/config/southDriver/components/SouthDriveItemCard.vue"],"sourcesContent":["<template>\n  <div class=\"node-card south-drive-item-card\" @click.stop.prevent=\"goGroupPage(data)\">\n    <div class=\"node-item-hd common-flex\">\n      <p class=\"south-drive-item-name ellipsis\">{{ data.name }}</p>\n      <div class=\"setup-item-handlers\">\n        <AComWithDesc :content=\"$t('config.deviceConfig')\">\n          <i class=\"iconfont iconsetting\" @click.stop=\"goNodeConfig(props.data)\"></i>\n        </AComWithDesc>\n        <AComWithDesc :content=\"$t('config.dataStatistics')\">\n          <span @click.stop=\"isShowDataStatistics(data)\">\n            <img\n              class=\"operation-image icon-image img-statistic-log\"\n              src=\"~@/assets/images/statistics.png\"\n              alt=\"debug-log\"\n            />\n          </span>\n        </AComWithDesc>\n\n        <emqx-dropdown trigger=\"click\" @command=\"handleClickOperator\">\n          <AComWithDesc :content=\"$t('common.more')\">\n            <span class=\"el-dropdown-link\" @click.stop>\n              <i class=\"el-icon-more\" />\n            </span>\n          </AComWithDesc>\n          <template #dropdown>\n            <emqx-dropdown-menu>\n              <emqx-dropdown-item v-if=\"!isMonitorNode(data.name)\" class=\"operation-item-wrap\" command=\"edit\">\n                <i class=\"el-icon-edit-outline operation-icon\" />\n                <span>{{ $t(`common.edit`) }}</span>\n              </emqx-dropdown-item>\n              <emqx-dropdown-item class=\"operation-item-wrap\" command=\"debugLogLevel\">\n                <img class=\"operation-image\" src=\"~@/assets/images/debug-log-icon.png\" alt=\"debug-log\" />\n                <span>{{ $t(`config.updateDebugLogLevel`) }}</span>\n              </emqx-dropdown-item>\n              <emqx-dropdown-item class=\"operation-item-wrap\" command=\"delete\">\n                <i class=\"iconfont icondelete operation-icon\" />\n                <span>{{ $t(`common.delete`) }}</span>\n              </emqx-dropdown-item>\n            </emqx-dropdown-menu>\n          </template>\n        </emqx-dropdown>\n      </div>\n    </div>\n    <div>\n      <div class=\"node-item-info-row common-flex\">\n        <div class=\"common-flex\">\n          <label>{{ $t('config.workStatus') }}:</label>\n          <div>\n            <svg class=\"iconfont icon-svg\" aria-hidden=\"true\">\n              <use :xlink:href=\"`#${statusIcon}`\" />\n            </svg>\n            <span>{{ statusText }}</span>\n          </div>\n        </div>\n        <div class=\"common-flex\">\n          <emqx-switch v-model=\"nodeStartStopStatus\" @click.stop />\n        </div>\n      </div>\n      <div class=\"node-item-info-row\">\n        <label>{{ $t('config.connectionStatus') }}:</label>\n        <span>{{ connectionStatusText }}</span>\n      </div>\n      <div class=\"node-item-info-row\">\n        <label>{{ $t('config.delayTime') }}: </label>\n        <span>{{ data.rtt }} {{ $t('common.ms') }}</span>\n      </div>\n      <div class=\"node-item-info-row\">\n        <label>{{ $t('config.plugin') }}: </label>\n        <span>{{ data.plugin }}</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- Data Statistics -->\n  <DataStatisticsDrawer\n    v-if=\"dataStatisticsVisiable\"\n    v-model=\"dataStatisticsVisiable\"\n    :type=\"NodeCatogery.South\"\n    :node-name=\"data.name\"\n  ></DataStatisticsDrawer>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { PropType } from 'vue'\nimport { computed, defineEmits, defineProps } from 'vue'\nimport { useDriverStatus, useNodeStartStopStatus, dataStatistics, useDriverName } from '@/composables/config/useDriver'\nimport useSouthDriver from '@/composables/config/useSouthDriver'\nimport type { DriverItemInList } from '@/types/config'\nimport { NodeCatogery } from '@/types/enums'\nimport AComWithDesc from '@/components/AComWithDesc.vue'\nimport DataStatisticsDrawer from '../../components/dataStatisticsDrawer.vue'\n\nconst props = defineProps({\n  data: {\n    type: Object as PropType<DriverItemInList>,\n    required: true,\n  },\n})\n\nconst emit = defineEmits(['toggleStatus', 'clickOperation'])\n\nconst { goGroupPage, goNodeConfig } = useSouthDriver(false)\nconst { statusIcon, statusText, connectionStatusText } = useDriverStatus(props)\n\nconst { countNodeStartStopStatus } = useNodeStartStopStatus()\nconst { isMonitorNode } = useDriverName()\n\nconst nodeStartStopStatus = computed({\n  get() {\n    return countNodeStartStopStatus(props.data)\n  },\n  set(val) {\n    emit('toggleStatus', val)\n  },\n})\n\n// dataStatistics\nconst { isShowDataStatistics, dataStatisticsVisiable } = dataStatistics()\n\n// more operators\nconst handleClickOperator = async (command: string) => {\n  emit('clickOperation', command)\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.south-drive-item-card {\n  background-color: #f3f3ff;\n  label {\n    display: inline-block;\n  }\n}\n.operation-item-wrap {\n  display: flex;\n  align-items: center;\n}\n.operation-image {\n  margin-right: 8px;\n  position: relative;\n  left: 2px;\n  width: 18px;\n  cursor: pointer;\n}\n.operation-icon {\n  font-size: 20px;\n  color: #20466c;\n}\n.icon-image {\n  display: inline-block;\n  margin: 0 10px 0 -4px;\n  width: 24px;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA2B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxvH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5E;;;;;;;;;;;;qBATwB;AAetB;AACF;AAC4D;AAC5D;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/E;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}]}