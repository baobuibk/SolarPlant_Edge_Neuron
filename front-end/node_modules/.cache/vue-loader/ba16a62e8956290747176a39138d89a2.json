{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/overview/Index.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/overview/Index.vue","mtime":1708625507763},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":null,"sources":["/home/ulrich/neuron-dashboard/src/views/overview/Index.vue"],"sourcesContent":["<template>\n  <emqx-card class=\"overview\" v-emqx-loading=\"isLoading\">\n    <div class=\"block\">\n      <div class=\"block-hd\">\n        <h3 class=\"card-title overviewnode\">BrainIOT Gateway</h3>\n        <!-- <span class=\"sub-title\">{{ $t('config.runningTime') }}: 12</span> -->\n      </div>\n      <!-- <emqx-row class=\"charts-container\" :gutter=\"32\">\n        <emqx-col :span=\"16\">\n          <MessageChart class=\"chart\" />\n        </emqx-col>\n        <emqx-col :span=\"8\">\n          <ConfigDataCard class=\"chart\" />\n        </emqx-col>\n      </emqx-row> -->\n    </div>\n    <div class=\"block\">\n      <div class=\"block-hd common-flex\">\n        <h3 class=\"card-title\">{{ $t('config.northApp') }}</h3>\n        <div>\n          <emqx-button class=\"btn-link\" size=\"small\">\n            <router-link :to=\"{ name: 'NorthDriver' }\">{{ $t('config.viewAll') }}</router-link>\n          </emqx-button>\n          <emqx-button size=\"small\" type=\"primary\" @click=\"showNorthDialog = true\">{{\n            $t('config.addApplication')\n          }}</emqx-button>\n        </div>\n      </div>\n      <emqx-row :gutter=\"24\">\n        <emqx-col :span=\"8\" v-for=\"(item, index) in showList(northDriverList)\" :key=\"item.name\">\n          <SetupItemCard\n            :data=\"item\"\n            @deleted=\"getNorthDriverList\"\n            @updated=\"getNorthDriverList\"\n            @toggle-status=\"setNorthNodeStartStopStatus(item, $event, index)\"\n          />\n        </emqx-col>\n      </emqx-row>\n    </div>\n    <div class=\"block\">\n      <div class=\"block-hd common-flex\">\n        <h3 class=\"card-title\">{{ $t('config.southDevice') }}</h3>\n        <div>\n          <emqx-button class=\"btn-link\" size=\"small\">\n            <router-link :to=\"{ name: 'SouthDriver' }\">{{ $t('config.viewAll') }}</router-link>\n          </emqx-button>\n          <emqx-button size=\"small\" type=\"primary\" @click=\"showSouthDialog = true\">{{\n            $t('config.addDevice')\n          }}</emqx-button>\n        </div>\n      </div>\n      <emqx-row :gutter=\"24\">\n        <emqx-col :span=\"8\" v-for=\"(item, index) in showList(southDriverList)\" :key=\"item.name\">\n          <SouthDriveItemCard\n            :data=\"item\"\n            @deleted=\"getSouthDriverList\"\n            @updated=\"getSouthDriverList\"\n            @toggle-status=\"setSouthNodeStartStopStatus(item, $event, index)\"\n          />\n        </emqx-col>\n      </emqx-row>\n    </div>\n  </emqx-card>\n  <DriverDialog v-model=\"showNorthDialog\" :type=\"DriverDirection.North\" @submitted=\"getNorthDriverList\" />\n  <DriverDialog v-model=\"showSouthDialog\" :type=\"DriverDirection.South\" @submitted=\"getSouthDriverList\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { useToggleNodeStartStopStatus } from '@/composables/config/useDriver'\nimport useNorthDriver from '@/composables/config/useNorthDriver'\nimport useSouthDriver from '@/composables/config/useSouthDriver'\nimport type { DriverItemInList } from '@/types/config'\nimport { DriverDirection } from '@/types/enums'\nimport { MAX_NUM_IN_A_ROW_ON_THE_OVERVIEW } from '@/utils/constants'\nimport DriverDialog from '@/views/config/components/DriverDialog.vue'\nimport SetupItemCard from '@/views/config/northDriver/components/SetupItemCard.vue'\nimport SouthDriveItemCard from '@/views/config/southDriver/components/SouthDriveItemCard.vue'\nimport { onMounted, ref } from 'vue'\n\nconst { northDriverList, getNorthDriverList } = useNorthDriver(false, true)\nconst { southDriverList, getSouthDriverList } = useSouthDriver(false, true)\nconst isLoading = ref(false)\n\nconst showNorthDialog = ref(false)\nconst showSouthDialog = ref(false)\n\nconst { toggleNodeStartStopStatus } = useToggleNodeStartStopStatus()\nconst setNorthNodeStartStopStatus = async (node: DriverItemInList, status: boolean, nodeIndex: number) => {\n  try {\n    const ret = await toggleNodeStartStopStatus(node, status)\n    if (typeof ret === 'object') {\n      northDriverList.value.splice(nodeIndex, 1, ret)\n    } else {\n      getNorthDriverList()\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\nconst setSouthNodeStartStopStatus = async (node: DriverItemInList, status: boolean, nodeIndex: number) => {\n  try {\n    const ret = await toggleNodeStartStopStatus(node, status)\n    if (typeof ret === 'object') {\n      southDriverList.value.splice(nodeIndex, 1, ret)\n    } else {\n      getSouthDriverList()\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nconst showList = (list: Array<DriverItemInList>) => list.slice(0, MAX_NUM_IN_A_ROW_ON_THE_OVERVIEW)\n\nonMounted(async () => {\n  isLoading.value = true\n  await Promise.all([getSouthDriverList(), getNorthDriverList()])\n  isLoading.value = false\n})\n</script>\n\n<style lang=\"scss\">\n.overview {\n  .block {\n    margin-bottom: 32px;\n  }\n\n  .block-hd {\n    margin-bottom: 16px;\n    .card-title {\n      display: inline-block;\n      margin-bottom: 0;\n      margin-right: 24px;\n      font-size: 20px;\n    }\n    .sub-title {\n      position: relative;\n      padding-left: 10px;\n      color: #343741;\n      &::before {\n        content: '';\n        position: absolute;\n        top: 50%;\n        left: 0;\n        transform: translateY(-50%);\n        display: block;\n        width: 1px;\n        height: 14px;\n        background-color: #343741;\n      }\n    }\n    .overviewnode{\n      font-size: 24px;\n      font-weight: bold;\n      color: #1e8e14;\n    }\n  }\n\n  .btn-link {\n    padding: 0;\n    a {\n      display: block;\n      height: 100%;\n      line-height: 32px;\n      padding-left: 15px;\n      padding-right: 15px;\n      text-decoration: none;\n      color: inherit;\n      height: 100%;\n    }\n  }\n\n  .charts-container {\n    min-height: 230px;\n    .chart {\n      height: 100%;\n    }\n  }\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAohE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnpC;;;;AAXwB;AAYxlC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACplC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxlC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxnG;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}]}