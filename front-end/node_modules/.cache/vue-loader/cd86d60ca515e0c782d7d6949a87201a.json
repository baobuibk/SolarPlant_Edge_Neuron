{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/config/southDriver/Index.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/config/southDriver/Index.vue","mtime":1708521072013},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":null,"sources":["/home/ulrich/neuron-dashboard/src/views/config/southDriver/Index.vue"],"sourcesContent":["<template>\n  <emqx-card v-emqx-loading=\"isListLoading\">\n    <ViewHeaderBar>\n      <template v-slot:left>\n        <emqx-button type=\"primary\" size=\"small\" icon=\"iconfont iconcreate\" class=\"header-item btn\" @click=\"addConfig\">\n          {{ $t('config.addDevice') }}\n        </emqx-button>\n      </template>\n      <template v-slot:right>\n        <PluginListSelector\n          v-model=\"queryKeyword.plugin\"\n          :type=\"DriverDirection.South\"\n          :size=\"'medium'\"\n          class=\"header-item\"\n          @change=\"dbGetSouthDriverList\"\n        />\n        <KeywordSerachInput\n          v-model=\"queryKeyword.node\"\n          class=\"header-item\"\n          @input=\"dbGetSouthDriverList\"\n          @clear=\"dbGetSouthDriverList\"\n          @enter=\"dbGetSouthDriverList\"\n        />\n        <ListCardSwitch v-model=\"showType\" @change=\"changeListShowMode\" />\n      </template>\n    </ViewHeaderBar>\n\n    <emqx-empty v-if=\"!isListLoading && southDriverList.length === 0 && !isSwitchListLoading\" class=\"empty\" />\n    <div v-else>\n      <!-- card show -->\n      <ul v-if=\"showType === 'card'\" class=\"setup-list\">\n        <emqx-row :gutter=\"24\">\n          <emqx-col :span=\"8\" v-for=\"(item, index) in southDriverList\" :key=\"item.name\" tag=\"li\" class=\"setup-item\">\n            <SouthDriveItemCard\n              :data=\"item\"\n              @toggle-status=\"setNodeStartStopStatus(item, $event, index)\"\n              @clickOperation=\"handleClickOperator($event, item)\"\n            />\n          </emqx-col>\n        </emqx-row>\n      </ul>\n\n      <!-- table show -->\n      <emqx-table\n        v-if=\"showType === 'list'\"\n        :data=\"southDriverList\"\n        :empty-text=\"$t('common.emptyData')\"\n        :row-class-name=\"'table-row-click'\"\n        :default-sort=\"{ prop: sortBy.prop, order: `${sortBy.order}ending` }\"\n        @sort-change=\"sortDataByKey\"\n        @row-click=\"goGroupPage\"\n      >\n        <emqx-table-column :label=\"$t('common.name')\" prop=\"name\" sortable=\"custom\" show-overflow-tooltip>\n          <template #default=\"{ row }\">\n            <el-link type=\"primary\" :underline=\"false\" href=\"javascript:;\" @click=\"goGroupPage(row)\">\n              {{ row.name }}\n            </el-link>\n          </template>\n        </emqx-table-column>\n        <!--  workStatus-->\n        <emqx-table-column :label=\"$t('config.workStatus')\" prop=\"statusText\" sortable=\"custom\">\n          <template #default=\"{ row }\">\n            <svg class=\"iconfont icon-svg\" aria-hidden=\"true\">\n              <use :xlink:href=\"`#${getNodeValue(row).statusIcon.value}`\" />\n            </svg>\n            {{ getNodeValue(row).statusText.value }}\n          </template>\n        </emqx-table-column>\n        <!-- connectionStatus -->\n        <emqx-table-column\n          :label=\"$t('config.connectionStatus')\"\n          prop=\"connectionStatusText\"\n          sortable=\"custom\"\n          min-width=\"90\"\n        >\n          <template #default=\"{ row }\">\n            {{ getNodeValue(row).connectionStatusText.value }}\n          </template>\n        </emqx-table-column>\n        <emqx-table-column :label=\"$t('config.delayTime')\">\n          <template #default=\"{ row }\"> {{ row.rtt }} {{ $t('common.ms') }} </template>\n        </emqx-table-column>\n        <emqx-table-column :label=\"$t('config.plugin')\" prop=\"plugin\" sortable=\"custom\" />\n        <emqx-table-column align=\"left\" :label=\"$t('common.oper')\" width=\"180px\">\n          <template #default=\"{ row, index }\">\n            <div class=\"operator-wrap\">\n              <AComWithDesc :content=\"countNodeStartStopStatus(row) ? $t('common.stop') : $t('common.start')\">\n                <i\n                  :class=\"countNodeStartStopStatus(row) ? 'el-icon-video-pause' : 'el-icon-video-play'\"\n                  @click.stop=\"setNodeStartStopStatus(row, !countNodeStartStopStatus(row), index)\"\n                />\n              </AComWithDesc>\n              <AComWithDesc :content=\"$t('config.deviceConfig')\">\n                <i class=\"iconfont iconsetting\" @click.stop=\"goNodeConfig(row)\" />\n              </AComWithDesc>\n              <AComWithDesc :content=\"$t('config.dataStatistics')\">\n                <span @click.stop=\"handleClickOperator('dataStatistics', row)\">\n                  <img\n                    class=\"operation-image icon-image img-statistic-log\"\n                    src=\"~@/assets/images/statistics.png\"\n                    alt=\"debug-log\"\n                  />\n                </span>\n              </AComWithDesc>\n\n              <emqx-dropdown trigger=\"click\" @command=\"handleClickOperator($event, row)\">\n                <AComWithDesc :content=\"$t('common.more')\">\n                  <span class=\"el-dropdown-link\" @click.stop>\n                    <i class=\"el-icon-more\" />\n                  </span>\n                </AComWithDesc>\n                <template #dropdown>\n                  <emqx-dropdown-menu>\n                    <emqx-dropdown-item v-if=\"!isMonitorNode(row.name)\" class=\"operation-item-wrap\" command=\"edit\">\n                      <i class=\"el-icon-edit-outline operation-icon\" />\n                      <span>{{ $t(`common.edit`) }}</span>\n                    </emqx-dropdown-item>\n                    <emqx-dropdown-item class=\"operation-item-wrap\" command=\"debugLogLevel\">\n                      <img\n                        class=\"operation-image img-debug-log\"\n                        src=\"~@/assets/images/debug-log-icon.png\"\n                        alt=\"debug-log\"\n                      />\n                      <span>{{ $t(`config.updateDebugLogLevel`) }}</span>\n                    </emqx-dropdown-item>\n                    <emqx-dropdown-item class=\"operation-item-wrap\" command=\"delete\">\n                      <i class=\"iconfont icondelete operation-icon\" />\n                      <span>{{ $t(`common.delete`) }}</span>\n                    </emqx-dropdown-item>\n                  </emqx-dropdown-menu>\n                </template>\n              </emqx-dropdown>\n            </div>\n          </template>\n        </emqx-table-column>\n      </emqx-table>\n      <emqx-pagination\n        v-if=\"pageController.total > 30\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        v-model:current-page=\"pageController.pageNum\"\n        :page-sizes=\"[30, 60, 90]\"\n        :total=\"pageController.total\"\n        :page-size=\"pageController.pageSize\"\n        class=\"pagination\"\n        @current-change=\"getAPageTagData\"\n        @size-change=\"handleSizeChange\"\n      />\n    </div>\n  </emqx-card>\n\n  <!-- Data Statistics -->\n  <DataStatisticsDrawer\n    v-if=\"dataStatisticsVisiable\"\n    v-model=\"dataStatisticsVisiable\"\n    :type=\"NodeCatogery.South\"\n    :node-name=\"nodeItemData.name\"\n  />\n\n  <DriverDialog\n    v-model=\"showDialog\"\n    :type=\"DriverDirection.South\"\n    :is-dual-mode=\"true\"\n    @submitted=\"getSouthDriverList\"\n  />\n\n  <EditNodeNameDialog\n    v-model=\"showEditDialog\"\n    :type=\"DriverDirection.South\"\n    :node-name=\"editDriverData.name\"\n    :node=\"editDriverData\"\n    @updated=\"reloadDriverList\"\n  />\n\n  <!-- check license -->\n  <LicenseTipDialog\n    v-model=\"licenseTipVisible\"\n    :isHasLicense=\"isHasLicense\"\n    :isLicenseInvalid=\"isLicenseInvalid\"\n    :isLicenseExpiry=\"isLicenseExpiry\"\n    :isLicenseReadyExpiry=\"isLicenseReadyExpiry\"\n    :isHardwareMismatch=\"isHardwareMismatch\"\n    :isOverMaximumNodes=\"isOverMaximumNodes\"\n    :isOverMaximumTags=\"isOverMaximumTags\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport store from '@/store'\nimport { ElLink } from 'element-plus'\nimport {\n  useToggleNodeStartStopStatus,\n  useDriverStatus,\n  useNodeStartStopStatus,\n  dataStatistics,\n  useListShowType,\n  useDriverName,\n} from '@/composables/config/useDriver'\nimport useSouthDriver from '@/composables/config/useSouthDriver'\nimport type { DriverItemInList } from '@/types/config'\nimport { DriverDirection, NodeCatogery } from '@/types/enums'\nimport DriverDialog from '@/views/config/components/DriverDialog.vue'\nimport EditNodeNameDialog from '@/views/config/components/EditNodeNameDialog.vue'\nimport SouthDriveItemCard from './components/SouthDriveItemCard.vue'\nimport ViewHeaderBar from '@/components/ViewHeaderBar.vue'\nimport KeywordSerachInput from '@/components/KeywordSearchInput.vue'\nimport PluginListSelector from '../components/PluginListSelector.vue'\nimport ListCardSwitch from '@/components/ListCardSwitch.vue'\nimport AComWithDesc from '@/components/AComWithDesc.vue'\nimport DataStatisticsDrawer from '../components/dataStatisticsDrawer.vue'\nimport { isTheSameParentRoute } from '@/utils/utils'\nimport useCheckLicense from '@/composables/useCheckLicense'\nimport LicenseTipDialog from '@/components/LicenseTipDialog.vue'\nimport Cookies from 'js-cookie'\n\nexport default defineComponent({\n  beforeRouteEnter(to, from, next) {\n    const isSameParentRoute = isTheSameParentRoute(from, to)\n    if (!isSameParentRoute) {\n      const paginationData = { pageNum: 1, pageSize: 30, total: 0 }\n      store.commit('SET_PAGINATION', paginationData)\n      store.commit('SET_LIST_SHOW_TYPE', 'list')\n    }\n    next()\n  },\n})\n</script>\n\n<script lang=\"ts\" setup>\nconst {\n  queryKeyword,\n  pageController,\n  getAPageTagData,\n  handleSizeChange,\n  southDriverList,\n  isListLoading,\n  getSouthDriverList,\n  dbGetSouthDriverList,\n  reloadDriverList,\n\n  goGroupPage,\n  goNodeConfig,\n  deleteDriver,\n  modifyNodeLogLevel,\n\n  sortBy,\n  sortDataByKey,\n  isSwitchListLoading,\n  changeListShowMode,\n\n  addConfig,\n  showDialog,\n  editDialog,\n  showEditDialog,\n  editDriverData,\n} = useSouthDriver(true, true)\n\nconst { isShowDataStatistics, dataStatisticsVisiable, nodeItemData } = dataStatistics()\n\nconst { showType } = useListShowType()\n\nconst { toggleNodeStartStopStatus } = useToggleNodeStartStopStatus()\nconst { countNodeStartStopStatus } = useNodeStartStopStatus()\n\nconst setNodeStartStopStatus = async (node: DriverItemInList, status: boolean, nodeIndex: number) => {\n  try {\n    const ret = await toggleNodeStartStopStatus(node, status)\n    if (typeof ret === 'object') {\n      southDriverList.value.splice(nodeIndex, 1, ret)\n    } else {\n      getSouthDriverList()\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nconst getNodeValue = (node: DriverItemInList) => {\n  const useDriverStatusSet = useDriverStatus({ data: node })\n  return useDriverStatusSet\n}\n\nconst { isMonitorNode } = useDriverName()\n\nconst handleClickOperator = async (command: string, row: DriverItemInList) => {\n  const apiMap = new Map([\n    ['edit', editDialog],\n    ['dataStatistics', isShowDataStatistics],\n    ['debugLogLevel', modifyNodeLogLevel],\n    ['delete', deleteDriver],\n  ])\n  const apiFunc = apiMap.get(command)\n  if (apiFunc && typeof apiFunc === 'function') {\n    apiFunc(row)\n  }\n}\n\nconst {\n  checkLicense,\n  licenseTipVisible,\n  isHasLicense,\n  isTrialLicense,\n  isLicenseExpiry,\n  isLicenseReadyExpiry,\n  isLicenseInvalid,\n  isHardwareMismatch,\n  isOverMaximumNodes,\n  isOverMaximumTags,\n} = useCheckLicense()\n\nconst isShowLicenseTip = Cookies.get('licenseTipVisible')\nif (isShowLicenseTip !== 'false') {\n  checkLicense()\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.setup-list {\n  list-style: none;\n  margin-top: 6px;\n  .setup-item {\n    margin-bottom: 24px;\n  }\n}\n.operation-item-wrap {\n  display: flex;\n  align-items: center;\n}\n.operation-icon {\n  font-size: 24px;\n  color: #20466c;\n}\n.operation-image {\n  margin-right: 8px;\n  position: relative;\n  left: 2px;\n  width: 22px;\n  cursor: pointer;\n}\n.icon-image {\n  display: inline-block;\n  margin: 0 10px 0 -6px;\n  width: 24px;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0LkB;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACppE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACphE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B;AACA,oBAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAA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,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}]}