{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/config/template/Index.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/config/template/Index.vue","mtime":1708521072013},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":null,"sources":["/home/ulrich/neuron-dashboard/src/views/config/template/Index.vue"],"sourcesContent":["<template>\n  <emqx-card v-emqx-loading=\"isListLoading\">\n    <ViewHeaderBar class=\"tempalte-remark\">\n      <template v-slot:left>\n        <span class=\"header-item\">{{ $t('template.templateRemark') }}</span>\n      </template>\n      <template v-slot:right>\n        <!-- TODO: support when template usage document is ready-->\n        <!-- <el-link type=\"primary\" :underline=\"false\" href=\"javascript:;\" class=\"header-item\">\n          <i class=\"el-icon-document\"></i>\n          {{ $t('template.templateLink') }}\n        </el-link> -->\n      </template>\n    </ViewHeaderBar>\n\n    <ViewHeaderBar>\n      <template v-slot:left>\n        <emqx-button\n          type=\"primary\"\n          size=\"small\"\n          icon=\"iconfont iconcreate\"\n          class=\"header-item btn\"\n          @click=\"showTemplateDialog\"\n        >\n          {{ $t('template.addTemplate') }}\n        </emqx-button>\n      </template>\n      <template v-slot:right>\n        <emqx-dropdown :hide-timeout=\"512\" popper-class=\"btn-download-temp-popper\">\n          <emqx-upload\n            action=\"\"\n            :before-upload=\"importFile\"\n            :show-file-list=\"false\"\n            :accept=\"'application/json'\"\n            class=\"uploader\"\n          >\n            <emqx-button size=\"small\" class=\"header-item btn\">\n              <i class=\"iconfont icon-import icondownload\"></i>\n              <span>{{ $t('template.importTemplate') }}</span>\n            </emqx-button>\n          </emqx-upload>\n        </emqx-dropdown>\n      </template>\n    </ViewHeaderBar>\n\n    <emqx-empty v-if=\"!isListLoading && templateList.length === 0\" class=\"empty\" />\n    <emqx-table\n      v-else\n      :data=\"templateList\"\n      :empty-text=\"$t('common.emptyData')\"\n      :row-class-name=\"'table-row-click'\"\n      @row-click=\"goGroupPage\"\n    >\n      <emqx-table-column :label=\"$t('common.name')\" prop=\"name\" show-overflow-tooltip>\n        <template #default=\"{ row }\">\n          <el-link type=\"primary\" :underline=\"false\" href=\"javascript:;\" @click=\"goGroupPage(row)\">\n            {{ row.name }}\n          </el-link>\n        </template>\n      </emqx-table-column>\n      <emqx-table-column :label=\"$t('config.plugin')\" prop=\"plugin\" />\n      <emqx-table-column align=\"left\" :label=\"$t('common.oper')\" width=\"220px\">\n        <template #default=\"{ row }\">\n          <div class=\"operator-wrap\">\n            <!-- TODO -->\n            <!-- <AComWithDesc :content=\"$t('common.edit')\">\n              <i class=\"el-icon-edit-outline\" @click.stop=\"editTemplate(row)\" />\n            </AComWithDesc> -->\n            <AComWithDesc :content=\"$t('common.export')\">\n              <i class=\"iconfont icon-import iconsubmit\" @click.stop=\"exportTemplate(row)\" />\n            </AComWithDesc>\n            <AComWithDesc :content=\"$t('common.delete')\">\n              <i class=\"iconfont icondelete\" @click.stop=\"removeTemplate(row)\" />\n            </AComWithDesc>\n          </div>\n        </template>\n      </emqx-table-column>\n    </emqx-table>\n  </emqx-card>\n\n  <!-- add | edit | import -->\n  <TemplateDialog\n    v-model=\"templateDialogVisible\"\n    :isEdit=\"isEditTemplate\"\n    :isImport=\"isImportTemplate\"\n    :templateData=\"editTemplateData\"\n    @submitted=\"getTemplateList\"\n    @cancel=\"cancelOperateTemplate\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport { ElLink } from 'element-plus'\nimport AComWithDesc from '@/components/AComWithDesc.vue'\nimport ViewHeaderBar from '@/components/ViewHeaderBar.vue'\nimport useTemplateList from '@/composables/config/useTemplateList'\nimport TemplateDialog from './components/TemplateDialog.vue'\n\nconst {\n  templateList,\n  isListLoading,\n  getTemplateList,\n  templateDialogVisible,\n  showTemplateDialog,\n  goGroupPage,\n  exportTemplate,\n  removeTemplate,\n  importFile,\n  isImportTemplate,\n  editTemplateData,\n  isEditTemplate,\n  cancelOperateTemplate,\n} = useTemplateList()\n</script>\n\n<style lang=\"scss\" scoped>\n.tempalte-remark {\n  margin-bottom: 4px;\n  color: var(--main-label-color);\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;AA4FA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxlE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D;;;;AANwB;AAOxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}]}