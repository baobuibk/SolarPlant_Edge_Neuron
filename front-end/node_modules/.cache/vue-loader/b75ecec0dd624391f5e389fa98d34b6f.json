{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/config/northDriver/components/SetupItemCard.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/config/northDriver/components/SetupItemCard.vue","mtime":1708521072013},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":null,"sources":["/home/ulrich/neuron-dashboard/src/views/config/northDriver/components/SetupItemCard.vue"],"sourcesContent":["<template>\n  <div\n    class=\"node-card setup-item-card\"\n    :class=\"{ 'row-disabled': isMonitorNode(data.name) }\"\n    @click=\"goGroupPage(data)\"\n  >\n    <div class=\"node-item-hd common-flex\">\n      <p class=\"setup-item-name ellipsis\">{{ data.name }}</p>\n      <div class=\"setup-item-handlers\">\n        <AComWithDesc :content=\"$t('config.appConfig')\">\n          <i class=\"iconfont iconsetting\" @click.stop=\"goNodeConfig(data)\"></i>\n        </AComWithDesc>\n        <AComWithDesc :content=\"$t('config.dataStatistics')\">\n          <span @click.stop=\"isShowDataStatistics(data)\">\n            <img\n              class=\"operation-image icon-image img-statistic-log\"\n              src=\"~@/assets/images/statistics.png\"\n              alt=\"debug-log\"\n            />\n          </span>\n        </AComWithDesc>\n\n        <!-- monitor driver does not support deletion and editing -->\n        <AComWithDesc v-if=\"isMonitorNode(data.name)\" :content=\"$t('config.updateDebugLogLevel')\">\n          <img\n            class=\"img-debug-log-large\"\n            src=\"~@/assets/images/debug-log-icon.png\"\n            alt=\"debug-log\"\n            @click.stop=\"handleClickOperator('debugLogLevel')\"\n          />\n        </AComWithDesc>\n        <emqx-dropdown v-else trigger=\"click\" @command=\"handleClickOperator\">\n          <AComWithDesc :content=\"$t('common.more')\">\n            <span class=\"el-dropdown-link\" @click.stop>\n              <i class=\"el-icon-more\" />\n            </span>\n          </AComWithDesc>\n          <template #dropdown>\n            <emqx-dropdown-menu>\n              <emqx-dropdown-item v-if=\"!isMonitorNode(data.name)\" class=\"operation-item-wrap\" command=\"edit\">\n                <i class=\"el-icon-edit-outline operation-icon\" />\n                <span>{{ $t(`common.edit`) }}</span>\n              </emqx-dropdown-item>\n              <emqx-dropdown-item class=\"operation-item-wrap\" command=\"debugLogLevel\">\n                <img class=\"operation-image\" src=\"~@/assets/images/debug-log-icon.png\" alt=\"debug-log\" />\n                <span>{{ $t(`config.updateDebugLogLevel`) }}</span>\n              </emqx-dropdown-item>\n              <emqx-dropdown-item\n                v-if=\"!isNotSupportRemoveNode(data.name)\"\n                class=\"operation-item-wrap\"\n                command=\"delete\"\n                :disabled=\"data.pluginKind === PluginKind.Static\"\n              >\n                <i class=\"iconfont icondelete operation-icon\" />\n                <span>{{ $t(`common.delete`) }}</span>\n              </emqx-dropdown-item>\n            </emqx-dropdown-menu>\n          </template>\n        </emqx-dropdown>\n      </div>\n    </div>\n\n    <div class=\"node-item-info-row common-flex\">\n      <div class=\"common-flex\">\n        <label>{{ $t('config.workStatus') }}</label>\n        <div>\n          <svg class=\"iconfont icon-svg\" aria-hidden=\"true\">\n            <use :xlink:href=\"`#${statusIcon}`\" />\n          </svg>\n          <span>{{ statusText }}</span>\n        </div>\n      </div>\n      <div class=\"common-flex\">\n        <emqx-switch v-model=\"nodeStartStopStatus\" @click.stop />\n      </div>\n    </div>\n    <div class=\"node-item-info-row\">\n      <label>{{ $t('config.connectionStatus') }}</label>\n      <span>{{ connectionStatusText }}</span>\n    </div>\n    <div class=\"node-item-info-row\">\n      <label>{{ $t('config.plugin') }}: </label>\n      <span>{{ data.plugin }}</span>\n    </div>\n  </div>\n\n  <!-- Data Statistics -->\n  <DataStatisticsDrawer\n    v-if=\"dataStatisticsVisiable\"\n    v-model=\"dataStatisticsVisiable\"\n    :type=\"NodeCatogery.North\"\n    :node-name=\"data.name\"\n  ></DataStatisticsDrawer>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, defineEmits, defineProps } from 'vue'\nimport type { PropType } from 'vue'\nimport { useDriverStatus, useNodeStartStopStatus, dataStatistics, useDriverName } from '@/composables/config/useDriver'\nimport useNorthDriver from '@/composables/config/useNorthDriver'\nimport { PluginKind, NodeCatogery } from '@/types/enums'\nimport type { DriverItemInList } from '@/types/config'\nimport AComWithDesc from '@/components/AComWithDesc.vue'\nimport DataStatisticsDrawer from '../../components/dataStatisticsDrawer.vue'\n\nconst emit = defineEmits(['toggleStatus', 'clickOperation'])\n\nconst props = defineProps({\n  data: { type: Object as PropType<DriverItemInList>, required: true },\n})\n\nconst { goNodeConfig, goGroupPage } = useNorthDriver(false)\nconst { statusIcon, statusText, connectionStatusText } = useDriverStatus(props)\n\nconst { countNodeStartStopStatus } = useNodeStartStopStatus()\n\nconst nodeStartStopStatus = computed({\n  get() {\n    return countNodeStartStopStatus(props.data)\n  },\n  set(val) {\n    emit('toggleStatus', val)\n  },\n})\n\n// dataStatistics\nconst { isShowDataStatistics, dataStatisticsVisiable } = dataStatistics()\n\n// more operators\nconst handleClickOperator = async (command: string) => {\n  emit('clickOperation', command)\n}\n\nconst { isNotSupportRemoveNode, isMonitorNode } = useDriverName()\n</script>\n\n<style lang=\"scss\" scoped>\n@import '~@/styles/mixins.scss';\n\n.setup-item-card {\n  background-color: #f4f9fc;\n}\n.setup-item-handlers {\n  @include display-flex();\n}\n.img-debug-log-large {\n  cursor: pointer;\n  width: 18px;\n}\n\n.operation-item-wrap {\n  display: flex;\n  align-items: center;\n}\n.operation-icon {\n  font-size: 20px;\n  color: #20466c;\n}\n.operation-image {\n  margin-right: 8px;\n  position: relative;\n  left: 2px;\n  width: 18px;\n  cursor: pointer;\n}\n.icon-image {\n  display: inline-block;\n  margin: 0 10px 0 -4px;\n  width: 24px;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgGA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA2B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnvH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5E;;;;;;;;;qBATwB;AAUoC;AAC5D;AAGE;AACF;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/E;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}]}