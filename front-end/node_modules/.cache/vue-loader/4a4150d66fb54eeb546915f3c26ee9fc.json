{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/config/southDriver/components/TagListForm.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/config/southDriver/components/TagListForm.vue","mtime":1708521072013},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":null,"sources":["/home/ulrich/neuron-dashboard/src/views/config/southDriver/components/TagListForm.vue"],"sourcesContent":["<template>\n  <el-form ref=\"formCom\" :model=\"formData\" @submit.prevent>\n    <el-table :data=\"formData.tagList\" :empty-text=\"$t('common.emptyData')\" :header-row-class-name=\"'thead-row'\">\n      <el-table-column width=\"120\" fixed>\n        <template #header>\n          <span class=\"thead-title\">{{ $t('common.name') }}</span>\n        </template>\n        <template #default=\"{ row, $index }\">\n          <el-form-item :prop=\"`tagList.${$index}.name`\" :rules=\"rules.name\" required>\n            <emqx-input v-model.trim=\"row.name\" :disabled=\"edit\" />\n          </el-form-item>\n        </template>\n      </el-table-column>\n\n      <el-table-column width=\"180\">\n        <template #header>\n          <span class=\"thead-title\">{{ $t('common.attribute') }}</span>\n          <AComWithDesc :content=\"$t('config.staticNotSupportBytes')\">\n            <i class=\"el-icon-info icon-label\" />\n          </AComWithDesc>\n        </template>\n        <template #default=\"{ row, $index }\">\n          <el-form-item :prop=\"`tagList.${$index}.attribute`\" :rules=\"rules.attribute\" required>\n            <TagAttributeSelect v-model=\"row.attribute\" :collapseTags=\"true\" @change=\"changeAttribute(row, $index)\" />\n          </el-form-item>\n        </template>\n      </el-table-column>\n\n      <el-table-column width=\"130\">\n        <template #header>\n          <span class=\"thead-title\">{{ $t('common.type') }}</span>\n        </template>\n        <template #default=\"{ row, $index }\">\n          <el-form-item :prop=\"`tagList.${$index}.type`\" :rules=\"rules.type\" required>\n            <emqx-select v-model=\"row.type\" :placeholder=\"$t('common.pleaseSelect')\" @change=\"changeType(row, $index)\">\n              <emqx-option\n                v-for=\"item in tagTypeOptListAfterFilter\"\n                :key=\"item.value\"\n                :value=\"item.value\"\n                :label=\"item.label\"\n                :disabled=\"item.value === TagType.BYTES && isAttrsIncludeStatic(row.attribute)\"\n              />\n            </emqx-select>\n          </el-form-item>\n        </template>\n      </el-table-column>\n\n      <el-table-column width=\"130\">\n        <template #header>\n          <span class=\"thead-title\">{{ $t('config.address') }}</span>\n        </template>\n        <template #default=\"{ row, $index }\">\n          <el-form-item\n            v-if=\"isAttrsIncludeStatic(row.attribute)\"\n            :prop=\"`tagList.${$index}.address`\"\n            :rules=\"[{ required: false }, rules.address]\"\n          >\n            <emqx-input v-model=\"row.address\" />\n          </el-form-item>\n          <el-form-item\n            v-else\n            :prop=\"`tagList.${$index}.address`\"\n            :rules=\"[{ required: true, message: $t('config.tagAddressRequired') }, ...rules.address]\"\n          >\n            <emqx-input v-model=\"row.address\" />\n          </el-form-item>\n        </template>\n      </el-table-column>\n\n      <!-- value -->\n      <el-table-column width=\"110\" :rules=\"rules.value\">\n        <template #header>\n          <span class=\"thead-title\">{{ $t('config.tagValue') }}</span>\n        </template>\n        <template #default=\"{ row, $index }\">\n          <el-form-item\n            :prop=\"`tagList.${$index}.value`\"\n            :rules=\"[\n              ...rules.value,\n              {\n                required: isAttrsIncludeStatic(row.attribute),\n                message: $t('config.tagValueRequired'),\n              },\n            ]\"\n          >\n            <emqx-input v-if=\"isAttrsIncludeStatic(row.attribute)\" v-model.trim=\"row.value\" />\n            <span v-else>-</span>\n          </el-form-item>\n        </template>\n      </el-table-column>\n\n      <el-table-column :label=\"$t('config.desc')\" width=\"120\">\n        <template #default=\"{ row, $index }\">\n          <el-form-item :prop=\"`tagList.${$index}.description`\">\n            <emqx-input v-model=\"row.description\" type=\"text\" />\n          </el-form-item>\n        </template>\n      </el-table-column>\n\n      <el-table-column :label=\"$t('config.decimal')\" width=\"110\">\n        <template #default=\"{ row, $index }\">\n          <el-form-item :prop=\"`tagList.${$index}.decimal`\">\n            <!-- @blur=\"changeDecimal($index)\" -->\n            <emqx-input-number\n              v-if=\"!isAttrsIncludeStatic(row.attribute)\"\n              v-model=\"row.decimal\"\n              :step=\"0.1\"\n              controls-position=\"right\"\n            />\n            <span v-else>-</span>\n          </el-form-item>\n        </template>\n      </el-table-column>\n\n      <el-table-column :label=\"$t('config.precision')\" width=\"110\">\n        <template #default=\"{ row, $index }\">\n          <el-form-item :prop=\"`tagList.${$index}.precision`\">\n            <emqx-input-number\n              v-if=\"isShowPrecisionField(row.type) && !isAttrsIncludeStatic(row.attribute)\"\n              v-model=\"row.precision\"\n              :min=\"0\"\n              :max=\"17\"\n              controls-position=\"right\"\n            />\n            <span v-else>-</span>\n          </el-form-item>\n        </template>\n      </el-table-column>\n\n      <el-table-column :label=\"$t('common.oper')\" fixed=\"right\" min-width=\"80\">\n        <template #default=\"{ $index }\">\n          <emqx-button\n            type=\"danger\"\n            size=\"mini\"\n            :disabled=\"$index === 0 && formData.tagList.length === 1\"\n            @click=\"deleteItem($index)\"\n          >\n            {{ $t('common.delete') }}\n          </emqx-button>\n        </template>\n      </el-table-column>\n    </el-table>\n  </el-form>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { PropType, WritableComputedRef } from 'vue'\nimport { defineExpose, computed, defineProps, defineEmits, nextTick } from 'vue'\nimport { ElTable, ElForm, ElFormItem, ElTableColumn } from 'element-plus'\nimport { useTagPrecision } from '@/composables/config/useAddTagCommon'\nimport TagAttributeSelect from './TagAttributeSelect.vue'\nimport type { PluginInfo, AddTagListForm, TagFormItem } from '@/types/config'\nimport useTagForm from '@/composables/config/useTagForm'\nimport { TagType } from '@/types/enums'\nimport AComWithDesc from '@/components/AComWithDesc.vue'\n\nconst props = defineProps({\n  data: {\n    type: Object as PropType<AddTagListForm>,\n    required: true,\n  },\n  // useTagForm(props): need nodePluginInfo\n  nodePluginInfo: {\n    type: Object as PropType<PluginInfo>,\n  },\n  edit: {\n    type: Boolean,\n    default: false,\n  },\n})\nconst emit = defineEmits(['update:modelValue', 'deleteTagItem'])\n\nconst { formCom, isAttrsIncludeStatic, tagTypeOptListAfterFilter, rules, validate, resetFields } = useTagForm(props)\nconst { isShowPrecisionField } = useTagPrecision()\n\nconst formData: WritableComputedRef<AddTagListForm> = computed({\n  get() {\n    return props.data\n  },\n  set(val) {\n    emit('update:modelValue', val)\n  },\n})\n\nconst isBYTESType = computed(() => (index: number) => formData.value.tagList[index].type === TagType.BYTES)\n\nconst changeAttribute = (row: TagFormItem, $index: number) => {\n  const isStaticAttr = isAttrsIncludeStatic.value(row.attribute)\n\n  if (!isStaticAttr) {\n    formData.value.tagList[$index].value = undefined\n  } else {\n    formData.value.tagList[$index].precision = undefined\n    formData.value.tagList[$index].decimal = null\n    if (isBYTESType.value($index)) {\n      formData.value.tagList[$index].type = null\n    }\n  }\n\n  // validate  'address'\n  nextTick(() => {\n    formCom.value.validateField(`tagList.${$index}.address`)\n  })\n}\n\n// validate address when change tag type\nconst changeType = (row: TagFormItem, $index: number) => {\n  const validateFields = [`tagList.${$index}.address`]\n  if (formData.value.tagList[$index].value) {\n    validateFields.push(`tagList.${$index}.value`)\n  }\n  formCom.value.validateField(validateFields)\n}\n\n// used when 'vaule' is related width decimal\n// const changeDecimal = ($index: number) => {\n//   formCom.value.validateField(`tagList.${$index}.value`)\n// }\n\nconst deleteItem = (index: number) => {\n  emit('deleteTagItem', index)\n}\n\ndefineExpose({\n  validate,\n  resetFields,\n})\n</script>\n\n<style lang=\"scss\" scoped>\n:deep {\n  .el-table .el-form-item {\n    margin-bottom: 0;\n  }\n  .thead-row > th {\n    background-color: var(--color-header-bg);\n  }\n}\n\n.thead-title {\n  &::before {\n    content: '*';\n    color: #f56c6c;\n    padding-right: 2px;\n  }\n}\n.icon-label {\n  padding-left: 4px;\n  color: #999;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAkJA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA2B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,C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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC;AACJ;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC;AACD;AACA,MAAY,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}]}