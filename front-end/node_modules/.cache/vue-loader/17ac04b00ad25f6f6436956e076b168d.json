{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/about/About.vue?vue&type=script&setup=true&lang=ts","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/about/About.vue","mtime":1708619762803},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1705331057587},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgdXNlQ3NzVmFycyBhcyBfdXNlQ3NzVmFycywgZGVmaW5lQ29tcG9uZW50IGFzIF9kZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnCmltcG9ydCB7IHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUsIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIHdpdGhDdHggYXMgX3dpdGhDdHgsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgdW5yZWYgYXMgX3VucmVmLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2ssIHB1c2hTY29wZUlkIGFzIF9wdXNoU2NvcGVJZCwgcG9wU2NvcGVJZCBhcyBfcG9wU2NvcGVJZCB9IGZyb20gInZ1ZSIKCmNvbnN0IF93aXRoU2NvcGVJZCA9IG4gPT4gKF9wdXNoU2NvcGVJZCgiZGF0YS12LWMwMDZjODEyIiksbj1uKCksX3BvcFNjb3BlSWQoKSxuKQpjb25zdCBfaG9pc3RlZF8xID0geyBjbGFzczogImNhcmQtaGQtd2l0aC1idG4iIH0KY29uc3QgX2hvaXN0ZWRfMiA9IHsgY2xhc3M6ICJjYXJkLXRpdGxlIiB9CmNvbnN0IF9ob2lzdGVkXzMgPSB7IGNsYXNzOiAicHJvZ3Jlc3MtdGV4dCIgfQoKaW1wb3J0IHsgcmVmLCByZWFjdGl2ZSwgY29tcHV0ZWQsIG9uVW5tb3VudGVkIH0gZnJvbSAndnVlJwppbXBvcnQgeyBFbFByb2dyZXNzIH0gZnJvbSAnZWxlbWVudC1wbHVzJwppbXBvcnQgeyBxdWVyeVZlcnNpb24sIHF1ZXJ5SGFyZHdhcmVUb2tlbiB9IGZyb20gJ0AvYXBpL2FkbWluJwppbXBvcnQgeyBnZXRTdGF0aXN0aWNCeVR5cGUgfSBmcm9tICdAL2FwaS9zdGF0aXN0aWNzJwppbXBvcnQgeyBzZWNvbmRUb1RpbWUgfSBmcm9tICdAL3V0aWxzL3RpbWUnCmltcG9ydCB7IGZvcm1hdE1lbW9yeSB9IGZyb20gJ0AvdXRpbHMvdXRpbHMnCmltcG9ydCB1c2VMYW5nIGZyb20gJ0AvY29tcG9zYWJsZXMvdXNlTGFuZycKaW1wb3J0IHsgTm9kZUNhdG9nZXJ5IH0gZnJvbSAnQC90eXBlcy9lbnVtcycKCgpleHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovX2RlZmluZUNvbXBvbmVudCh7CiAgc2V0dXAoX19wcm9wcykgewoKX3VzZUNzc1ZhcnMoX2N0eCA9PiAoewogICJkMWE2ODYxZSI6IChfdW5yZWYobGFiZWxXaWR0aCkpCn0pKQoKY29uc3QgeyBjdXJyZW50TGFuZyB9ID0gdXNlTGFuZygpCgpjb25zdCBpc0RhdGFMb2FkaW5nID0gcmVmKGZhbHNlKQoKY29uc3QgdmVyc2lvbkRhdGEgPSByZWYoewogIHZlcnNpb246ICcnLAogIGJ1aWxkX2RhdGU6ICcnLAp9KQpjb25zdCBod1Rva2VuID0gcmVmKCcnKQoKY29uc3QgZ2VuZXJhbFN0YXRpc3RpY3MgPSByZWFjdGl2ZSh7CiAgc3lzdGVtUnVubmluZ1RpbWU6ICcnLCAvLyBuZXVyb24gcnVubmluZyBzZWNvbmRzCiAgc3lzdGVtU3RhdHVzOiAnJywKICBtZW1QZXJjZW50OiAwLAogIG1lbVRvdGFsQnl0ZXM6ICcnLAogIG1lbVVzZWRCeXRlczogJycsCiAgc3RhcnR1cFRpbWVNYXRjaFJlZzogLyh1cHRpbWVfc2Vjb25kcz0/KShccypcZCopKD89XG4pL2csCiAgZGVidWdGaWxlc01hdGNoUmVnOiAvKGNvcmVfZHVtcGVkPT8pKFxzKlxkKikoPz1cbikvZywKICBtZW1Ub3RhbEJ5dGVzUmVnOiAvKG1lbV90b3RhbF9ieXRlcz0/KShccypcZCopKD89XG4pL2csCiAgbWVtVXNlZEJ5dGVzUmVnOiAvKG1lbV91c2VkX2J5dGVzPT8pKFxzKlxkKikoPz1cbikvZywKfSkKbGV0IHRpbWVyOiB1bmRlZmluZWQgfCBudW1iZXIKCmNvbnN0IHN5c3RlbVJ1bm5pbmdUaW1lID0gY29tcHV0ZWQoKCkgPT4gewogIHJldHVybiBzZWNvbmRUb1RpbWUoTnVtYmVyKGdlbmVyYWxTdGF0aXN0aWNzLnN5c3RlbVJ1bm5pbmdUaW1lKSkKfSkKY29uc3Qgc3lzdGVtU3RhdHVzVGV4dCA9IGNvbXB1dGVkKCgpID0+IHsKICByZXR1cm4gZ2VuZXJhbFN0YXRpc3RpY3Muc3lzdGVtU3RhdHVzID09PSAnMCcgPyAnY29tbW9uLm5vcm1hbCcgOiAnY29tbW9uLmV4Y2VwdGlvbnMnCn0pCgpjb25zdCBsYWJlbFdpZHRoID0gY29tcHV0ZWQoKCkgPT4gewogIHJldHVybiBjdXJyZW50TGFuZy52YWx1ZSA9PT0gJ3poJyA/ICc5MHB4JyA6ICcxMjBweCcKfSkKCmlmIChQcm9taXNlICYmICFQcm9taXNlLmFsbFNldHRsZWQpIHsKICBQcm9taXNlLmFsbFNldHRsZWQgPSAocHJvbWlzZXM6IGFueVtdKSA9PiB7CiAgICByZXR1cm4gUHJvbWlzZS5hbGwoCiAgICAgIHByb21pc2VzLm1hcCgocHJvbWlzZSkgPT4gewogICAgICAgIHJldHVybiBwcm9taXNlCiAgICAgICAgICAudGhlbigodmFsdWU6IGFueSkgPT4gewogICAgICAgICAgICByZXR1cm4geyBzdGF0ZTogJ2Z1bGZpbGxlZCcsIHZhbHVlIH0KICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goKHJlYXNvbjogYW55KSA9PiB7CiAgICAgICAgICAgIHJldHVybiB7IHN0YXRlOiAncmVqZWN0ZWQnLCByZWFzb24gfQogICAgICAgICAgfSkKICAgICAgfSksCiAgICApCiAgfQp9Cgpjb25zdCBnZXRTdGF0aXN0aWMgPSAoKSA9PiB7CiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgIGdldFN0YXRpc3RpY0J5VHlwZShOb2RlQ2F0b2dlcnkuR0xPQkFMKQogICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgY29uc3QgeyBkYXRhOiBzdGF0aXN0aWNzSW5mbyB9ID0gcmVzCgogICAgICAgIGNvbnN0IHN0YXJ0dXBUaW1lID0gc3RhdGlzdGljc0luZm8ubWF0Y2goZ2VuZXJhbFN0YXRpc3RpY3Muc3RhcnR1cFRpbWVNYXRjaFJlZykKICAgICAgICBjb25zdCBpc0RlYnVnRmlsZXMgPSBzdGF0aXN0aWNzSW5mby5tYXRjaChnZW5lcmFsU3RhdGlzdGljcy5kZWJ1Z0ZpbGVzTWF0Y2hSZWcpCiAgICAgICAgY29uc3QgbWVtVXNlZEJ5dGVzRGF0YSA9IHN0YXRpc3RpY3NJbmZvLm1hdGNoKGdlbmVyYWxTdGF0aXN0aWNzLm1lbVVzZWRCeXRlc1JlZykKICAgICAgICBjb25zdCBtZW1Ub3RhbEJ5dGVzRGF0YSA9IHN0YXRpc3RpY3NJbmZvLm1hdGNoKGdlbmVyYWxTdGF0aXN0aWNzLm1lbVRvdGFsQnl0ZXNSZWcpCgogICAgICAgIGdlbmVyYWxTdGF0aXN0aWNzLnN5c3RlbVJ1bm5pbmdUaW1lID0gc3RhcnR1cFRpbWUgPyBzdGFydHVwVGltZVswXS5zcGxpdCgnICcpWzFdIDogJycKICAgICAgICBnZW5lcmFsU3RhdGlzdGljcy5zeXN0ZW1TdGF0dXMgPSBpc0RlYnVnRmlsZXMgPyBpc0RlYnVnRmlsZXNbMF0uc3BsaXQoJyAnKVsxXSA6ICcnCgogICAgICAgIGNvbnN0IG1lbVVzZWRCeXRlcyA9IE51bWJlcihtZW1Vc2VkQnl0ZXNEYXRhID8gbWVtVXNlZEJ5dGVzRGF0YVswXS5zcGxpdCgnICcpWzFdIDogJzAnKQogICAgICAgIGNvbnN0IG1lbVRvdGFsQnl0ZXMgPSBOdW1iZXIobWVtVG90YWxCeXRlc0RhdGEgPyBtZW1Ub3RhbEJ5dGVzRGF0YVswXS5zcGxpdCgnICcpWzFdIDogJzAnKQogICAgICAgIGdlbmVyYWxTdGF0aXN0aWNzLm1lbVBlcmNlbnQgPSBOdW1iZXIoCiAgICAgICAgICBtZW1Vc2VkQnl0ZXMgJiYgbWVtVG90YWxCeXRlcyA/ICgobWVtVXNlZEJ5dGVzIC8gbWVtVG90YWxCeXRlcykgKiAxMDApLnRvRml4ZWQoMikgOiAnMCcsCiAgICAgICAgKQogICAgICAgIGdlbmVyYWxTdGF0aXN0aWNzLm1lbVVzZWRCeXRlcyA9IGZvcm1hdE1lbW9yeShtZW1Vc2VkQnl0ZXMsICdCeXRlJykKICAgICAgICBnZW5lcmFsU3RhdGlzdGljcy5tZW1Ub3RhbEJ5dGVzID0gZm9ybWF0TWVtb3J5KG1lbVRvdGFsQnl0ZXMsICdCeXRlJykKCiAgICAgICAgc2V0VGltZXIoKQogICAgICAgIHJlc29sdmUocmVzKQogICAgICB9KQogICAgICAuY2F0Y2goKGVycm9yKSA9PiB7CiAgICAgICAgcmVqZWN0KGVycm9yKQogICAgICB9KQogIH0pCn0KY29uc3Qgc2V0VGltZXIgPSAoKSA9PiB7CiAgaWYgKHRpbWVyKSB7CiAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aW1lcikKICB9CgogIHRpbWVyID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHsKICAgIGdldFN0YXRpc3RpYygpCiAgfSwgNTAwMCkKfQoKY29uc3QgaW5pdCA9ICgpID0+IHsKICB0cnkgewogICAgaXNEYXRhTG9hZGluZy52YWx1ZSA9IHRydWUKICAgIFByb21pc2UuYWxsU2V0dGxlZChbcXVlcnlWZXJzaW9uKCksIGdldFN0YXRpc3RpYygpXSkKICAgICAgLnRoZW4oKHZhbHVlczogYW55KSA9PiB7CiAgICAgICAgY29uc3QgeyBkYXRhOiB2ZXJzaW9uSW5mbyB9ID0gdmFsdWVzWzBdPy52YWx1ZSB8fCB7IHZlcnNpb246ICcnLCBidWlsZF9kYXRlOiAnJyB9CiAgICAgICAKCiAgICAgICAgdmVyc2lvbkRhdGEudmFsdWUgPSB2ZXJzaW9uSW5mbwogICAgIAogICAgICB9KQogICAgICAuZmluYWxseSgoKSA9PiB7CiAgICAgICAgaXNEYXRhTG9hZGluZy52YWx1ZSA9IGZhbHNlCiAgICAgIH0pCiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIGNvbnNvbGUubG9nKCdlcnJvcicsIGVycm9yKQogIH0KfQppbml0KCkKCm9uVW5tb3VudGVkKCgpID0+IHsKICBpZiAodGltZXIpIHsKICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVyKQogIH0KfSkKCnJldHVybiAoX2N0eDogYW55LF9jYWNoZTogYW55KSA9PiB7CiAgY29uc3QgX2NvbXBvbmVudF9lbXF4X2Rlc2NyaXB0aW9uc19pdGVtID0gX3Jlc29sdmVDb21wb25lbnQoImVtcXgtZGVzY3JpcHRpb25zLWl0ZW0iKSEKICBjb25zdCBfY29tcG9uZW50X2VtcXhfZGVzY3JpcHRpb25zID0gX3Jlc29sdmVDb21wb25lbnQoImVtcXgtZGVzY3JpcHRpb25zIikhCiAgY29uc3QgX2NvbXBvbmVudF9lbXF4X2NhcmQgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC1jYXJkIikhCiAgY29uc3QgX2RpcmVjdGl2ZV9lbXF4X2xvYWRpbmcgPSBfcmVzb2x2ZURpcmVjdGl2ZSgiZW1xeC1sb2FkaW5nIikhCgogIHJldHVybiBfd2l0aERpcmVjdGl2ZXMoKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZW1xeF9jYXJkLCB7IGNsYXNzOiAiYWJvdXQiIH0sIHsKICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFsKICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMSwgWwogICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoImgzIiwgX2hvaXN0ZWRfMiwgX3RvRGlzcGxheVN0cmluZyhfY3R4LiR0KCdjb21tb24uc3lzdGVtJykpLCAxKQogICAgICBdKSwKICAgICAgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgbnVsbCwgWwogICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfZGVzY3JpcHRpb25zLCB7IGNvbHVtbjogMSB9LCB7CiAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfZGVzY3JpcHRpb25zX2l0ZW0sIHsKICAgICAgICAgICAgICBsYWJlbDogX2N0eC4kdCgnYWRtaW4udmVyc2lvbicpCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcodmVyc2lvbkRhdGEudmFsdWUudmVyc2lvbiksIDEpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICB9LCA4LCBbImxhYmVsIl0pLAogICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2Rlc2NyaXB0aW9uc19pdGVtLCB7CiAgICAgICAgICAgICAgbGFiZWw6IF9jdHguJHQoJ2FkbWluLnN5c3RlbVN0YXR1cycpCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcoX2N0eC4kdChgJHtfdW5yZWYoc3lzdGVtU3RhdHVzVGV4dCl9YCkpLCAxKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF86IDEKICAgICAgICAgICAgfSwgOCwgWyJsYWJlbCJdKSwKICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZW1xeF9kZXNjcmlwdGlvbnNfaXRlbSwgewogICAgICAgICAgICAgIGxhYmVsOiBfY3R4LiR0KCdhZG1pbi5zeXN0ZW1SdW5uaW5nVGltZScpCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbCiAgICAgICAgICAgICAgICBfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcoX3VucmVmKHN5c3RlbVJ1bm5pbmdUaW1lKSksIDEpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICB9LCA4LCBbImxhYmVsIl0pLAogICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2Rlc2NyaXB0aW9uc19pdGVtLCB7CiAgICAgICAgICAgICAgbGFiZWw6IF9jdHguJHQoJ2FkbWluLm1lbW9yeVVzYWdlJykKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KCgpID0+IFsKICAgICAgICAgICAgICAgIF9jcmVhdGVWTm9kZShfdW5yZWYoRWxQcm9ncmVzcyksIHsKICAgICAgICAgICAgICAgICAgInN0cm9rZS13aWR0aCI6IDE0LAogICAgICAgICAgICAgICAgICBwZXJjZW50YWdlOiBfdW5yZWYoZ2VuZXJhbFN0YXRpc3RpY3MpLm1lbVBlcmNlbnQsCiAgICAgICAgICAgICAgICAgIHN0YXR1czogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICBjbGFzczogInByb2dyZXNzLWJhciIKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgICAgIF9jcmVhdGVFbGVtZW50Vk5vZGUoInNwYW4iLCBfaG9pc3RlZF8zLCBfdG9EaXNwbGF5U3RyaW5nKF91bnJlZihnZW5lcmFsU3RhdGlzdGljcykubWVtVXNlZEJ5dGVzKSArICIgLyAiICsgX3RvRGlzcGxheVN0cmluZyhfdW5yZWYoZ2VuZXJhbFN0YXRpc3RpY3MpLm1lbVRvdGFsQnl0ZXMpLCAxKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgICAgfSwgOCwgWyJwZXJjZW50YWdlIl0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICB9LCA4LCBbImxhYmVsIl0pLAogICAgICAgICAgICBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2Rlc2NyaXB0aW9uc19pdGVtLCB7CiAgICAgICAgICAgICAgbGFiZWw6IF9jdHguJHQoJ2FkbWluLmh3VG9rZW4nKQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKGh3VG9rZW4udmFsdWUpLCAxKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF86IDEKICAgICAgICAgICAgfSwgOCwgWyJsYWJlbCJdKSwKICAgICAgICAgICAgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZW1xeF9kZXNjcmlwdGlvbnNfaXRlbSwgewogICAgICAgICAgICAgIGxhYmVsOiBfY3R4LiR0KCdhZG1pbi5idWlsdERhdGUnKQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gWwogICAgICAgICAgICAgICAgX2NyZWF0ZVRleHRWTm9kZShfdG9EaXNwbGF5U3RyaW5nKHZlcnNpb25EYXRhLnZhbHVlLmJ1aWxkX2RhdGUpLCAxKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF86IDEKICAgICAgICAgICAgfSwgOCwgWyJsYWJlbCJdKQogICAgICAgICAgXSksCiAgICAgICAgICBfOiAxCiAgICAgICAgfSkKICAgICAgXSkKICAgIF0pLAogICAgXzogMQogIH0sIDUxMikpLCBbCiAgICBbX2RpcmVjdGl2ZV9lbXF4X2xvYWRpbmcsIGlzRGF0YUxvYWRpbmcudmFsdWVdCiAgXSkKfQp9Cgp9KQ=="},{"version":3,"file":null,"sources":["/home/ulrich/neuron-dashboard/src/views/about/About.vue"],"sourcesContent":["<template>\n  <emqx-card class=\"about\" v-emqx-loading=\"isDataLoading\">\n    <div class=\"card-hd-with-btn\">\n      <h3 class=\"card-title\">{{ $t('common.system') }}</h3>\n    </div>\n    <div>\n      <emqx-descriptions :column=\"1\">\n        <emqx-descriptions-item :label=\"$t('admin.version')\">\n          {{ versionData.version }}\n        </emqx-descriptions-item>\n        <emqx-descriptions-item :label=\"$t('admin.systemStatus')\">{{\n          $t(`${systemStatusText}`)\n        }}</emqx-descriptions-item>\n        <emqx-descriptions-item :label=\"$t('admin.systemRunningTime')\">\n          {{ systemRunningTime }}\n        </emqx-descriptions-item>\n\n        <emqx-descriptions-item :label=\"$t('admin.memoryUsage')\">\n          <el-progress\n            :stroke-width=\"14\"\n            :percentage=\"generalStatistics.memPercent\"\n            status=\"success\"\n            class=\"progress-bar\"\n          >\n            <span class=\"progress-text\">\n              {{ generalStatistics.memUsedBytes }} / {{ generalStatistics.memTotalBytes }}</span\n            >\n          </el-progress>\n        </emqx-descriptions-item>\n        <emqx-descriptions-item :label=\"$t('admin.hwToken')\">\n          {{ hwToken }}\n        </emqx-descriptions-item>\n        <emqx-descriptions-item :label=\"$t('admin.builtDate')\">\n          {{ versionData.build_date }}\n        </emqx-descriptions-item>\n      </emqx-descriptions>\n    </div>\n  </emqx-card>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, reactive, computed, onUnmounted } from 'vue'\nimport { ElProgress } from 'element-plus'\nimport { queryVersion, queryHardwareToken } from '@/api/admin'\nimport { getStatisticByType } from '@/api/statistics'\nimport { secondToTime } from '@/utils/time'\nimport { formatMemory } from '@/utils/utils'\nimport useLang from '@/composables/useLang'\nimport { NodeCatogery } from '@/types/enums'\n\nconst { currentLang } = useLang()\n\nconst isDataLoading = ref(false)\n\nconst versionData = ref({\n  version: '',\n  build_date: '',\n})\nconst hwToken = ref('')\n\nconst generalStatistics = reactive({\n  systemRunningTime: '', // neuron running seconds\n  systemStatus: '',\n  memPercent: 0,\n  memTotalBytes: '',\n  memUsedBytes: '',\n  startupTimeMatchReg: /(uptime_seconds=?)(\\s*\\d*)(?=\\n)/g,\n  debugFilesMatchReg: /(core_dumped=?)(\\s*\\d*)(?=\\n)/g,\n  memTotalBytesReg: /(mem_total_bytes=?)(\\s*\\d*)(?=\\n)/g,\n  memUsedBytesReg: /(mem_used_bytes=?)(\\s*\\d*)(?=\\n)/g,\n})\nlet timer: undefined | number\n\nconst systemRunningTime = computed(() => {\n  return secondToTime(Number(generalStatistics.systemRunningTime))\n})\nconst systemStatusText = computed(() => {\n  return generalStatistics.systemStatus === '0' ? 'common.normal' : 'common.exceptions'\n})\n\nconst labelWidth = computed(() => {\n  return currentLang.value === 'zh' ? '90px' : '120px'\n})\n\nif (Promise && !Promise.allSettled) {\n  Promise.allSettled = (promises: any[]) => {\n    return Promise.all(\n      promises.map((promise) => {\n        return promise\n          .then((value: any) => {\n            return { state: 'fulfilled', value }\n          })\n          .catch((reason: any) => {\n            return { state: 'rejected', reason }\n          })\n      }),\n    )\n  }\n}\n\nconst getStatistic = () => {\n  return new Promise((resolve, reject) => {\n    getStatisticByType(NodeCatogery.GLOBAL)\n      .then((res) => {\n        const { data: statisticsInfo } = res\n\n        const startupTime = statisticsInfo.match(generalStatistics.startupTimeMatchReg)\n        const isDebugFiles = statisticsInfo.match(generalStatistics.debugFilesMatchReg)\n        const memUsedBytesData = statisticsInfo.match(generalStatistics.memUsedBytesReg)\n        const memTotalBytesData = statisticsInfo.match(generalStatistics.memTotalBytesReg)\n\n        generalStatistics.systemRunningTime = startupTime ? startupTime[0].split(' ')[1] : ''\n        generalStatistics.systemStatus = isDebugFiles ? isDebugFiles[0].split(' ')[1] : ''\n\n        const memUsedBytes = Number(memUsedBytesData ? memUsedBytesData[0].split(' ')[1] : '0')\n        const memTotalBytes = Number(memTotalBytesData ? memTotalBytesData[0].split(' ')[1] : '0')\n        generalStatistics.memPercent = Number(\n          memUsedBytes && memTotalBytes ? ((memUsedBytes / memTotalBytes) * 100).toFixed(2) : '0',\n        )\n        generalStatistics.memUsedBytes = formatMemory(memUsedBytes, 'Byte')\n        generalStatistics.memTotalBytes = formatMemory(memTotalBytes, 'Byte')\n\n        setTimer()\n        resolve(res)\n      })\n      .catch((error) => {\n        reject(error)\n      })\n  })\n}\nconst setTimer = () => {\n  if (timer) {\n    window.clearInterval(timer)\n  }\n\n  timer = window.setInterval(() => {\n    getStatistic()\n  }, 5000)\n}\n\nconst init = () => {\n  try {\n    isDataLoading.value = true\n    Promise.allSettled([queryVersion(), getStatistic()])\n      .then((values: any) => {\n        const { data: versionInfo } = values[0]?.value || { version: '', build_date: '' }\n       \n\n        versionData.value = versionInfo\n     \n      })\n      .finally(() => {\n        isDataLoading.value = false\n      })\n  } catch (error) {\n    console.log('error', error)\n  }\n}\ninit()\n\nonUnmounted(() => {\n  if (timer) {\n    window.clearInterval(timer)\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.about {\n  min-height: 300px;\n}\n\n.progress-bar {\n  display: inline-flex;\n  align-items: center;\n  top: 2px;\n}\n:deep {\n  .el-descriptions__label {\n    display: inline-block;\n    width: v-bind(labelWidth);\n  }\n  .el-progress-bar {\n    width: 220px;\n  }\n  .el-progress__text {\n    display: inline-block;\n    margin-top: -2px;\n  }\n  // .el-progress-bar__innerText {\n  //   color: var(--main-label-color);\n  // }\n}\n.progress-text {\n  color: #1d1d1d;\n  font-size: 14px;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;AAyzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C;;;;;;;;AATwB;AAUxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvF,CAAC,CAAC;AACF;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC;AACF;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,CAAC;AACD;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtvF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxlllB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC;AACD,CAAC,CAAC,CAAC,CAA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"}]}