{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js!/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js!/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js??ref--14-3!/home/ulrich/neuron-dashboard/src/composables/config/useTemplateGroupList.ts","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/composables/config/useTemplateGroupList.ts","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/babel.config.js","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1705331057587},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}