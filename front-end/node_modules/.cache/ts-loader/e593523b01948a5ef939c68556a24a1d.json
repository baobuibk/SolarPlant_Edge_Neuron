{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js!/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js!/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js??ref--14-3!/home/ulrich/neuron-dashboard/src/composables/config/useAddGroup.ts","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/composables/config/useAddGroup.ts","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/babel.config.js","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1705331057587},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvdWxyaWNoL25ldXJvbi1kYXNoYm9hcmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvdWxyaWNoL25ldXJvbi1kYXNoYm9hcmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1uYW4uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0IHsgcmVmLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7CmltcG9ydCB7IGFkZEdyb3VwLCB1cGRhdGVHcm91cCB9IGZyb20gJ0AvYXBpL2NvbmZpZyc7CmltcG9ydCB7IEVtcXhNZXNzYWdlIH0gZnJvbSAnQGVtcXgvZW1xeC11aSc7CmltcG9ydCB7IHVzZUkxOG4gfSBmcm9tICd2dWUtaTE4bic7CmltcG9ydCB7IHVzZU5vZGVQbHVnaW5JbmZvIH0gZnJvbSAnLi91c2VQbHVnaW5JbmZvJzsKZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICgpIHsKICB2YXIgY3JlYXRlUmF3Rm9ybSA9IGZ1bmN0aW9uIGNyZWF0ZVJhd0Zvcm0oKSB7CiAgICByZXR1cm4gewogICAgICBncm91cDogJycsCiAgICAgIG5vZGU6IG51bGwsCiAgICAgIGludGVydmFsOiBudWxsCiAgICB9OwogIH07CgogIHZhciBfdXNlSTE4biA9IHVzZUkxOG4oKSwKICAgICAgdCA9IF91c2VJMThuLnQ7CgogIHZhciBmb3JtQ29tID0gcmVmKCk7CiAgdmFyIGdyb3VwRm9ybSA9IHJlZihjcmVhdGVSYXdGb3JtKCkpOwogIHZhciBpc1N1Ym1pdHRpbmcgPSByZWYoZmFsc2UpOwogIHZhciBvbGRHcm91cE5hbWUgPSByZWYoJycpOwogIHZhciBncm91cEZvcm1SdWxlcyA9IGNvbXB1dGVkKGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB7CiAgICAgIGdyb3VwOiBbewogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIG1lc3NhZ2U6IHQoJ2NvbmZpZy5ncm91cE5hbWVSZXF1aXJlZCcpCiAgICAgIH1dLAogICAgICBub2RlOiBbewogICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgIG1lc3NhZ2U6IHQoJ2NvbmZpZy5ub2RlUmVxdWlyZWQnKQogICAgICB9XSwKICAgICAgaW50ZXJ2YWw6IFt7CiAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgbWVzc2FnZTogdCgnY29uZmlnLnJlYWRJbnRlcnZhbFJlcXVpcmVkJykKICAgICAgfSwgewogICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKHJ1bGUsIHZhbHVlKSB7CiAgICAgICAgICB2YXIgcmV0ID0gW107CgogICAgICAgICAgaWYgKE51bWJlci5pc05hTihOdW1iZXIodmFsdWUpKSkgewogICAgICAgICAgICByZXQucHVzaChuZXcgRXJyb3IodCgnY29uZmlnLnJlYWRJbnRlcnZhbEVycm9yJykpKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIHR5cGU6ICdudW1iZXInLAogICAgICAgIG1pbjogMTAwLAogICAgICAgIG1lc3NhZ2U6IHQoJ2NvbmZpZy5yZWFkSW50ZXJ2YWxNaW5pbXVtRXJyb3InKSwKICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgfV0KICAgIH07CiAgfSk7CgogIHZhciBzdWJtaXRGb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHByb3BzR3JvdXApIHsKICAgICAgdmFyIGdyb3VwLCBwYXJhbXM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gZm9ybUNvbS52YWx1ZS52YWxpZGF0ZSgpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGlzU3VibWl0dGluZy52YWx1ZSA9IHRydWU7CgogICAgICAgICAgICAgIGlmIChwcm9wc0dyb3VwKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7CiAgICAgICAgICAgICAgcmV0dXJuIGFkZEdyb3VwKGdyb3VwRm9ybS52YWx1ZSk7CgogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIGdyb3VwID0gZ3JvdXBGb3JtLnZhbHVlLmdyb3VwOwogICAgICAgICAgICAgIHBhcmFtcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZ3JvdXBGb3JtLnZhbHVlKSwge30sIHsKICAgICAgICAgICAgICAgIGdyb3VwOiBvbGRHcm91cE5hbWUudmFsdWUsCiAgICAgICAgICAgICAgICBuZXdfbmFtZTogZ3JvdXAKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUdyb3VwKHBhcmFtcyk7CgogICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIEVtcXhNZXNzYWdlLnN1Y2Nlc3ModCgnY29tbW9uLnN1Ym1pdFN1Y2Nlc3MnKSk7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE5OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTY7CiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBQcm9taXNlLnJlamVjdCgpKTsKCiAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE5OwogICAgICAgICAgICAgIGlzU3VibWl0dGluZy52YWx1ZSA9IGZhbHNlOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMTkpOwoKICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1swLCAxNiwgMTksIDIyXV0pOwogICAgfSkpOwoKICAgIHJldHVybiBmdW5jdGlvbiBzdWJtaXRGb3JtKF94KSB7CiAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwogIH0oKTsKCiAgdmFyIGluaXRGb3JtID0gZnVuY3Rpb24gaW5pdEZvcm0oKSB7CiAgICBncm91cEZvcm0udmFsdWUgPSBjcmVhdGVSYXdGb3JtKCk7CiAgfTsKCiAgdmFyIHJlc2V0RmllbGRzID0gZnVuY3Rpb24gcmVzZXRGaWVsZHMoKSB7CiAgICBmb3JtQ29tLnZhbHVlLmZvcm0ucmVzZXRGaWVsZHMoKTsKICB9OyAvLyBnZXQgbm9kZSBwbHVnaW4gc2NoZW1hCgoKICB2YXIgX3VzZU5vZGVQbHVnaW5JbmZvID0gdXNlTm9kZVBsdWdpbkluZm8oKSwKICAgICAgZ2V0Tm9kZVBsdWdpbkluZm8gPSBfdXNlTm9kZVBsdWdpbkluZm8uZ2V0Tm9kZVBsdWdpbkluZm87CgogIHZhciBnZXRQbHVnaW5Db25maWdJbmZvID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHZhciBkYXRhLCBncm91cF9pbnRlcnZhbDsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGdldE5vZGVQbHVnaW5JbmZvKCk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIGdyb3VwX2ludGVydmFsID0gZGF0YS5ncm91cF9pbnRlcnZhbDsKCiAgICAgICAgICAgICAgaWYgKGdyb3VwX2ludGVydmFsICE9PSB1bmRlZmluZWQgfHwgZ3JvdXBfaW50ZXJ2YWwgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGdyb3VwRm9ybS52YWx1ZS5pbnRlcnZhbCA9IGdyb3VwX2ludGVydmFsIHx8IG51bGw7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIpOwogICAgfSkpOwoKICAgIHJldHVybiBmdW5jdGlvbiBnZXRQbHVnaW5Db25maWdJbmZvKCkgewogICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICByZXR1cm4gewogICAgb2xkR3JvdXBOYW1lOiBvbGRHcm91cE5hbWUsCiAgICBmb3JtQ29tOiBmb3JtQ29tLAogICAgZ3JvdXBGb3JtOiBncm91cEZvcm0sCiAgICBpc1N1Ym1pdHRpbmc6IGlzU3VibWl0dGluZywKICAgIGdyb3VwRm9ybVJ1bGVzOiBncm91cEZvcm1SdWxlcywKICAgIHJlc2V0RmllbGRzOiByZXNldEZpZWxkcywKICAgIGluaXRGb3JtOiBpbml0Rm9ybSwKICAgIHN1Ym1pdEZvcm06IHN1Ym1pdEZvcm0sCiAgICBnZXRQbHVnaW5Db25maWdJbmZvOiBnZXRQbHVnaW5Db25maWdJbmZvCiAgfTsKfSk7"},null]}