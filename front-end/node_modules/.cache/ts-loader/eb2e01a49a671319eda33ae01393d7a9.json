{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js!/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js!/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js??ref--14-3!/home/ulrich/neuron-dashboard/src/composables/config/usePluginInfo.ts","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/composables/config/usePluginInfo.ts","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/babel.config.js","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1705331057587},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3VscmljaC9uZXVyb24tZGFzaGJvYXJkL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyI7CmltcG9ydCB7IHJlZiwgY29tcHV0ZWQgfSBmcm9tICd2dWUnOwppbXBvcnQgeyB1c2VSb3V0ZSB9IGZyb20gJ3Z1ZS1yb3V0ZXInOwppbXBvcnQgeyBxdWVyeVBsdWdpbkNvbmZpZ0luZm8gfSBmcm9tICdAL2FwaS9jb25maWcnOwppbXBvcnQgeyB1c2VHZXRQbHVnaW5Nc2dJZE1hcCB9IGZyb20gJy4vdXNlUGx1Z2luJzsKZXhwb3J0IHZhciB1c2VUZW1wbGF0ZVBsdWdpbkluZm8gPSBmdW5jdGlvbiB1c2VUZW1wbGF0ZVBsdWdpbkluZm8ocGx1Z2luKSB7CiAgdmFyIHJvdXRlID0gdXNlUm91dGUoKTsKICB2YXIgdGVtcGxhdGVQbHVnaW5JbmZvID0gcmVmKHt9KTsKICB2YXIgcGx1Z2luTmFtZSA9IGNvbXB1dGVkKGZ1bmN0aW9uICgpIHsKICAgIHZhciBfcm91dGUkcGFyYW1zLCBfcm91dGUkcGFyYW1zJHBsdWdpbjsKCiAgICByZXR1cm4gcGx1Z2luIHx8ICgoX3JvdXRlJHBhcmFtcyA9IHJvdXRlLnBhcmFtcykgPT09IG51bGwgfHwgX3JvdXRlJHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9yb3V0ZSRwYXJhbXMkcGx1Z2luID0gX3JvdXRlJHBhcmFtcy5wbHVnaW4pID09PSBudWxsIHx8IF9yb3V0ZSRwYXJhbXMkcGx1Z2luID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcm91dGUkcGFyYW1zJHBsdWdpbi50b1N0cmluZygpKSB8fCAnJzsKICB9KTsgLy8gTGltaXQgdGhlIHR5cGUgb2YgdGFnCgogIHZhciBfdXNlR2V0UGx1Z2luTXNnSWRNYXAgPSB1c2VHZXRQbHVnaW5Nc2dJZE1hcCgpLAogICAgICBwbHVnaW5Nc2dJZE1hcCA9IF91c2VHZXRQbHVnaW5Nc2dJZE1hcC5wbHVnaW5Nc2dJZE1hcCwKICAgICAgaW5pdE1zZ0lkTWFwID0gX3VzZUdldFBsdWdpbk1zZ0lkTWFwLmluaXRNc2dJZE1hcDsKCiAgdmFyIGdldFRlbXBsYXRlUGx1Z2luSW5mbyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgdmFyIF9wbHVnaW5Nc2dJZE1hcCRwbHVnaSwgbm9kZVBsdWdpblRvTG93ZXIsIHNjaGVtYU5hbWUsIF95aWVsZCRxdWVyeVBsdWdpbkNvbiwgZGF0YTsKCiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gaW5pdE1zZ0lkTWFwKCk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgbm9kZVBsdWdpblRvTG93ZXIgPSBwbHVnaW5OYW1lLnZhbHVlLnRvTG9jYWxlTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgc2NoZW1hTmFtZSA9ICgoX3BsdWdpbk1zZ0lkTWFwJHBsdWdpID0gcGx1Z2luTXNnSWRNYXBbcGx1Z2luTmFtZS52YWx1ZV0pID09PSBudWxsIHx8IF9wbHVnaW5Nc2dJZE1hcCRwbHVnaSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3BsdWdpbk1zZ0lkTWFwJHBsdWdpLnNjaGVtYSkgfHwgbm9kZVBsdWdpblRvTG93ZXI7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7CiAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5UGx1Z2luQ29uZmlnSW5mbyhzY2hlbWFOYW1lKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfeWllbGQkcXVlcnlQbHVnaW5Db24gPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIGRhdGEgPSBfeWllbGQkcXVlcnlQbHVnaW5Db24uZGF0YTsKICAgICAgICAgICAgICB0ZW1wbGF0ZVBsdWdpbkluZm8udmFsdWUgPSBkYXRhIHx8IHt9OwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVzb2x2ZSh0ZW1wbGF0ZVBsdWdpbkluZm8udmFsdWUpKTsKCiAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDEzOwogICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgUHJvbWlzZS5yZWplY3QoX2NvbnRleHQudDApKTsKCiAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgMTNdXSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIGdldFRlbXBsYXRlUGx1Z2luSW5mbygpIHsKICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICByZXR1cm4gewogICAgdGVtcGxhdGVQbHVnaW5JbmZvOiB0ZW1wbGF0ZVBsdWdpbkluZm8sCiAgICBnZXRUZW1wbGF0ZVBsdWdpbkluZm86IGdldFRlbXBsYXRlUGx1Z2luSW5mbwogIH07Cn07CmV4cG9ydCB2YXIgdXNlTm9kZVBsdWdpbkluZm8gPSBmdW5jdGlvbiB1c2VOb2RlUGx1Z2luSW5mbyhwbHVnaW4pIHsKICB2YXIgcm91dGUgPSB1c2VSb3V0ZSgpOwogIHZhciBwbHVnaW5OYW1lID0gY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgdmFyIF9yb3V0ZSRwYXJhbXMyLCBfcm91dGUkcGFyYW1zMiRwbHVnaW47CgogICAgcmV0dXJuIHBsdWdpbiB8fCAoKF9yb3V0ZSRwYXJhbXMyID0gcm91dGUucGFyYW1zKSA9PT0gbnVsbCB8fCBfcm91dGUkcGFyYW1zMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9yb3V0ZSRwYXJhbXMyJHBsdWdpbiA9IF9yb3V0ZSRwYXJhbXMyLnBsdWdpbikgPT09IG51bGwgfHwgX3JvdXRlJHBhcmFtczIkcGx1Z2luID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcm91dGUkcGFyYW1zMiRwbHVnaW4udG9TdHJpbmcoKSkgfHwgJyc7CiAgfSk7CiAgdmFyIG5vZGVQbHVnaW5JbmZvID0gcmVmKHt9KTsKCiAgdmFyIF91c2VHZXRQbHVnaW5Nc2dJZE1hcDIgPSB1c2VHZXRQbHVnaW5Nc2dJZE1hcCgpLAogICAgICBwbHVnaW5Nc2dJZE1hcCA9IF91c2VHZXRQbHVnaW5Nc2dJZE1hcDIucGx1Z2luTXNnSWRNYXAsCiAgICAgIGluaXRNc2dJZE1hcCA9IF91c2VHZXRQbHVnaW5Nc2dJZE1hcDIuaW5pdE1zZ0lkTWFwOwoKICB2YXIgZ2V0Tm9kZVBsdWdpbkluZm8gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIF9wbHVnaW5Nc2dJZE1hcCRwbHVnaTIsIG5vZGVQbHVnaW5Ub0xvd2VyLCBzY2hlbWFOYW1lLCBfeWllbGQkcXVlcnlQbHVnaW5Db24yLCBkYXRhOwoKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDA7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBpbml0TXNnSWRNYXAoKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBub2RlUGx1Z2luVG9Mb3dlciA9IHBsdWdpbk5hbWUudmFsdWUudG9Mb2NhbGVMb3dlckNhc2UoKTsKICAgICAgICAgICAgICBzY2hlbWFOYW1lID0gKChfcGx1Z2luTXNnSWRNYXAkcGx1Z2kyID0gcGx1Z2luTXNnSWRNYXBbcGx1Z2luTmFtZS52YWx1ZV0pID09PSBudWxsIHx8IF9wbHVnaW5Nc2dJZE1hcCRwbHVnaTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wbHVnaW5Nc2dJZE1hcCRwbHVnaTIuc2NoZW1hKSB8fCBub2RlUGx1Z2luVG9Mb3dlcjsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7CiAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5UGx1Z2luQ29uZmlnSW5mbyhzY2hlbWFOYW1lKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfeWllbGQkcXVlcnlQbHVnaW5Db24yID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgZGF0YSA9IF95aWVsZCRxdWVyeVBsdWdpbkNvbjIuZGF0YTsKICAgICAgICAgICAgICBub2RlUGx1Z2luSW5mby52YWx1ZSA9IGRhdGEgfHwge307CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVzb2x2ZShub2RlUGx1Z2luSW5mby52YWx1ZSkpOwoKICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEzOwogICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgUHJvbWlzZS5yZWplY3QoX2NvbnRleHQyLnQwKSk7CgogICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbMCwgMTNdXSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIGdldE5vZGVQbHVnaW5JbmZvKCkgewogICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICByZXR1cm4gewogICAgbm9kZVBsdWdpbkluZm86IG5vZGVQbHVnaW5JbmZvLAogICAgZ2V0Tm9kZVBsdWdpbkluZm86IGdldE5vZGVQbHVnaW5JbmZvCiAgfTsKfTs="},null]}