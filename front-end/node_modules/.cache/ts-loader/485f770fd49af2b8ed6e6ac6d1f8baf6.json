{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js!/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js!/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js??ref--14-3!/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/about/License.vue?vue&type=script&setup=true&lang=ts","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/about/License.vue","mtime":1709144857820},{"path":"/home/ulrich/neuron-dashboard/babel.config.js","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1705331057587},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}