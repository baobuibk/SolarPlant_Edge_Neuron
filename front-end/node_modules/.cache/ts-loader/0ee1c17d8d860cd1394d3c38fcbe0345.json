{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js!/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js!/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js??ref--14-3!/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/monitoring/DataMonitoring.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/monitoring/DataMonitoring.vue","mtime":1708521072013},{"path":"/home/ulrich/neuron-dashboard/babel.config.js","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1705331057587},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCBhcyBfZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJzsKaW1wb3J0IHsgdW5yZWYgYXMgX3VucmVmLCB0b0Rpc3BsYXlTdHJpbmcgYXMgX3RvRGlzcGxheVN0cmluZywgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHJlbmRlckxpc3QgYXMgX3JlbmRlckxpc3QsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIGlzUmVmIGFzIF9pc1JlZiwgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUgfSBmcm9tICJ2dWUiOwp2YXIgX2hvaXN0ZWRfMSA9IHsKICBrZXk6IDAsCiAgY2xhc3M6ICJoZWFkZXItaXRlbSIKfTsKdmFyIF9ob2lzdGVkXzIgPSB7CiAgY2xhc3M6ICJsYWJlbCIKfTsKdmFyIF9ob2lzdGVkXzMgPSB7CiAgY2xhc3M6ICJ0YWJsZS1jb250YWluZXIiCn07CnZhciBfaG9pc3RlZF80ID0gewogIGNsYXNzOiAidmFsdWUtY29sdW1uLWhkIgp9OwoKdmFyIF9ob2lzdGVkXzUgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaSIsIHsKICBjbGFzczogImljb25mb250IGljb25hbGFybSIKfSwgbnVsbCwgLTEpOwoKdmFyIF9ob2lzdGVkXzYgPSB7CiAgY2xhc3M6ICJoZXhhZGVjaW1hbC1sYWJlbCIKfTsKdmFyIF9ob2lzdGVkXzcgPSB7CiAga2V5OiAwCn07CnZhciBfaG9pc3RlZF84ID0gewogIGtleTogMSwKICBjbGFzczogImhhcy1lcnJvciIKfTsKCnZhciBfaG9pc3RlZF85ID0gLyojX19QVVJFX18qL19jcmVhdGVUZXh0Vk5vZGUoIldyaXRlIik7CgppbXBvcnQgeyByZWYgfSBmcm9tICd2dWUnOwppbXBvcnQgeyBFbFBvcG92ZXIgfSBmcm9tICdlbGVtZW50LXBsdXMnOwppbXBvcnQgdXNlRGF0YU1vbml0b3JpbmcgZnJvbSAnQC9jb21wb3NhYmxlcy9kYXRhL3VzZURhdGFNb25pdG9yaW5nJzsKaW1wb3J0IHsgdXNlVGFnRGVjaW1hbCB9IGZyb20gJ0AvY29tcG9zYWJsZXMvY29uZmlnL3VzZUFkZFRhZ0NvbW1vbic7CmltcG9ydCBkYXRlZm9ybWF0IGZyb20gJ2RhdGVmb3JtYXQnOwppbXBvcnQgeyBnZXRFcnJvck1zZyB9IGZyb20gJ0AvdXRpbHMvdXRpbHMnOwppbXBvcnQgV3JpdGVEaWFsb2cgZnJvbSAnLi9jb21wb25lbnRzL1dyaXRlRGlhbG9nLnZ1ZSc7CmltcG9ydCBWaWV3SGVhZGVyQmFyIGZyb20gJ0AvY29tcG9uZW50cy9WaWV3SGVhZGVyQmFyLnZ1ZSc7CmltcG9ydCBLZXl3b3JkU2VyYWNoSW5wdXQgZnJvbSAnQC9jb21wb25lbnRzL0tleXdvcmRTZWFyY2hJbnB1dC52dWUnOwpleHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovX2RlZmluZUNvbXBvbmVudCh7CiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKF9fcHJvcHMpIHsKICAgIHZhciBfdXNlRGF0YU1vbml0b3JpbmcgPSB1c2VEYXRhTW9uaXRvcmluZygpLAogICAgICAgIG5vZGVMaXN0ID0gX3VzZURhdGFNb25pdG9yaW5nLm5vZGVMaXN0LAogICAgICAgIGdyb3VwTGlzdCA9IF91c2VEYXRhTW9uaXRvcmluZy5ncm91cExpc3QsCiAgICAgICAga2V5d29yZFNlYXJjaCA9IF91c2VEYXRhTW9uaXRvcmluZy5rZXl3b3JkU2VhcmNoLAogICAgICAgIGN1cnJlbnRHcm91cCA9IF91c2VEYXRhTW9uaXRvcmluZy5jdXJyZW50R3JvdXAsCiAgICAgICAgcGFnZUNvbnRyb2xsZXIgPSBfdXNlRGF0YU1vbml0b3JpbmcucGFnZUNvbnRyb2xsZXIsCiAgICAgICAgdGFibGVEYXRhID0gX3VzZURhdGFNb25pdG9yaW5nLnRhYmxlRGF0YSwKICAgICAgICBzaG93VmFsdWVCeUhleGFkZWNpbWFsID0gX3VzZURhdGFNb25pdG9yaW5nLnNob3dWYWx1ZUJ5SGV4YWRlY2ltYWwsCiAgICAgICAgdXBkYXRlZCA9IF91c2VEYXRhTW9uaXRvcmluZy51cGRhdGVkLAogICAgICAgIGN1cnJlbnROb2RlTmFtZSA9IF91c2VEYXRhTW9uaXRvcmluZy5jdXJyZW50Tm9kZU5hbWUsCiAgICAgICAgdGFibGVFbXB0eVRleHQgPSBfdXNlRGF0YU1vbml0b3JpbmcudGFibGVFbXB0eVRleHQsCiAgICAgICAgaGFuZGxlU2hvd1ZhbHVlQnlIZXhhZGVjaW1hbENoYW5nZWQgPSBfdXNlRGF0YU1vbml0b3JpbmcuaGFuZGxlU2hvd1ZhbHVlQnlIZXhhZGVjaW1hbENoYW5nZWQsCiAgICAgICAgY2FuV3JpdGUgPSBfdXNlRGF0YU1vbml0b3JpbmcuY2FuV3JpdGUsCiAgICAgICAgaGFuZGxlU2l6ZUNoYW5nZSA9IF91c2VEYXRhTW9uaXRvcmluZy5oYW5kbGVTaXplQ2hhbmdlLAogICAgICAgIHNlbGVjdGVkTm9kZUNoYW5nZWQgPSBfdXNlRGF0YU1vbml0b3Jpbmcuc2VsZWN0ZWROb2RlQ2hhbmdlZCwKICAgICAgICBzZWxlY3RlZEdyb3VwQ2hhbmdlZCA9IF91c2VEYXRhTW9uaXRvcmluZy5zZWxlY3RlZEdyb3VwQ2hhbmdlZCwKICAgICAgICBkYkdldFRhZ0xpc3QgPSBfdXNlRGF0YU1vbml0b3JpbmcuZGJHZXRUYWdMaXN0LAogICAgICAgIHNvcnREYXRhQnlLZXkgPSBfdXNlRGF0YU1vbml0b3Jpbmcuc29ydERhdGFCeUtleSwKICAgICAgICB3cml0dGVuVGFnID0gX3VzZURhdGFNb25pdG9yaW5nLndyaXR0ZW5UYWc7CgogICAgdmFyIHNob3dXcml0ZURpYWxvZyA9IHJlZihmYWxzZSk7CiAgICB2YXIgY3VycmVudFRhZyA9IHJlZih1bmRlZmluZWQpOwoKICAgIHZhciB3cml0ZURhdGEgPSBmdW5jdGlvbiB3cml0ZURhdGEoaXRlbSkgewogICAgICBjdXJyZW50VGFnLnZhbHVlID0gaXRlbTsKICAgICAgc2hvd1dyaXRlRGlhbG9nLnZhbHVlID0gdHJ1ZTsKICAgIH07CgogICAgdmFyIF91c2VUYWdEZWNpbWFsID0gdXNlVGFnRGVjaW1hbCgpLAogICAgICAgIHRhZ0RlY2ltYWxWYWx1ZSA9IF91c2VUYWdEZWNpbWFsLnRhZ0RlY2ltYWxWYWx1ZTsKCiAgICByZXR1cm4gZnVuY3Rpb24gKF9jdHgsIF9jYWNoZSkgewogICAgICB2YXIgX2NvbXBvbmVudF9lbXF4X29wdGlvbiA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbXF4LW9wdGlvbiIpOwoKICAgICAgdmFyIF9jb21wb25lbnRfZW1xeF9zZWxlY3QgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC1zZWxlY3QiKTsKCiAgICAgIHZhciBfY29tcG9uZW50X2VtcXhfdGFibGVfY29sdW1uID0gX3Jlc29sdmVDb21wb25lbnQoImVtcXgtdGFibGUtY29sdW1uIik7CgogICAgICB2YXIgX2NvbXBvbmVudF9lbXF4X3N3aXRjaCA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbXF4LXN3aXRjaCIpOwoKICAgICAgdmFyIF9jb21wb25lbnRfZW1xeF9idXR0b24gPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC1idXR0b24iKTsKCiAgICAgIHZhciBfY29tcG9uZW50X2VtcXhfdGFibGUgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC10YWJsZSIpOwoKICAgICAgdmFyIF9jb21wb25lbnRfZW1xeF9wYWdpbmF0aW9uID0gX3Jlc29sdmVDb21wb25lbnQoImVtcXgtcGFnaW5hdGlvbiIpOwoKICAgICAgdmFyIF9jb21wb25lbnRfZW1xeF9jYXJkID0gX3Jlc29sdmVDb21wb25lbnQoImVtcXgtY2FyZCIpOwoKICAgICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2NhcmQsIHsKICAgICAgICBjbGFzczogImRhdGEtbW9uaXRvcmluZyIKICAgICAgfSwgewogICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBbX2NyZWF0ZVZOb2RlKFZpZXdIZWFkZXJCYXIsIG51bGwsIHsKICAgICAgICAgICAgbGVmdDogX3dpdGhDdHgoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHJldHVybiBbX3VucmVmKGN1cnJlbnRHcm91cCkuZ3JvdXBOYW1lID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygic3BhbiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJsYWJlbCIsIF9ob2lzdGVkXzIsIF90b0Rpc3BsYXlTdHJpbmcoX2N0eC4kdCgnZGF0YS51cGRhdGVkJykpLCAxKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoX3VucmVmKGRhdGVmb3JtYXQpKF91bnJlZih1cGRhdGVkKSwgJ3l5eXktbW0tZGQgSEg6TU06c3MnKSksIDEpXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIiwgdHJ1ZSldOwogICAgICAgICAgICB9KSwKICAgICAgICAgICAgcmlnaHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICByZXR1cm4gW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfc2VsZWN0LCB7CiAgICAgICAgICAgICAgICBtb2RlbFZhbHVlOiBfdW5yZWYoY3VycmVudEdyb3VwKS5ub2RlLAogICAgICAgICAgICAgICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF91bnJlZihjdXJyZW50R3JvdXApLm5vZGUgPSAkZXZlbnQ7CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIHNpemU6ICJtZWRpdW0iLAogICAgICAgICAgICAgICAgZmlsdGVyYWJsZTogIiIsCiAgICAgICAgICAgICAgICBjbGVhcmFibGU6ICIiLAogICAgICAgICAgICAgICAgY2xhc3M6ICJoZWFkZXItaXRlbSBzZWFyY2gtZ3JvdXAgZmlsdGVyLXNlbGVjdG9yIiwKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBfY3R4LiR0KCdjb25maWcuc291dGhEZXZpY2VQbGFjZWhvbGRlcicpLAogICAgICAgICAgICAgICAgb25DaGFuZ2U6IF91bnJlZihzZWxlY3RlZE5vZGVDaGFuZ2VkKQogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIFsoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KF91bnJlZihub2RlTGlzdCksIGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfZW1xeF9vcHRpb24sIHsKICAgICAgICAgICAgICAgICAgICAgIGtleTogbmFtZSwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuYW1lLAogICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG5hbWUKICAgICAgICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbInZhbHVlIiwgImxhYmVsIl0pOwogICAgICAgICAgICAgICAgICB9KSwgMTI4KSldOwogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfOiAxCiAgICAgICAgICAgICAgfSwgOCwgWyJtb2RlbFZhbHVlIiwgInBsYWNlaG9sZGVyIiwgIm9uQ2hhbmdlIl0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X3NlbGVjdCwgewogICAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogX3VucmVmKGN1cnJlbnRHcm91cCkuZ3JvdXBOYW1lLAogICAgICAgICAgICAgICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF91bnJlZihjdXJyZW50R3JvdXApLmdyb3VwTmFtZSA9ICRldmVudDsKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgZmlsdGVyYWJsZTogIiIsCiAgICAgICAgICAgICAgICBjbGVhcmFibGU6ICIiLAogICAgICAgICAgICAgICAgc2l6ZTogIm1lZGl1bSIsCiAgICAgICAgICAgICAgICBjbGFzczogImhlYWRlci1pdGVtIHNlYXJjaC1ncm91cCBmaWx0ZXItc2VsZWN0b3IiLAogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IF9jdHguJHQoJ2NvbmZpZy5ncm91cFBsYWNlaG9sZGVyJyksCiAgICAgICAgICAgICAgICBvbkNoYW5nZTogX3VucmVmKHNlbGVjdGVkR3JvdXBDaGFuZ2VkKQogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIFsoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KF91bnJlZihncm91cExpc3QpLCBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VtcXhfb3B0aW9uLCB7CiAgICAgICAgICAgICAgICAgICAgICBrZXk6IGl0ZW0ubmFtZSwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogaXRlbS5uYW1lCiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgWyJ2YWx1ZSIsICJsYWJlbCJdKTsKICAgICAgICAgICAgICAgICAgfSksIDEyOCkpXTsKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgIH0sIDgsIFsibW9kZWxWYWx1ZSIsICJwbGFjZWhvbGRlciIsICJvbkNoYW5nZSJdKSwgX2NyZWF0ZVZOb2RlKEtleXdvcmRTZXJhY2hJbnB1dCwgewogICAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogX3VucmVmKGtleXdvcmRTZWFyY2gpLAogICAgICAgICAgICAgICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9pc1JlZihrZXl3b3JkU2VhcmNoKSA/IGtleXdvcmRTZWFyY2gudmFsdWUgPSAkZXZlbnQgOiBudWxsOwogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBjbGFzczogImhlYWRlci1pdGVtIHNlYXJjaF9pbnB1dCIsCiAgICAgICAgICAgICAgICBvbklucHV0OiBfdW5yZWYoZGJHZXRUYWdMaXN0KSwKICAgICAgICAgICAgICAgIG9uQ2xlYXI6IF91bnJlZihkYkdldFRhZ0xpc3QpLAogICAgICAgICAgICAgICAgb25FbnRlcjogX3VucmVmKGRiR2V0VGFnTGlzdCkKICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbIm1vZGVsVmFsdWUiLCAib25JbnB1dCIsICJvbkNsZWFyIiwgIm9uRW50ZXIiXSldOwogICAgICAgICAgICB9KSwKICAgICAgICAgICAgXzogMQogICAgICAgICAgfSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzMsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X3RhYmxlLCB7CiAgICAgICAgICAgIGRhdGE6IF91bnJlZih0YWJsZURhdGEpLAogICAgICAgICAgICAiZW1wdHktdGV4dCI6IF91bnJlZih0YWJsZUVtcHR5VGV4dCksCiAgICAgICAgICAgIG9uU29ydENoYW5nZTogX3VucmVmKHNvcnREYXRhQnlLZXkpCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICByZXR1cm4gW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfdGFibGVfY29sdW1uLCB7CiAgICAgICAgICAgICAgICBwcm9wOiAidGFnTmFtZSIsCiAgICAgICAgICAgICAgICBsYWJlbDogX2N0eC4kdCgnY29tbW9uLm5hbWUnKSwKICAgICAgICAgICAgICAgIHNvcnRhYmxlOiAiY3VzdG9tIiwKICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiAiMTAwIgogICAgICAgICAgICAgIH0sIG51bGwsIDgsIFsibGFiZWwiXSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfdGFibGVfY29sdW1uLCB7CiAgICAgICAgICAgICAgICBwcm9wOiAiYWRkcmVzcyIsCiAgICAgICAgICAgICAgICBsYWJlbDogX2N0eC4kdCgnY29uZmlnLmFkZHJlc3MnKSwKICAgICAgICAgICAgICAgIHNvcnRhYmxlOiAiY3VzdG9tIiwKICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiAiMTAwIgogICAgICAgICAgICAgIH0sIG51bGwsIDgsIFsibGFiZWwiXSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfdGFibGVfY29sdW1uLCB7CiAgICAgICAgICAgICAgICBsYWJlbDogX2N0eC4kdCgnY29tbW9uLnR5cGUnKSwKICAgICAgICAgICAgICAgIHdpZHRoOiAiOTAiLAogICAgICAgICAgICAgICAgc29ydGFibGU6ICJjdXN0b20iLAogICAgICAgICAgICAgICAgcHJvcDogInR5cGVMYWJlbCIKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoX3JlZjIpIHsKICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IF9yZWYyLnJvdzsKICAgICAgICAgICAgICAgICAgcmV0dXJuIFtfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcocm93LnR5cGVMYWJlbCksIDEpXTsKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgIH0sIDgsIFsibGFiZWwiXSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfdGFibGVfY29sdW1uLCB7CiAgICAgICAgICAgICAgICBsYWJlbDogX2N0eC4kdCgnY29uZmlnLmRlY2ltYWwnKQogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uIChfcmVmMykgewogICAgICAgICAgICAgICAgICB2YXIgcm93ID0gX3JlZjMucm93OwogICAgICAgICAgICAgICAgICByZXR1cm4gW19jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZyhfdW5yZWYodGFnRGVjaW1hbFZhbHVlKShyb3cuZGVjaW1hbCkpLCAxKV07CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF86IDEKICAgICAgICAgICAgICB9LCA4LCBbImxhYmVsIl0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X3RhYmxlX2NvbHVtbiwgewogICAgICAgICAgICAgICAgcHJvcDogInZhbHVlVG9TaG93IiwKICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiAiMTAwIgogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGhlYWRlcjogX3dpdGhDdHgoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gW19jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzQsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgbnVsbCwgX3RvRGlzcGxheVN0cmluZyhfY3R4LiR0KCdkYXRhLnZhbHVlJykpLCAxKSwgX2NyZWF0ZVZOb2RlKF91bnJlZihFbFBvcG92ZXIpLCB7CiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiAidG9wLXN0YXJ0IiwKICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTgwLAogICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6ICJob3ZlciIKICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogX3dpdGhDdHgoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtfaG9pc3RlZF81XTsKICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW19jcmVhdGVFbGVtZW50Vk5vZGUoImxhYmVsIiwgX2hvaXN0ZWRfNiwgX3RvRGlzcGxheVN0cmluZyhfY3R4LiR0KCdkYXRhLmRpc3BsYXlUaGVWYWx1ZUluSGV4YWRlY2ltYWwnKSksIDEpLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X3N3aXRjaCwgewogICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAibWluaSIsCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsVmFsdWU6IF91bnJlZihzaG93VmFsdWVCeUhleGFkZWNpbWFsKSwKICAgICAgICAgICAgICAgICAgICAgICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbM10gfHwgKF9jYWNoZVszXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2lzUmVmKHNob3dWYWx1ZUJ5SGV4YWRlY2ltYWwpID8gc2hvd1ZhbHVlQnlIZXhhZGVjaW1hbC52YWx1ZSA9ICRldmVudCA6IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogX3VucmVmKGhhbmRsZVNob3dWYWx1ZUJ5SGV4YWRlY2ltYWxDaGFuZ2VkKQogICAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgWyJtb2RlbFZhbHVlIiwgIm9uQ2hhbmdlIl0pXTsKICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfOiAxCiAgICAgICAgICAgICAgICAgIH0pXSldOwogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoX3JlZjQpIHsKICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IF9yZWY0LnJvdzsKICAgICAgICAgICAgICAgICAgcmV0dXJuIFshcm93LmVycm9yID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygic3BhbiIsIF9ob2lzdGVkXzcsIF90b0Rpc3BsYXlTdHJpbmcocm93LnZhbHVlVG9TaG93KSwgMSkpIDogKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygic3BhbiIsIF9ob2lzdGVkXzgsICIgRXJyb3IoIiArIF90b0Rpc3BsYXlTdHJpbmcocm93LmVycm9yKSArICIpOiAiICsgX3RvRGlzcGxheVN0cmluZyhfdW5yZWYoZ2V0RXJyb3JNc2cpKHJvdy5lcnJvcikpLCAxKSldOwogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfOiAxCiAgICAgICAgICAgICAgfSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfdGFibGVfY29sdW1uLCB7CiAgICAgICAgICAgICAgICBsYWJlbDogX2N0eC4kdCgnY29uZmlnLmRlc2MnKSwKICAgICAgICAgICAgICAgIHByb3A6ICJkZXNjcmlwdGlvbiIsCiAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogIjEwMCIKICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbImxhYmVsIl0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X3RhYmxlX2NvbHVtbiwgewogICAgICAgICAgICAgICAgd2lkdGg6ICIxMDAiLAogICAgICAgICAgICAgICAgbGFiZWw6IF9jdHguJHQoJ2NvbW1vbi5vcGVyJyksCiAgICAgICAgICAgICAgICBhbGlnbjogInJpZ2h0IgogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uIChfcmVmNSkgewogICAgICAgICAgICAgICAgICB2YXIgcm93ID0gX3JlZjUucm93OwogICAgICAgICAgICAgICAgICByZXR1cm4gW191bnJlZihjYW5Xcml0ZSkocm93KSA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VtcXhfYnV0dG9uLCB7CiAgICAgICAgICAgICAgICAgICAga2V5OiAwLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdyaXRlRGF0YShyb3cpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbX2hvaXN0ZWRfOV07CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgXzogMgogICAgICAgICAgICAgICAgICB9LCAxMDMyLCBbIm9uQ2xpY2siXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIiwgdHJ1ZSldOwogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfOiAxCiAgICAgICAgICAgICAgfSwgOCwgWyJsYWJlbCJdKV07CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfOiAxCiAgICAgICAgICB9LCA4LCBbImRhdGEiLCAiZW1wdHktdGV4dCIsICJvblNvcnRDaGFuZ2UiXSldKSwgX3VucmVmKHBhZ2VDb250cm9sbGVyKS50b3RhbCA+IDEwMCA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VtcXhfcGFnaW5hdGlvbiwgewogICAgICAgICAgICBrZXk6IDAsCiAgICAgICAgICAgIGxheW91dDogInRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQsIGp1bXBlciIsCiAgICAgICAgICAgICJjdXJyZW50LXBhZ2UiOiBfdW5yZWYocGFnZUNvbnRyb2xsZXIpLm51bSwKICAgICAgICAgICAgIm9uVXBkYXRlOmN1cnJlbnQtcGFnZSI6IF9jYWNoZVs0XSB8fCAoX2NhY2hlWzRdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdW5yZWYocGFnZUNvbnRyb2xsZXIpLm51bSA9ICRldmVudDsKICAgICAgICAgICAgfSksCiAgICAgICAgICAgICJwYWdlLXNpemVzIjogWzEwMCwgMjAwLCAzMDAsIDQwMCwgNTAwXSwKICAgICAgICAgICAgdG90YWw6IF91bnJlZihwYWdlQ29udHJvbGxlcikudG90YWwsCiAgICAgICAgICAgICJwYWdlLXNpemUiOiBfdW5yZWYocGFnZUNvbnRyb2xsZXIpLnNpemUsCiAgICAgICAgICAgIG9uU2l6ZUNoYW5nZTogX3VucmVmKGhhbmRsZVNpemVDaGFuZ2UpCiAgICAgICAgICB9LCBudWxsLCA4LCBbImN1cnJlbnQtcGFnZSIsICJ0b3RhbCIsICJwYWdlLXNpemUiLCAib25TaXplQ2hhbmdlIl0pKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoIiIsIHRydWUpXTsKICAgICAgICB9KSwKICAgICAgICBfOiAxCiAgICAgIH0pLCBfY3JlYXRlVk5vZGUoV3JpdGVEaWFsb2csIHsKICAgICAgICBtb2RlbFZhbHVlOiBzaG93V3JpdGVEaWFsb2cudmFsdWUsCiAgICAgICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbNV0gfHwgKF9jYWNoZVs1XSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgIHJldHVybiBzaG93V3JpdGVEaWFsb2cudmFsdWUgPSAkZXZlbnQ7CiAgICAgICAgfSksCiAgICAgICAgZ3JvdXA6IF91bnJlZihjdXJyZW50R3JvdXApLmdyb3VwTmFtZSwKICAgICAgICB0YWc6IGN1cnJlbnRUYWcudmFsdWUsCiAgICAgICAgIm5vZGUtbmFtZSI6IF91bnJlZihjdXJyZW50Tm9kZU5hbWUpLAogICAgICAgIG9uVXBkYXRlZDogX3VucmVmKHdyaXR0ZW5UYWcpCiAgICAgIH0sIG51bGwsIDgsIFsibW9kZWxWYWx1ZSIsICJncm91cCIsICJ0YWciLCAibm9kZS1uYW1lIiwgIm9uVXBkYXRlZCJdKV0sIDY0KTsKICAgIH07CiAgfQp9KTs="},null]}