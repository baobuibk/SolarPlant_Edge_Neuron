{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js!/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js!/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js??ref--14-3!/home/ulrich/neuron-dashboard/src/composables/config/useTemplateGroupDialog.ts","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/composables/config/useTemplateGroupDialog.ts","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/babel.config.js","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1705331057587},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvdWxyaWNoL25ldXJvbi1kYXNoYm9hcmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvdWxyaWNoL25ldXJvbi1kYXNoYm9hcmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCB7IHJlZiwgY29tcHV0ZWQgfSBmcm9tICd2dWUnOwppbXBvcnQgeyB1c2VSb3V0ZSB9IGZyb20gJ3Z1ZS1yb3V0ZXInOwppbXBvcnQgeyB1c2VJMThuIH0gZnJvbSAndnVlLWkxOG4nOwppbXBvcnQgeyBFbXF4TWVzc2FnZSB9IGZyb20gJ0BlbXF4L2VtcXgtdWknOwppbXBvcnQgeyBhZGRHcm91cCwgdXBkYXRlR3JvdXAgfSBmcm9tICdAL2FwaS90ZW1wbGF0ZSc7CmltcG9ydCB7IHVzZVRlbXBsYXRlUGx1Z2luSW5mbyB9IGZyb20gJ0AvY29tcG9zYWJsZXMvY29uZmlnL3VzZVBsdWdpbkluZm8nOwpleHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKCkgewogIHZhciBjcmVhdGVSYXdGb3JtID0gZnVuY3Rpb24gY3JlYXRlUmF3Rm9ybSgpIHsKICAgIHJldHVybiB7CiAgICAgIGdyb3VwOiAnJywKICAgICAgdGVtcGxhdGU6IG51bGwsCiAgICAgIGludGVydmFsOiBudWxsCiAgICB9OwogIH07CgogIHZhciBfdXNlSTE4biA9IHVzZUkxOG4oKSwKICAgICAgdCA9IF91c2VJMThuLnQ7CgogIHZhciByb3V0ZSA9IHVzZVJvdXRlKCk7IC8vIGdldCB0ZW1wbGF0ZSYgaXRzIHBsdWdpbgoKICB2YXIgdGVtcGxhdGUgPSBjb21wdXRlZChmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gcm91dGUucGFyYW1zLnRlbXBsYXRlLnRvU3RyaW5nKCk7CiAgfSk7CiAgdmFyIGdyb3VwRGlhbG9nVmlzaWJsZSA9IHJlZihmYWxzZSk7CiAgdmFyIGdyb3VwRm9ybSA9IHJlZihjcmVhdGVSYXdGb3JtKCkpOwogIHZhciBpc0VkaXRHcm91cCA9IHJlZihmYWxzZSk7CiAgdmFyIGlzU3VibWl0dGluZyA9IHJlZihmYWxzZSk7CgogIHZhciBzaG93RGlhbG9nID0gZnVuY3Rpb24gc2hvd0RpYWxvZygpIHsKICAgIGdyb3VwRGlhbG9nVmlzaWJsZS52YWx1ZSA9IHRydWU7CiAgICBncm91cEZvcm0udmFsdWUudGVtcGxhdGUgPSB0ZW1wbGF0ZS52YWx1ZTsKICB9OyAvLyBHZXQgZ3JvdXAgZGVmYXVsdCBpbnRlcnZhbAoKCiAgdmFyIF91c2VUZW1wbGF0ZVBsdWdpbkluZiA9IHVzZVRlbXBsYXRlUGx1Z2luSW5mbygpLAogICAgICBnZXRUZW1wbGF0ZVBsdWdpbkluZm8gPSBfdXNlVGVtcGxhdGVQbHVnaW5JbmYuZ2V0VGVtcGxhdGVQbHVnaW5JbmZvOwoKICB2YXIgZ2V0UGx1Z2luQ29uZmlnSW5mbyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgdmFyIGRhdGEsIGdyb3VwX2ludGVydmFsOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGdldFRlbXBsYXRlUGx1Z2luSW5mbygpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGRhdGEgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIGdyb3VwX2ludGVydmFsID0gZGF0YS5ncm91cF9pbnRlcnZhbDsKCiAgICAgICAgICAgICAgaWYgKGdyb3VwX2ludGVydmFsICE9PSB1bmRlZmluZWQgfHwgZ3JvdXBfaW50ZXJ2YWwgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGdyb3VwRm9ybS52YWx1ZS5pbnRlcnZhbCA9IGdyb3VwX2ludGVydmFsIHx8IG51bGw7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gZ2V0UGx1Z2luQ29uZmlnSW5mbygpIHsKICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOyAvLyBIYW5kbGUgYWRkIGdyb3VwCgoKICB2YXIgaGFuZGxlQWRkR3JvdXAgPSBmdW5jdGlvbiBoYW5kbGVBZGRHcm91cCgpIHsKICAgIHNob3dEaWFsb2coKTsKICAgIGlzRWRpdEdyb3VwLnZhbHVlID0gZmFsc2U7IC8vIHNldCBwbHVnaW4gZGVmYXVsdCBpbnRldmFsCgogICAgZ2V0UGx1Z2luQ29uZmlnSW5mbygpOwogIH07IC8vIEhhbmRsZSBlZGl0IGdyb3VwCgoKICB2YXIgaGFuZGxlRWRpdEdyb3VwID0gZnVuY3Rpb24gaGFuZGxlRWRpdEdyb3VwKGdyb3VwUm93RGF0YSkgewogICAgdmFyIG5hbWUgPSBncm91cFJvd0RhdGEubmFtZSwKICAgICAgICBpbnRlcnZhbCA9IGdyb3VwUm93RGF0YS5pbnRlcnZhbDsKICAgIGlzRWRpdEdyb3VwLnZhbHVlID0gdHJ1ZTsKICAgIHNob3dEaWFsb2coKTsKICAgIGdyb3VwRm9ybS52YWx1ZSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZ3JvdXBGb3JtLnZhbHVlKSwge30sIHsKICAgICAgZ3JvdXA6IG5hbWUsCiAgICAgIGludGVydmFsOiBpbnRlcnZhbAogICAgfSk7CiAgfTsKICAvKioKICAgKiBDcmVhdGUgb3IgVXBkYXRlIGdyb3VwCiAgICovCgoKICB2YXIgc3VibWl0Rm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICB2YXIgZGF0YTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDA7CiAgICAgICAgICAgICAgaXNTdWJtaXR0aW5nLnZhbHVlID0gdHJ1ZTsKICAgICAgICAgICAgICBkYXRhID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBncm91cEZvcm0udmFsdWUpLCB7fSwgewogICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRlbXBsYXRlLnZhbHVlCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGlmIChpc0VkaXRHcm91cC52YWx1ZSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA4OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIGFkZEdyb3VwKGRhdGEpOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMDsKICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlR3JvdXAoZGF0YSk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIEVtcXhNZXNzYWdlLnN1Y2Nlc3ModCgnY29tbW9uLnN1Ym1pdFN1Y2Nlc3MnKSk7CiAgICAgICAgICAgICAgZ3JvdXBEaWFsb2dWaXNpYmxlLnZhbHVlID0gZmFsc2U7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVzb2x2ZSgpKTsKCiAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxNTsKICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KCkpOwoKICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDE4OwogICAgICAgICAgICAgIGlzU3VibWl0dGluZy52YWx1ZSA9IGZhbHNlOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuZmluaXNoKDE4KTsKCiAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMiwgbnVsbCwgW1swLCAxNSwgMTgsIDIxXV0pOwogICAgfSkpOwoKICAgIHJldHVybiBmdW5jdGlvbiBzdWJtaXRGb3JtKCkgewogICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICByZXR1cm4gewogICAgZ3JvdXBGb3JtOiBncm91cEZvcm0sCiAgICBncm91cERpYWxvZ1Zpc2libGU6IGdyb3VwRGlhbG9nVmlzaWJsZSwKICAgIGlzRWRpdEdyb3VwOiBpc0VkaXRHcm91cCwKICAgIGdldFBsdWdpbkNvbmZpZ0luZm86IGdldFBsdWdpbkNvbmZpZ0luZm8sCiAgICBoYW5kbGVBZGRHcm91cDogaGFuZGxlQWRkR3JvdXAsCiAgICBoYW5kbGVFZGl0R3JvdXA6IGhhbmRsZUVkaXRHcm91cCwKICAgIGlzU3VibWl0dGluZzogaXNTdWJtaXR0aW5nLAogICAgc3VibWl0Rm9ybTogc3VibWl0Rm9ybQogIH07Cn0pOw=="},null]}