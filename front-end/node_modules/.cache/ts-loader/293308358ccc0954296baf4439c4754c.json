{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js!/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js!/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js??ref--14-3!/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/components/LicenseTipDialog.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/components/LicenseTipDialog.vue","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/babel.config.js","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1705331057587},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3VscmljaC9uZXVyb24tZGFzaGJvYXJkL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgYXMgX2RlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7CmltcG9ydCB7IHVucmVmIGFzIF91bnJlZiwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCBpc1JlZiBhcyBfaXNSZWYsIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSAidnVlIjsKCnZhciBfd2l0aFNjb3BlSWQgPSBmdW5jdGlvbiBfd2l0aFNjb3BlSWQobikgewogIHJldHVybiBfcHVzaFNjb3BlSWQoImRhdGEtdi0xNmZlNjNkYyIpLCBuID0gbigpLCBfcG9wU2NvcGVJZCgpLCBuOwp9OwoKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJ0aXAtdGV4dCIKfTsKdmFyIF9ob2lzdGVkXzIgPSBbImlubmVySFRNTCJdOwp2YXIgX2hvaXN0ZWRfMyA9IHsKICBrZXk6IDEKfTsKdmFyIF9ob2lzdGVkXzQgPSBbImlubmVySFRNTCJdOwp2YXIgX2hvaXN0ZWRfNSA9IFsiaW5uZXJIVE1MIl07CnZhciBfaG9pc3RlZF82ID0gWyJpbm5lckhUTUwiXTsKdmFyIF9ob2lzdGVkXzcgPSBbImlubmVySFRNTCJdOwp2YXIgX2hvaXN0ZWRfOCA9IFsiaW5uZXJIVE1MIl07CnZhciBfaG9pc3RlZF85ID0gWyJpbm5lckhUTUwiXTsKdmFyIF9ob2lzdGVkXzEwID0gewogIGNsYXNzOiAiZGlhbG9nLWZvb3RlciIKfTsKaW1wb3J0IHsgY29tcHV0ZWQsIHJlZiB9IGZyb20gJ3Z1ZSc7CmltcG9ydCB7IEVsRGlhbG9nLCBFbENoZWNrYm94IH0gZnJvbSAnZWxlbWVudC1wbHVzJzsKaW1wb3J0IENvb2tpZXMgZnJvbSAnanMtY29va2llJzsKZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL19kZWZpbmVDb21wb25lbnQoewogIHByb3BzOiB7CiAgICBtb2RlbFZhbHVlOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgaXNIYXNMaWNlbnNlOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgaXNMaWNlbnNlSW52YWxpZDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGlzTGljZW5zZUV4cGlyeTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGlzTGljZW5zZVJlYWR5RXhwaXJ5OiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgaXNIYXJkd2FyZU1pc21hdGNoOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgaXNPdmVyTWF4aW11bU5vZGVzOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgaXNPdmVyTWF4aW11bVRhZ3M6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0KICB9LAogIGVtaXRzOiBbJ3VwZGF0ZTptb2RlbFZhbHVlJywgJ3N1Ym1pdHRlZCddLAogIHNldHVwOiBmdW5jdGlvbiBzZXR1cChfX3Byb3BzLCBfcmVmKSB7CiAgICB2YXIgZW1pdCA9IF9yZWYuZW1pdDsKICAgIHZhciBwcm9wcyA9IF9fcHJvcHM7CiAgICB2YXIgbm9Qcm9tcHQgPSByZWYoZmFsc2UpOwogICAgdmFyIHNob3dEaWFsb2cgPSBjb21wdXRlZCh7CiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiBwcm9wcy5tb2RlbFZhbHVlOwogICAgICB9LAogICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHsKICAgICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHZhbCk7CiAgICAgIH0KICAgIH0pOwoKICAgIHZhciBzdWJtaXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKG5vUHJvbXB0LnZhbHVlKSB7CiAgICAgICAgICAgICAgICAgIENvb2tpZXMuc2V0KCdsaWNlbnNlVGlwVmlzaWJsZScsICdmYWxzZScsIHsKICAgICAgICAgICAgICAgICAgICBleHBpcmVzOiAzCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgQ29va2llcy5zZXQoJ2xpY2Vuc2VUaXBWaXNpYmxlJywgJ2ZhbHNlJyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc2hvd0RpYWxvZy52YWx1ZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgZW1pdCgnc3VibWl0dGVkJyk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CgogICAgICByZXR1cm4gZnVuY3Rpb24gc3VibWl0KCkgewogICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpOwoKICAgIHJldHVybiBmdW5jdGlvbiAoX2N0eCwgX2NhY2hlKSB7CiAgICAgIHZhciBfY29tcG9uZW50X2VtcXhfYnV0dG9uID0gX3Jlc29sdmVDb21wb25lbnQoImVtcXgtYnV0dG9uIik7CgogICAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX3VucmVmKEVsRGlhbG9nKSwgewogICAgICAgIG1vZGVsVmFsdWU6IF91bnJlZihzaG93RGlhbG9nKSwKICAgICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgcmV0dXJuIF9pc1JlZihzaG93RGlhbG9nKSA/IHNob3dEaWFsb2cudmFsdWUgPSAkZXZlbnQgOiBudWxsOwogICAgICAgIH0pLAogICAgICAgIHdpZHRoOiA1MDAsCiAgICAgICAgImN1c3RvbS1jbGFzcyI6ICJsaWNlbnNlLXRpcC1kaWFsb2ciLAogICAgICAgICJzaG93LWNsb3NlIjogZmFsc2UsCiAgICAgICAgdGl0bGU6ICcnLAogICAgICAgICJ6LWluZGV4IjogMjAwMAogICAgICB9LCB7CiAgICAgICAgZm9vdGVyOiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gW19jcmVhdGVFbGVtZW50Vk5vZGUoInNwYW4iLCBfaG9pc3RlZF8xMCwgW19jcmVhdGVWTm9kZShfdW5yZWYoRWxDaGVja2JveCksIHsKICAgICAgICAgICAgbW9kZWxWYWx1ZTogbm9Qcm9tcHQudmFsdWUsCiAgICAgICAgICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIG5vUHJvbXB0LnZhbHVlID0gJGV2ZW50OwogICAgICAgICAgICB9KSwKICAgICAgICAgICAgbGFiZWw6IF9jdHguJHQoJ2FkbWluLm5vUHJvbXB0JyksCiAgICAgICAgICAgIGNsYXNzOiAibm8tcHJvbXB0IgogICAgICAgICAgfSwgbnVsbCwgOCwgWyJtb2RlbFZhbHVlIiwgImxhYmVsIl0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2J1dHRvbiwgewogICAgICAgICAgICB0eXBlOiAicHJpbWFyeSIsCiAgICAgICAgICAgIHNpemU6ICJzbWFsbCIsCiAgICAgICAgICAgIG9uQ2xpY2s6IHN1Ym1pdAogICAgICAgICAgfSwgewogICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIFtfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcoX2N0eC4kdCgnYWRtaW4ua29udycpKSwgMSldOwogICAgICAgICAgICB9KSwKICAgICAgICAgICAgXzogMQogICAgICAgICAgfSldKV07CiAgICAgICAgfSksCiAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgX2hvaXN0ZWRfMSwgWyFfX3Byb3BzLmlzSGFzTGljZW5zZSA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soInNwYW4iLCB7CiAgICAgICAgICAgIGtleTogMCwKICAgICAgICAgICAgaW5uZXJIVE1MOiBfY3R4LiR0KCdhZG1pbi5saWNlbnNlRXZhbHVhdGlvblRpcCcpCiAgICAgICAgICB9LCBudWxsLCA4LCBfaG9pc3RlZF8yKSkgOiBfX3Byb3BzLmlzSGFzTGljZW5zZSA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soInNwYW4iLCBfaG9pc3RlZF8zLCBbX19wcm9wcy5pc0xpY2Vuc2VJbnZhbGlkID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygic3BhbiIsIHsKICAgICAgICAgICAga2V5OiAwLAogICAgICAgICAgICBpbm5lckhUTUw6IF9jdHguJHQoJ2FkbWluLmxpY2Vuc2VJbnZhbGlkVGlwJykKICAgICAgICAgIH0sIG51bGwsIDgsIF9ob2lzdGVkXzQpKSA6IF9fcHJvcHMuaXNMaWNlbnNlRXhwaXJ5ID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygic3BhbiIsIHsKICAgICAgICAgICAga2V5OiAxLAogICAgICAgICAgICBpbm5lckhUTUw6IF9jdHguJHQoJ2FkbWluLmxpY2Vuc2VFeHBpcnlUaXAnKQogICAgICAgICAgfSwgbnVsbCwgOCwgX2hvaXN0ZWRfNSkpIDogX19wcm9wcy5pc092ZXJNYXhpbXVtTm9kZXMgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJzcGFuIiwgewogICAgICAgICAgICBrZXk6IDIsCiAgICAgICAgICAgIGlubmVySFRNTDogX2N0eC4kdCgnYWRtaW4ubGljZW5zZU92ZXJNYXhpbXVtTm9kZXNUaXAnKQogICAgICAgICAgfSwgbnVsbCwgOCwgX2hvaXN0ZWRfNikpIDogX19wcm9wcy5pc092ZXJNYXhpbXVtVGFncyA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soInNwYW4iLCB7CiAgICAgICAgICAgIGtleTogMywKICAgICAgICAgICAgaW5uZXJIVE1MOiBfY3R4LiR0KCdhZG1pbi5saWNlbnNlT3Zlck1heGltdW1UYWdzVGlwJykKICAgICAgICAgIH0sIG51bGwsIDgsIF9ob2lzdGVkXzcpKSA6IF9fcHJvcHMuaXNIYXJkd2FyZU1pc21hdGNoID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygic3BhbiIsIHsKICAgICAgICAgICAga2V5OiA0LAogICAgICAgICAgICBpbm5lckhUTUw6IF9jdHguJHQoJ2FkbWluLmxpY2Vuc2VIYXJkd2FyZU1pc21hdGNoVGlwJykKICAgICAgICAgIH0sIG51bGwsIDgsIF9ob2lzdGVkXzgpKSA6IF9fcHJvcHMuaXNMaWNlbnNlUmVhZHlFeHBpcnkgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJzcGFuIiwgewogICAgICAgICAgICBrZXk6IDUsCiAgICAgICAgICAgIGlubmVySFRNTDogX2N0eC4kdCgnYWRtaW4ubGljZW5zZVJlYWR5RXhwaXJ5VGlwJykKICAgICAgICAgIH0sIG51bGwsIDgsIF9ob2lzdGVkXzkpKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoIiIsIHRydWUpXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIiwgdHJ1ZSldKV07CiAgICAgICAgfSksCiAgICAgICAgXzogMQogICAgICB9LCA4LCBbIm1vZGVsVmFsdWUiXSk7CiAgICB9OwogIH0KfSk7"},null]}