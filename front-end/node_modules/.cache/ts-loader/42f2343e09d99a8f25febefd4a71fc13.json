{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js!/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js!/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js??ref--14-3!/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/ulrich/neuron-dashboard/src/views/config/southDriver/components/SouthDriveItemCard.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/views/config/southDriver/components/SouthDriveItemCard.vue","mtime":1708521072013},{"path":"/home/ulrich/neuron-dashboard/babel.config.js","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1705331057587},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/vue-loader-v16/dist/index.js","mtime":1705331083369}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3VscmljaC9uZXVyb24tZGFzaGJvYXJkL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IGFzIF9kZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnOwppbXBvcnQgeyB0b0Rpc3BsYXlTdHJpbmcgYXMgX3RvRGlzcGxheVN0cmluZywgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHVucmVmIGFzIF91bnJlZiwgd2l0aE1vZGlmaWVycyBhcyBfd2l0aE1vZGlmaWVycywgd2l0aEN0eCBhcyBfd2l0aEN0eCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIGlzUmVmIGFzIF9pc1JlZiwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwppbXBvcnQgX2ltcG9ydHNfMCBmcm9tICdAL2Fzc2V0cy9pbWFnZXMvc3RhdGlzdGljcy5wbmcnOwppbXBvcnQgX2ltcG9ydHNfMSBmcm9tICdAL2Fzc2V0cy9pbWFnZXMvZGVidWctbG9nLWljb24ucG5nJzsKCnZhciBfd2l0aFNjb3BlSWQgPSBmdW5jdGlvbiBfd2l0aFNjb3BlSWQobikgewogIHJldHVybiBfcHVzaFNjb3BlSWQoImRhdGEtdi02NzE0Njc1YyIpLCBuID0gbigpLCBfcG9wU2NvcGVJZCgpLCBuOwp9OwoKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJub2RlLWl0ZW0taGQgY29tbW9uLWZsZXgiCn07CnZhciBfaG9pc3RlZF8yID0gewogIGNsYXNzOiAic291dGgtZHJpdmUtaXRlbS1uYW1lIGVsbGlwc2lzIgp9Owp2YXIgX2hvaXN0ZWRfMyA9IHsKICBjbGFzczogInNldHVwLWl0ZW0taGFuZGxlcnMiCn07Cgp2YXIgX2hvaXN0ZWRfNCA9IC8qI19fUFVSRV9fKi9fd2l0aFNjb3BlSWQoZnVuY3Rpb24gKCkgewogIHJldHVybiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaW1nIiwgewogICAgY2xhc3M6ICJvcGVyYXRpb24taW1hZ2UgaWNvbi1pbWFnZSBpbWctc3RhdGlzdGljLWxvZyIsCiAgICBzcmM6IF9pbXBvcnRzXzAsCiAgICBhbHQ6ICJkZWJ1Zy1sb2ciCiAgfSwgbnVsbCwgLTEpOwp9KTsKCnZhciBfaG9pc3RlZF81ID0gW19ob2lzdGVkXzRdOwoKdmFyIF9ob2lzdGVkXzYgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImkiLCB7CiAgICBjbGFzczogImVsLWljb24tbW9yZSIKICB9LCBudWxsLCAtMSk7Cn0pOwoKdmFyIF9ob2lzdGVkXzcgPSBbX2hvaXN0ZWRfNl07Cgp2YXIgX2hvaXN0ZWRfOCA9IC8qI19fUFVSRV9fKi9fd2l0aFNjb3BlSWQoZnVuY3Rpb24gKCkgewogIHJldHVybiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaSIsIHsKICAgIGNsYXNzOiAiZWwtaWNvbi1lZGl0LW91dGxpbmUgb3BlcmF0aW9uLWljb24iCiAgfSwgbnVsbCwgLTEpOwp9KTsKCnZhciBfaG9pc3RlZF85ID0gLyojX19QVVJFX18qL193aXRoU2NvcGVJZChmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJpbWciLCB7CiAgICBjbGFzczogIm9wZXJhdGlvbi1pbWFnZSIsCiAgICBzcmM6IF9pbXBvcnRzXzEsCiAgICBhbHQ6ICJkZWJ1Zy1sb2ciCiAgfSwgbnVsbCwgLTEpOwp9KTsKCnZhciBfaG9pc3RlZF8xMCA9IC8qI19fUFVSRV9fKi9fd2l0aFNjb3BlSWQoZnVuY3Rpb24gKCkgewogIHJldHVybiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaSIsIHsKICAgIGNsYXNzOiAiaWNvbmZvbnQgaWNvbmRlbGV0ZSBvcGVyYXRpb24taWNvbiIKICB9LCBudWxsLCAtMSk7Cn0pOwoKdmFyIF9ob2lzdGVkXzExID0gewogIGNsYXNzOiAibm9kZS1pdGVtLWluZm8tcm93IGNvbW1vbi1mbGV4Igp9Owp2YXIgX2hvaXN0ZWRfMTIgPSB7CiAgY2xhc3M6ICJjb21tb24tZmxleCIKfTsKdmFyIF9ob2lzdGVkXzEzID0gewogIGNsYXNzOiAiaWNvbmZvbnQgaWNvbi1zdmciLAogICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgp9Owp2YXIgX2hvaXN0ZWRfMTQgPSBbInhsaW5rOmhyZWYiXTsKdmFyIF9ob2lzdGVkXzE1ID0gewogIGNsYXNzOiAiY29tbW9uLWZsZXgiCn07CnZhciBfaG9pc3RlZF8xNiA9IHsKICBjbGFzczogIm5vZGUtaXRlbS1pbmZvLXJvdyIKfTsKdmFyIF9ob2lzdGVkXzE3ID0gewogIGNsYXNzOiAibm9kZS1pdGVtLWluZm8tcm93Igp9Owp2YXIgX2hvaXN0ZWRfMTggPSB7CiAgY2xhc3M6ICJub2RlLWl0ZW0taW5mby1yb3ciCn07CmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJzsKaW1wb3J0IHsgdXNlRHJpdmVyU3RhdHVzLCB1c2VOb2RlU3RhcnRTdG9wU3RhdHVzLCBkYXRhU3RhdGlzdGljcywgdXNlRHJpdmVyTmFtZSB9IGZyb20gJ0AvY29tcG9zYWJsZXMvY29uZmlnL3VzZURyaXZlcic7CmltcG9ydCB1c2VTb3V0aERyaXZlciBmcm9tICdAL2NvbXBvc2FibGVzL2NvbmZpZy91c2VTb3V0aERyaXZlcic7CmltcG9ydCB7IE5vZGVDYXRvZ2VyeSB9IGZyb20gJ0AvdHlwZXMvZW51bXMnOwppbXBvcnQgQUNvbVdpdGhEZXNjIGZyb20gJ0AvY29tcG9uZW50cy9BQ29tV2l0aERlc2MudnVlJzsKaW1wb3J0IERhdGFTdGF0aXN0aWNzRHJhd2VyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZGF0YVN0YXRpc3RpY3NEcmF3ZXIudnVlJzsKZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL19kZWZpbmVDb21wb25lbnQoewogIHByb3BzOiB7CiAgICBkYXRhOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0KICB9LAogIGVtaXRzOiBbJ3RvZ2dsZVN0YXR1cycsICdjbGlja09wZXJhdGlvbiddLAogIHNldHVwOiBmdW5jdGlvbiBzZXR1cChfX3Byb3BzLCBfcmVmKSB7CiAgICB2YXIgZW1pdCA9IF9yZWYuZW1pdDsKICAgIHZhciBwcm9wcyA9IF9fcHJvcHM7CgogICAgdmFyIF91c2VTb3V0aERyaXZlciA9IHVzZVNvdXRoRHJpdmVyKGZhbHNlKSwKICAgICAgICBnb0dyb3VwUGFnZSA9IF91c2VTb3V0aERyaXZlci5nb0dyb3VwUGFnZSwKICAgICAgICBnb05vZGVDb25maWcgPSBfdXNlU291dGhEcml2ZXIuZ29Ob2RlQ29uZmlnOwoKICAgIHZhciBfdXNlRHJpdmVyU3RhdHVzID0gdXNlRHJpdmVyU3RhdHVzKHByb3BzKSwKICAgICAgICBzdGF0dXNJY29uID0gX3VzZURyaXZlclN0YXR1cy5zdGF0dXNJY29uLAogICAgICAgIHN0YXR1c1RleHQgPSBfdXNlRHJpdmVyU3RhdHVzLnN0YXR1c1RleHQsCiAgICAgICAgY29ubmVjdGlvblN0YXR1c1RleHQgPSBfdXNlRHJpdmVyU3RhdHVzLmNvbm5lY3Rpb25TdGF0dXNUZXh0OwoKICAgIHZhciBfdXNlTm9kZVN0YXJ0U3RvcFN0YXQgPSB1c2VOb2RlU3RhcnRTdG9wU3RhdHVzKCksCiAgICAgICAgY291bnROb2RlU3RhcnRTdG9wU3RhdHVzID0gX3VzZU5vZGVTdGFydFN0b3BTdGF0LmNvdW50Tm9kZVN0YXJ0U3RvcFN0YXR1czsKCiAgICB2YXIgX3VzZURyaXZlck5hbWUgPSB1c2VEcml2ZXJOYW1lKCksCiAgICAgICAgaXNNb25pdG9yTm9kZSA9IF91c2VEcml2ZXJOYW1lLmlzTW9uaXRvck5vZGU7CgogICAgdmFyIG5vZGVTdGFydFN0b3BTdGF0dXMgPSBjb21wdXRlZCh7CiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiBjb3VudE5vZGVTdGFydFN0b3BTdGF0dXMocHJvcHMuZGF0YSk7CiAgICAgIH0sCiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkgewogICAgICAgIGVtaXQoJ3RvZ2dsZVN0YXR1cycsIHZhbCk7CiAgICAgIH0KICAgIH0pOyAvLyBkYXRhU3RhdGlzdGljcwoKICAgIHZhciBfZGF0YVN0YXRpc3RpY3MgPSBkYXRhU3RhdGlzdGljcygpLAogICAgICAgIGlzU2hvd0RhdGFTdGF0aXN0aWNzID0gX2RhdGFTdGF0aXN0aWNzLmlzU2hvd0RhdGFTdGF0aXN0aWNzLAogICAgICAgIGRhdGFTdGF0aXN0aWNzVmlzaWFibGUgPSBfZGF0YVN0YXRpc3RpY3MuZGF0YVN0YXRpc3RpY3NWaXNpYWJsZTsgLy8gbW9yZSBvcGVyYXRvcnMKCgogICAgdmFyIGhhbmRsZUNsaWNrT3BlcmF0b3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoY29tbWFuZCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGVtaXQoJ2NsaWNrT3BlcmF0aW9uJywgY29tbWFuZCk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CgogICAgICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlQ2xpY2tPcGVyYXRvcihfeCkgewogICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpOwoKICAgIHJldHVybiBmdW5jdGlvbiAoX2N0eCwgX2NhY2hlKSB7CiAgICAgIHZhciBfY29tcG9uZW50X2VtcXhfZHJvcGRvd25faXRlbSA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbXF4LWRyb3Bkb3duLWl0ZW0iKTsKCiAgICAgIHZhciBfY29tcG9uZW50X2VtcXhfZHJvcGRvd25fbWVudSA9IF9yZXNvbHZlQ29tcG9uZW50KCJlbXF4LWRyb3Bkb3duLW1lbnUiKTsKCiAgICAgIHZhciBfY29tcG9uZW50X2VtcXhfZHJvcGRvd24gPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC1kcm9wZG93biIpOwoKICAgICAgdmFyIF9jb21wb25lbnRfZW1xeF9zd2l0Y2ggPSBfcmVzb2x2ZUNvbXBvbmVudCgiZW1xeC1zd2l0Y2giKTsKCiAgICAgIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgewogICAgICAgIGNsYXNzOiAibm9kZS1jYXJkIHNvdXRoLWRyaXZlLWl0ZW0tY2FyZCIsCiAgICAgICAgb25DbGljazogX2NhY2hlWzVdIHx8IChfY2FjaGVbNV0gPSBfd2l0aE1vZGlmaWVycyhmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICByZXR1cm4gX3VucmVmKGdvR3JvdXBQYWdlKShfX3Byb3BzLmRhdGEpOwogICAgICAgIH0sIFsic3RvcCIsICJwcmV2ZW50Il0pKQogICAgICB9LCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoInAiLCBfaG9pc3RlZF8yLCBfdG9EaXNwbGF5U3RyaW5nKF9fcHJvcHMuZGF0YS5uYW1lKSwgMSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzMsIFtfY3JlYXRlVk5vZGUoQUNvbVdpdGhEZXNjLCB7CiAgICAgICAgY29udGVudDogX2N0eC4kdCgnY29uZmlnLmRldmljZUNvbmZpZycpCiAgICAgIH0sIHsKICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gW19jcmVhdGVFbGVtZW50Vk5vZGUoImkiLCB7CiAgICAgICAgICAgIGNsYXNzOiAiaWNvbmZvbnQgaWNvbnNldHRpbmciLAogICAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9IF93aXRoTW9kaWZpZXJzKGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX3VucmVmKGdvTm9kZUNvbmZpZykocHJvcHMuZGF0YSk7CiAgICAgICAgICAgIH0sIFsic3RvcCJdKSkKICAgICAgICAgIH0pXTsKICAgICAgICB9KSwKICAgICAgICBfOiAxCiAgICAgIH0sIDgsIFsiY29udGVudCJdKSwgX2NyZWF0ZVZOb2RlKEFDb21XaXRoRGVzYywgewogICAgICAgIGNvbnRlbnQ6IF9jdHguJHQoJ2NvbmZpZy5kYXRhU3RhdGlzdGljcycpCiAgICAgIH0sIHsKICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gW19jcmVhdGVFbGVtZW50Vk5vZGUoInNwYW4iLCB7CiAgICAgICAgICAgIG9uQ2xpY2s6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gX3dpdGhNb2RpZmllcnMoZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdW5yZWYoaXNTaG93RGF0YVN0YXRpc3RpY3MpKF9fcHJvcHMuZGF0YSk7CiAgICAgICAgICAgIH0sIFsic3RvcCJdKSkKICAgICAgICAgIH0sIF9ob2lzdGVkXzUpXTsKICAgICAgICB9KSwKICAgICAgICBfOiAxCiAgICAgIH0sIDgsIFsiY29udGVudCJdKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZW1xeF9kcm9wZG93biwgewogICAgICAgIHRyaWdnZXI6ICJjbGljayIsCiAgICAgICAgb25Db21tYW5kOiBoYW5kbGVDbGlja09wZXJhdG9yCiAgICAgIH0sIHsKICAgICAgICBkcm9wZG93bjogX3dpdGhDdHgoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2Ryb3Bkb3duX21lbnUsIG51bGwsIHsKICAgICAgICAgICAgZGVmYXVsdDogX3dpdGhDdHgoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHJldHVybiBbIV91bnJlZihpc01vbml0b3JOb2RlKShfX3Byb3BzLmRhdGEubmFtZSkgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9lbXF4X2Ryb3Bkb3duX2l0ZW0sIHsKICAgICAgICAgICAgICAgIGtleTogMCwKICAgICAgICAgICAgICAgIGNsYXNzOiAib3BlcmF0aW9uLWl0ZW0td3JhcCIsCiAgICAgICAgICAgICAgICBjb21tYW5kOiAiZWRpdCIKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBbX2hvaXN0ZWRfOCwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoX2N0eC4kdCgiY29tbW9uLmVkaXQiKSksIDEpXTsKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgIH0pKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoIiIsIHRydWUpLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2Ryb3Bkb3duX2l0ZW0sIHsKICAgICAgICAgICAgICAgIGNsYXNzOiAib3BlcmF0aW9uLWl0ZW0td3JhcCIsCiAgICAgICAgICAgICAgICBjb21tYW5kOiAiZGVidWdMb2dMZXZlbCIKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBbX2hvaXN0ZWRfOSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoX2N0eC4kdCgiY29uZmlnLnVwZGF0ZURlYnVnTG9nTGV2ZWwiKSksIDEpXTsKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgXzogMQogICAgICAgICAgICAgIH0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbXF4X2Ryb3Bkb3duX2l0ZW0sIHsKICAgICAgICAgICAgICAgIGNsYXNzOiAib3BlcmF0aW9uLWl0ZW0td3JhcCIsCiAgICAgICAgICAgICAgICBjb21tYW5kOiAiZGVsZXRlIgogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIFtfaG9pc3RlZF8xMCwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoX2N0eC4kdCgiY29tbW9uLmRlbGV0ZSIpKSwgMSldOwogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfOiAxCiAgICAgICAgICAgICAgfSldOwogICAgICAgICAgICB9KSwKICAgICAgICAgICAgXzogMQogICAgICAgICAgfSldOwogICAgICAgIH0pLAogICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBbX2NyZWF0ZVZOb2RlKEFDb21XaXRoRGVzYywgewogICAgICAgICAgICBjb250ZW50OiBfY3R4LiR0KCdjb21tb24ubW9yZScpCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICByZXR1cm4gW19jcmVhdGVFbGVtZW50Vk5vZGUoInNwYW4iLCB7CiAgICAgICAgICAgICAgICBjbGFzczogImVsLWRyb3Bkb3duLWxpbmsiLAogICAgICAgICAgICAgICAgb25DbGljazogX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSBfd2l0aE1vZGlmaWVycyhmdW5jdGlvbiAoKSB7fSwgWyJzdG9wIl0pKQogICAgICAgICAgICAgIH0sIF9ob2lzdGVkXzcpXTsKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF86IDEKICAgICAgICAgIH0sIDgsIFsiY29udGVudCJdKV07CiAgICAgICAgfSksCiAgICAgICAgXzogMQogICAgICB9KV0pXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIG51bGwsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xMSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzEyLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgibGFiZWwiLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKF9jdHguJHQoJ2NvbmZpZy53b3JrU3RhdHVzJykpICsgIjoiLCAxKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgbnVsbCwgWyhfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soInN2ZyIsIF9ob2lzdGVkXzEzLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgidXNlIiwgewogICAgICAgICJ4bGluazpocmVmIjogIiMiLmNvbmNhdChfdW5yZWYoc3RhdHVzSWNvbikpCiAgICAgIH0sIG51bGwsIDgsIF9ob2lzdGVkXzE0KV0pKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoX3VucmVmKHN0YXR1c1RleHQpKSwgMSldKV0pLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xNSwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2VtcXhfc3dpdGNoLCB7CiAgICAgICAgbW9kZWxWYWx1ZTogX3VucmVmKG5vZGVTdGFydFN0b3BTdGF0dXMpLAogICAgICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzNdIHx8IChfY2FjaGVbM10gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICByZXR1cm4gX2lzUmVmKG5vZGVTdGFydFN0b3BTdGF0dXMpID8gbm9kZVN0YXJ0U3RvcFN0YXR1cy52YWx1ZSA9ICRldmVudCA6IG51bGw7CiAgICAgICAgfSksCiAgICAgICAgb25DbGljazogX2NhY2hlWzRdIHx8IChfY2FjaGVbNF0gPSBfd2l0aE1vZGlmaWVycyhmdW5jdGlvbiAoKSB7fSwgWyJzdG9wIl0pKQogICAgICB9LCBudWxsLCA4LCBbIm1vZGVsVmFsdWUiXSldKV0pLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xNiwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImxhYmVsIiwgbnVsbCwgX3RvRGlzcGxheVN0cmluZyhfY3R4LiR0KCdjb25maWcuY29ubmVjdGlvblN0YXR1cycpKSArICI6IiwgMSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoInNwYW4iLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKF91bnJlZihjb25uZWN0aW9uU3RhdHVzVGV4dCkpLCAxKV0pLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xNywgW19jcmVhdGVFbGVtZW50Vk5vZGUoImxhYmVsIiwgbnVsbCwgX3RvRGlzcGxheVN0cmluZyhfY3R4LiR0KCdjb25maWcuZGVsYXlUaW1lJykpICsgIjogIiwgMSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoInNwYW4iLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKF9fcHJvcHMuZGF0YS5ydHQpICsgIiAiICsgX3RvRGlzcGxheVN0cmluZyhfY3R4LiR0KCdjb21tb24ubXMnKSksIDEpXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzE4LCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgibGFiZWwiLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKF9jdHguJHQoJ2NvbmZpZy5wbHVnaW4nKSkgKyAiOiAiLCAxKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoX19wcm9wcy5kYXRhLnBsdWdpbiksIDEpXSldKV0pLCBfdW5yZWYoZGF0YVN0YXRpc3RpY3NWaXNpYWJsZSkgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soRGF0YVN0YXRpc3RpY3NEcmF3ZXIsIHsKICAgICAgICBrZXk6IDAsCiAgICAgICAgbW9kZWxWYWx1ZTogX3VucmVmKGRhdGFTdGF0aXN0aWNzVmlzaWFibGUpLAogICAgICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzZdIHx8IChfY2FjaGVbNl0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICByZXR1cm4gX2lzUmVmKGRhdGFTdGF0aXN0aWNzVmlzaWFibGUpID8gZGF0YVN0YXRpc3RpY3NWaXNpYWJsZS52YWx1ZSA9ICRldmVudCA6IG51bGw7CiAgICAgICAgfSksCiAgICAgICAgdHlwZTogX3VucmVmKE5vZGVDYXRvZ2VyeSkuU291dGgsCiAgICAgICAgIm5vZGUtbmFtZSI6IF9fcHJvcHMuZGF0YS5uYW1lCiAgICAgIH0sIG51bGwsIDgsIFsibW9kZWxWYWx1ZSIsICJ0eXBlIiwgIm5vZGUtbmFtZSJdKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCIiLCB0cnVlKV0sIDY0KTsKICAgIH07CiAgfQp9KTs="},null]}