{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js!/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js!/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js??ref--14-3!/home/ulrich/neuron-dashboard/src/composables/data/useWriteDataCheckNParse.ts","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/composables/data/useWriteDataCheckNParse.ts","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/babel.config.js","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1705331057587},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvaG9tZS91bHJpY2gvbmV1cm9uLWRhc2hib2FyZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvdWxyaWNoL25ldXJvbi1kYXNoYm9hcmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudGVzdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyI7CgovKgpCWVRFCSAgICAyICAgSGV4YWRlY2ltYWwgc3RyaW5nCgpJTlQ4CSAgICAzICAgLTEyOCB0byAxMjcKSU5UMTYJICAgIDQgICAtMzIsNzY4IHRvIDMyLDc2NwpJTlQzMgkgICAgNSAgIC0yLDE0Nyw0ODMsNjQ4IHRvIDIsMTQ3LDQ4Myw2NDcKSU5UNjQJICAgIDYgICAtOSwyMjMsMzcyLDAzNiw4NTQsNzc1LDgwOCB0byA5LDIyMywzNzIsMDM2LDg1NCw3NzUsODA3CgpVSU5UOAkgICAgNyAgIDAgdG8gMjU1ClVJTlQxNgkgIDggICAwIHRvIDY1LDUzNQpVSU5UMzIJICA5ICAgMCB0byA0LDI5NCw5NjcsMjk1ClVJTlQ2NAkgIDEwICAwIHRvIDE4LDQ0Niw3NDQsMDczLDcwOSw1NTEsNjE1CgpGTE9BVAkgICAgMTEgIC0xLjE3NTQ5NDM1MSBFIC0gMzgJMy40MDI4MjM0NjYgRSArIDM4IFRPRE86CkRPVUJMRQkgIDEyICAyLjIyNTA3Mzg1ODUwNzIwMTQgRSAtIDMwOAkxLjc5NzY5MzEzNDg2MjMxNTggRSArIDMwOCBUT0RPOgoKQk9PTAkgICAgMTMgIHRydWUgZmFsc2UKQklUCSAgICAgIDE0ICBCaW5hcnkgbnVtYmVyClNUUklORyAgICAxNSAgc3RyaW5nCiovCmltcG9ydCB7IFRhZ1R5cGUgfSBmcm9tICdAL3R5cGVzL2VudW1zJzsKaW1wb3J0IHsgSEVYQURFQ0lNQUxfUFJFRklYIH0gZnJvbSAnQC91dGlscy9jb25zdGFudHMnOwppbXBvcnQgeyBCWVRFU19SRUdFWCwgRkxPQVRfUkVHRVgsIEJJVF9SRUdFWCwgSU5UX1JFR0VYIH0gZnJvbSAnQC91dGlscy9yZWdleHBzJzsKaW1wb3J0IHsgdHJhbnNGbG9hdE51bWJlclRvSGV4LCB0cmFuc05lZ2F0aXZlTnVtYmVyVG9IZXgsIHRyYW5zUG9zaXRpdmVJbnRlZ2VyVG9IZXgsIHRyYW5zRmxvYXRIZXhUb0RlY2ltYWxOdW0sIHRyYW5zVWludEhleFRvRGVjaW1hbE51bSwgdHJhbnNJbnRIZXhUb0RlY2ltYWxOdW0gfSBmcm9tICcuL2NvbnZlcnQnOwppbXBvcnQgeyBpc0pTT05EYXRhIH0gZnJvbSAnQC91dGlscy91dGlscyc7CmV4cG9ydCB2YXIgV3JpdGVEYXRhRXJyb3JDb2RlOwoKKGZ1bmN0aW9uIChXcml0ZURhdGFFcnJvckNvZGUpIHsKICBXcml0ZURhdGFFcnJvckNvZGVbV3JpdGVEYXRhRXJyb3JDb2RlWyJGb3JtYXR0aW5nRXJyb3IiXSA9IDFdID0gIkZvcm1hdHRpbmdFcnJvciI7CiAgV3JpdGVEYXRhRXJyb3JDb2RlW1dyaXRlRGF0YUVycm9yQ29kZVsiTGVzc1RoYW5NaW5pbXVtIl0gPSAyXSA9ICJMZXNzVGhhbk1pbmltdW0iOwogIFdyaXRlRGF0YUVycm9yQ29kZVtXcml0ZURhdGFFcnJvckNvZGVbIkdyZWF0ZXJUaGFuTWF4aW11bSJdID0gM10gPSAiR3JlYXRlclRoYW5NYXhpbXVtIjsKICBXcml0ZURhdGFFcnJvckNvZGVbV3JpdGVEYXRhRXJyb3JDb2RlWyJMZXNzVGhhbk1pblNhZmVJbnRlZ2VyIl0gPSA0XSA9ICJMZXNzVGhhbk1pblNhZmVJbnRlZ2VyIjsKICBXcml0ZURhdGFFcnJvckNvZGVbV3JpdGVEYXRhRXJyb3JDb2RlWyJHcmVhdGVyVGhhbk1heFNhZmVJbnRlZ2VyIl0gPSA1XSA9ICJHcmVhdGVyVGhhbk1heFNhZmVJbnRlZ2VyIjsKICBXcml0ZURhdGFFcnJvckNvZGVbV3JpdGVEYXRhRXJyb3JDb2RlWyJCWVRFU1ZhbHVlTGVuZ3RoRXJyb3IiXSA9IDZdID0gIkJZVEVTVmFsdWVMZW5ndGhFcnJvciI7Cn0pKFdyaXRlRGF0YUVycm9yQ29kZSB8fCAoV3JpdGVEYXRhRXJyb3JDb2RlID0ge30pKTsKCmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoKSB7CiAgdmFyIGlzV3JpdGVWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTsKCiAgdmFyIGNyZWF0ZUludFR5cGVSYW5nZSA9IGZ1bmN0aW9uIGNyZWF0ZUludFR5cGVSYW5nZShiaXRzTnVtKSB7CiAgICByZXR1cm4gewogICAgICBNSU46IC1NYXRoLnBvdygyLCBiaXRzTnVtIC0gMSksCiAgICAgIE1BWDogTWF0aC5wb3coMiwgYml0c051bSAtIDEpIC0gMQogICAgfTsKICB9OwoKICB2YXIgY3JlYXRlVUludFR5cGVSYW5nZSA9IGZ1bmN0aW9uIGNyZWF0ZVVJbnRUeXBlUmFuZ2UoYml0c051bSkgewogICAgcmV0dXJuIHsKICAgICAgTUlOOiAwLAogICAgICBNQVg6IE1hdGgucG93KDIsIGJpdHNOdW0pIC0gMQogICAgfTsKICB9OwoKICB2YXIgSU5UOF9SQU5HRSA9IGNyZWF0ZUludFR5cGVSYW5nZSg4KTsKICB2YXIgSU5UMTZfUkFOR0UgPSBjcmVhdGVJbnRUeXBlUmFuZ2UoMTYpOwogIHZhciBJTlQzMl9SQU5HRSA9IGNyZWF0ZUludFR5cGVSYW5nZSgzMik7CiAgdmFyIElOVDY0X1JBTkdFID0gY3JlYXRlSW50VHlwZVJhbmdlKDY0KTsKICB2YXIgQllURVNfUkFOR0UgPSBjcmVhdGVVSW50VHlwZVJhbmdlKDgpOwogIHZhciBVSU5UOF9SQU5HRSA9IGNyZWF0ZVVJbnRUeXBlUmFuZ2UoOCk7CiAgdmFyIFVJTlQxNl9SQU5HRSA9IGNyZWF0ZVVJbnRUeXBlUmFuZ2UoMTYpOwogIHZhciBVSU5UMzJfUkFOR0UgPSBjcmVhdGVVSW50VHlwZVJhbmdlKDMyKTsKICB2YXIgVUlOVDY0X1JBTkdFID0gY3JlYXRlVUludFR5cGVSYW5nZSg2NCk7CgogIHZhciBjaGVja0J5dGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUodmFsdWUpIHsKICAgICAgdmFyIGFyclZhbHVlLCBpc0VsZW1lbnRBbGxJblJhbmdlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgaWYgKGlzV3JpdGVWYWx1ZSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVzb2x2ZSh0cnVlKSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIGlzSlNPTkRhdGEodmFsdWUpOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGFyclZhbHVlID0gSlNPTi5wYXJzZSh2YWx1ZSk7CgogICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyclZhbHVlKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihXcml0ZURhdGFFcnJvckNvZGUuRm9ybWF0dGluZ0Vycm9yLnRvU3RyaW5nKCkpKSk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgaXNFbGVtZW50QWxsSW5SYW5nZSA9IGFyclZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2KSB7CiAgICAgICAgICAgICAgICB2YXIgaXNJbnROdW1iZXIgPSBCWVRFU19SRUdFWC50ZXN0KFN0cmluZyh2KSk7CiAgICAgICAgICAgICAgICB2YXIgaXNJblJhbmdlID0gTnVtYmVyKHYpID49IEJZVEVTX1JBTkdFLk1JTiAmJiBOdW1iZXIodikgPD0gQllURVNfUkFOR0UuTUFYOwogICAgICAgICAgICAgICAgcmV0dXJuIGlzSW50TnVtYmVyICYmIGlzSW5SYW5nZTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgaWYgKGlzRWxlbWVudEFsbEluUmFuZ2UpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFdyaXRlRGF0YUVycm9yQ29kZS5Gb3JtYXR0aW5nRXJyb3IudG9TdHJpbmcoKSkpKTsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgaWYgKCEoYXJyVmFsdWUubGVuZ3RoID4gMTI4KSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoV3JpdGVEYXRhRXJyb3JDb2RlLkJZVEVTVmFsdWVMZW5ndGhFcnJvci50b1N0cmluZygpKSkpOwoKICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTg7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNTsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihXcml0ZURhdGFFcnJvckNvZGUuRm9ybWF0dGluZ0Vycm9yLnRvU3RyaW5nKCkpKSk7CgogICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVzb2x2ZSh0cnVlKSk7CgogICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzIsIDE1XV0pOwogICAgfSkpOwoKICAgIHJldHVybiBmdW5jdGlvbiBjaGVja0J5dGUoX3gpIHsKICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICB2YXIgY2hlY2tCaXQgPSBmdW5jdGlvbiBjaGVja0JpdCh2YWx1ZSkgewogICAgcmV0dXJuIEJJVF9SRUdFWC50ZXN0KHZhbHVlKSA/IFByb21pc2UucmVzb2x2ZSh0cnVlKSA6IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihXcml0ZURhdGFFcnJvckNvZGUuRm9ybWF0dGluZ0Vycm9yLnRvU3RyaW5nKCkpKTsKICB9OwoKICB2YXIgY2hlY2tJc0ludCA9IGZ1bmN0aW9uIGNoZWNrSXNJbnQodmFsdWUpIHsKICAgIHJldHVybiBJTlRfUkVHRVgudGVzdCh2YWx1ZSk7CiAgfTsKCiAgdmFyIGNoZWNrTGVzc1RoYW5NaW5pbXVtU2FmZU51bWJlciA9IGZ1bmN0aW9uIGNoZWNrTGVzc1RoYW5NaW5pbXVtU2FmZU51bWJlcih2YWx1ZSkgewogICAgcmV0dXJuIE51bWJlcih2YWx1ZSkgPCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUjsKICB9OwoKICB2YXIgY2hlY2tHcmVhdGVyVGhhbk1heGltdW1TYWZlTnVtYmVyID0gZnVuY3Rpb24gY2hlY2tHcmVhdGVyVGhhbk1heGltdW1TYWZlTnVtYmVyKHZhbHVlKSB7CiAgICByZXR1cm4gTnVtYmVyKHZhbHVlKSA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSOwogIH07CgogIHZhciBjaGVja0ludCA9IGZ1bmN0aW9uIGNoZWNrSW50KHJhbmdlT2JqLCB2YWx1ZSkgewogICAgdmFyIGVycm9yQ29kZTsKCiAgICBpZiAoIWNoZWNrSXNJbnQodmFsdWUpKSB7CiAgICAgIGVycm9yQ29kZSA9IFdyaXRlRGF0YUVycm9yQ29kZS5Gb3JtYXR0aW5nRXJyb3I7CiAgICB9IGVsc2UgaWYgKGNoZWNrTGVzc1RoYW5NaW5pbXVtU2FmZU51bWJlcih2YWx1ZSkpIHsKICAgICAgLyoqCiAgICAgICAqIEJlY2F1c2Ugd2hlbiB0aGUgZGF0YSBpcyBsYXJnZSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwKICAgICAgICogcGFzc2luZyBwYXJhbWV0ZXJzIHRvIHRoZSBpbnRlcmZhY2Ugd2lsbCBoYXZhIHRoZSBkYXRhIGVycm9yLAogICAgICAgKiBzbyBsaW1pdCB0aGUgbWF4aW11bSB2YWx1ZSBvZiB0aGUgaW5wdXQKICAgICAgICovCiAgICAgIGVycm9yQ29kZSA9IFdyaXRlRGF0YUVycm9yQ29kZS5MZXNzVGhhbk1pblNhZmVJbnRlZ2VyOwogICAgfSBlbHNlIGlmIChjaGVja0dyZWF0ZXJUaGFuTWF4aW11bVNhZmVOdW1iZXIodmFsdWUpKSB7CiAgICAgIGVycm9yQ29kZSA9IFdyaXRlRGF0YUVycm9yQ29kZS5HcmVhdGVyVGhhbk1heFNhZmVJbnRlZ2VyOwogICAgfSBlbHNlIGlmIChOdW1iZXIodmFsdWUpIDwgcmFuZ2VPYmouTUlOKSB7CiAgICAgIGVycm9yQ29kZSA9IFdyaXRlRGF0YUVycm9yQ29kZS5MZXNzVGhhbk1pbmltdW07CiAgICB9IGVsc2UgaWYgKE51bWJlcih2YWx1ZSkgPiByYW5nZU9iai5NQVgpIHsKICAgICAgZXJyb3JDb2RlID0gV3JpdGVEYXRhRXJyb3JDb2RlLkdyZWF0ZXJUaGFuTWF4aW11bTsKICAgIH0KCiAgICBpZiAoZXJyb3JDb2RlKSB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoZXJyb3JDb2RlLnRvU3RyaW5nKCkpKTsKICAgIH0KCiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpOwogIH07IC8vIFN1cHBvcnQgc2NpZW50aWZpYyBub3RhdGlvbgoKCiAgdmFyIGNoZWNrSXNGbG9hdCA9IGZ1bmN0aW9uIGNoZWNrSXNGbG9hdCh2YWx1ZSkgewogICAgcmV0dXJuIEZMT0FUX1JFR0VYLnRlc3QodmFsdWUpOwogIH07IC8vIGNvbnN0IGNoZWNrSXNGbG9hdCA9ICh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbiA9PiAvXi0/XGQqKFwuWzEtOV1cZCopJC8udGVzdCh2YWx1ZSkKCgogIHZhciBjaGVja0Zsb2F0ID0gZnVuY3Rpb24gY2hlY2tGbG9hdCh2YWx1ZSkgewogICAgaWYgKCFjaGVja0lzRmxvYXQodmFsdWUpKSB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoV3JpdGVEYXRhRXJyb3JDb2RlLkZvcm1hdHRpbmdFcnJvci50b1N0cmluZygpKSk7CiAgICB9CgogICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTsKICB9OwoKICB2YXIgY2hlY2tTdHJOQm9vbCA9IGZ1bmN0aW9uIGNoZWNrU3RyTkJvb2woKSB7CiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpOwogIH07CgogIHZhciBjaGVjayA9IGZ1bmN0aW9uIGNoZWNrKHR5cGUsIHZhbHVlKSB7CiAgICB2YXIgX2NoZWNrTWFwOwoKICAgIHZhciBjaGVja01hcCA9IChfY2hlY2tNYXAgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jaGVja01hcCwgVGFnVHlwZS5CWVRFUywgY2hlY2tCeXRlLmJpbmQobnVsbCwgdmFsdWUpKSwgX2RlZmluZVByb3BlcnR5KF9jaGVja01hcCwgVGFnVHlwZS5JTlQ4LCBjaGVja0ludC5iaW5kKG51bGwsIElOVDhfUkFOR0UsIHZhbHVlKSksIF9kZWZpbmVQcm9wZXJ0eShfY2hlY2tNYXAsIFRhZ1R5cGUuSU5UMTYsIGNoZWNrSW50LmJpbmQobnVsbCwgSU5UMTZfUkFOR0UsIHZhbHVlKSksIF9kZWZpbmVQcm9wZXJ0eShfY2hlY2tNYXAsIFRhZ1R5cGUuSU5UMzIsIGNoZWNrSW50LmJpbmQobnVsbCwgSU5UMzJfUkFOR0UsIHZhbHVlKSksIF9kZWZpbmVQcm9wZXJ0eShfY2hlY2tNYXAsIFRhZ1R5cGUuSU5UNjQsIGNoZWNrSW50LmJpbmQobnVsbCwgSU5UNjRfUkFOR0UsIHZhbHVlKSksIF9kZWZpbmVQcm9wZXJ0eShfY2hlY2tNYXAsIFRhZ1R5cGUuVUlOVDgsIGNoZWNrSW50LmJpbmQobnVsbCwgVUlOVDhfUkFOR0UsIHZhbHVlKSksIF9kZWZpbmVQcm9wZXJ0eShfY2hlY2tNYXAsIFRhZ1R5cGUuVUlOVDE2LCBjaGVja0ludC5iaW5kKG51bGwsIFVJTlQxNl9SQU5HRSwgdmFsdWUpKSwgX2RlZmluZVByb3BlcnR5KF9jaGVja01hcCwgVGFnVHlwZS5VSU5UMzIsIGNoZWNrSW50LmJpbmQobnVsbCwgVUlOVDMyX1JBTkdFLCB2YWx1ZSkpLCBfZGVmaW5lUHJvcGVydHkoX2NoZWNrTWFwLCBUYWdUeXBlLlVJTlQ2NCwgY2hlY2tJbnQuYmluZChudWxsLCBVSU5UNjRfUkFOR0UsIHZhbHVlKSksIF9kZWZpbmVQcm9wZXJ0eShfY2hlY2tNYXAsIFRhZ1R5cGUuRkxPQVQsIGNoZWNrRmxvYXQuYmluZChudWxsLCB2YWx1ZSkpLCBfZGVmaW5lUHJvcGVydHkoX2NoZWNrTWFwLCBUYWdUeXBlLkRPVUJMRSwgY2hlY2tGbG9hdC5iaW5kKG51bGwsIHZhbHVlKSksIF9kZWZpbmVQcm9wZXJ0eShfY2hlY2tNYXAsIFRhZ1R5cGUuQk9PTCwgY2hlY2tTdHJOQm9vbC5iaW5kKG51bGwpKSwgX2RlZmluZVByb3BlcnR5KF9jaGVja01hcCwgVGFnVHlwZS5CSVQsIGNoZWNrQml0LmJpbmQobnVsbCwgdmFsdWUpKSwgX2RlZmluZVByb3BlcnR5KF9jaGVja01hcCwgVGFnVHlwZS5TVFJJTkcsIGNoZWNrU3RyTkJvb2wuYmluZChudWxsKSksIF9kZWZpbmVQcm9wZXJ0eShfY2hlY2tNYXAsIFRhZ1R5cGUuV09SRCwgY2hlY2tJbnQuYmluZChudWxsLCBVSU5UMTZfUkFOR0UsIHZhbHVlKSksIF9kZWZpbmVQcm9wZXJ0eShfY2hlY2tNYXAsIFRhZ1R5cGUuRFdPUkQsIGNoZWNrSW50LmJpbmQobnVsbCwgVUlOVDMyX1JBTkdFLCB2YWx1ZSkpLCBfZGVmaW5lUHJvcGVydHkoX2NoZWNrTWFwLCBUYWdUeXBlLkxXT1JELCBjaGVja0ludC5iaW5kKG51bGwsIFVJTlQ2NF9SQU5HRSwgdmFsdWUpKSwgX2NoZWNrTWFwKTsKICAgIHJldHVybiBjaGVja01hcFt0eXBlXSgpOwogIH07CgogIHZhciBwYXJzZVdyaXRlRGF0YSA9IGZ1bmN0aW9uIHBhcnNlV3JpdGVEYXRhKHR5cGUsIHZhbHVlKSB7CiAgICBpZiAodHlwZSA9PT0gVGFnVHlwZS5TVFJJTkcgfHwgdHlwZSA9PT0gVGFnVHlwZS5CT09MKSB7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0KCiAgICBpZiAodHlwZSA9PT0gVGFnVHlwZS5CWVRFUykgewogICAgICByZXR1cm4gdmFsdWUgPyBKU09OLnBhcnNlKHZhbHVlKSA6IHZhbHVlOwogICAgfQoKICAgIHJldHVybiBOdW1iZXIodmFsdWUpOwogIH07CgogIHZhciBjaGVja1dyaXRlRGF0YSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHR5cGUsIHZhbHVlKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIGNoZWNrKHR5cGUsIHZhbHVlKSk7CgogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIGNoZWNrV3JpdGVEYXRhKF94MiwgX3gzKSB7CiAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICB9KCk7CgogIHZhciBjaGVja0hleGFkZWNpbWFsID0gZnVuY3Rpb24gY2hlY2tIZXhhZGVjaW1hbCh2YWx1ZSkgewogICAgdmFyIHN0ciA9IHZhbHVlLnNsaWNlKDAsIEhFWEFERUNJTUFMX1BSRUZJWC5sZW5ndGgpLnRvTG93ZXJDYXNlKCkgPT09IEhFWEFERUNJTUFMX1BSRUZJWCA/IHZhbHVlIDogSEVYQURFQ0lNQUxfUFJFRklYICsgdmFsdWU7CiAgICByZXR1cm4gY2hlY2tCeXRlKHN0cik7CiAgfTsKCiAgdmFyIHRyYW5zVG9EZWNpbWFsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTModGFnRGF0YSkgewogICAgICB2YXIgdmFsdWUsIHR5cGUsIHN0ciwgaGV4U3RyOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHZhbHVlID0gdGFnRGF0YS52YWx1ZSwgdHlwZSA9IHRhZ0RhdGEudHlwZTsKICAgICAgICAgICAgICBzdHIgPSB2YWx1ZS5zbGljZSgwLCBIRVhBREVDSU1BTF9QUkVGSVgubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBIRVhBREVDSU1BTF9QUkVGSVggPyB2YWx1ZSA6IEhFWEFERUNJTUFMX1BSRUZJWCArIHZhbHVlOwogICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMjsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrQnl0ZShzdHIpOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGhleFN0ciA9IHN0ci5zbGljZShIRVhBREVDSU1BTF9QUkVGSVgubGVuZ3RoKTsKCiAgICAgICAgICAgICAgaWYgKCEodHlwZSA9PT0gVGFnVHlwZS5GTE9BVCB8fCB0eXBlID09PSBUYWdUeXBlLkRPVUJMRSkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gODsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHRyYW5zRmxvYXRIZXhUb0RlY2ltYWxOdW0oaGV4U3RyLCB0eXBlKSk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgaWYgKCEodHlwZSA9PT0gVGFnVHlwZS5VSU5UOCB8fCB0eXBlID09PSBUYWdUeXBlLlVJTlQxNiB8fCB0eXBlID09PSBUYWdUeXBlLlVJTlQzMiB8fCB0eXBlID09PSBUYWdUeXBlLlVJTlQ2NCkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCB0cmFuc1VpbnRIZXhUb0RlY2ltYWxOdW0oaGV4U3RyLCB0eXBlKSk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCB0cmFuc0ludEhleFRvRGVjaW1hbE51bShoZXhTdHIpKTsKCiAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAxMzsKICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHZhbHVlKTsKCiAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMywgbnVsbCwgW1syLCAxM11dKTsKICAgIH0pKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gdHJhbnNUb0RlY2ltYWwoX3g0KSB7CiAgICAgIHJldHVybiBfcmVmMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICB9KCk7CgogIHZhciB0cmFuc1RvSGV4YWRlY2ltYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgdmFyIF9yZWY0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCh0YWdEYXRhKSB7CiAgICAgIHZhciB2YWx1ZSwgdHlwZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICB2YWx1ZSA9IHRhZ0RhdGEudmFsdWUsIHR5cGUgPSB0YWdEYXRhLnR5cGU7CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAxOwogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gY2hlY2tGbG9hdCh2YWx1ZS50b1N0cmluZygpKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBpZiAoISh0eXBlID09PSBUYWdUeXBlLkZMT0FUIHx8IHR5cGUgPT09IFRhZ1R5cGUuRE9VQkxFKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgSEVYQURFQ0lNQUxfUFJFRklYICsgdHJhbnNGbG9hdE51bWJlclRvSGV4KHZhbHVlLCB0eXBlKSk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgaWYgKCEodmFsdWUgPCAwICYmICh0eXBlID09PSBUYWdUeXBlLlVJTlQ4IHx8IHR5cGUgPT09IFRhZ1R5cGUuVUlOVDE2IHx8IHR5cGUgPT09IFRhZ1R5cGUuVUlOVDMyIHx8IHR5cGUgPT09IFRhZ1R5cGUuVUlOVDY0KSkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gODsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIEhFWEFERUNJTUFMX1BSRUZJWCArIHRyYW5zTmVnYXRpdmVOdW1iZXJUb0hleCh2YWx1ZSwgdHlwZSkpOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBIRVhBREVDSU1BTF9QUkVGSVggKyB0cmFuc1Bvc2l0aXZlSW50ZWdlclRvSGV4KHZhbHVlKSk7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gX2NvbnRleHQ0WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCB2YWx1ZSk7CgogICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTQsIG51bGwsIFtbMSwgMTFdXSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIHRyYW5zVG9IZXhhZGVjaW1hbChfeDUpIHsKICAgICAgcmV0dXJuIF9yZWY0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwogIH0oKTsKCiAgcmV0dXJuIHsKICAgIGNoZWNrRmxvYXQ6IGNoZWNrRmxvYXQsCiAgICBjaGVja0hleGFkZWNpbWFsOiBjaGVja0hleGFkZWNpbWFsLAogICAgY2hlY2tXcml0ZURhdGE6IGNoZWNrV3JpdGVEYXRhLAogICAgcGFyc2VXcml0ZURhdGE6IHBhcnNlV3JpdGVEYXRhLAogICAgdHJhbnNUb0RlY2ltYWw6IHRyYW5zVG9EZWNpbWFsLAogICAgdHJhbnNUb0hleGFkZWNpbWFsOiB0cmFuc1RvSGV4YWRlY2ltYWwKICB9Owp9KTs="},null]}