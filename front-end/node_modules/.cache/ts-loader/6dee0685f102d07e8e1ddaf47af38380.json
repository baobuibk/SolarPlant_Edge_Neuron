{"remainingRequest":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js!/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js!/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js??ref--14-3!/home/ulrich/neuron-dashboard/src/composables/config/useUploadTagList.ts","dependencies":[{"path":"/home/ulrich/neuron-dashboard/src/composables/config/useUploadTagList.ts","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/babel.config.js","mtime":1708521072003},{"path":"/home/ulrich/neuron-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1705331057500},{"path":"/home/ulrich/neuron-dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1705331057587},{"path":"/home/ulrich/neuron-dashboard/node_modules/babel-loader/lib/index.js","mtime":1705331057465},{"path":"/home/ulrich/neuron-dashboard/node_modules/ts-loader/index.js","mtime":1705331079456}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvdWxyaWNoL25ldXJvbi1kYXNoYm9hcmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvdWxyaWNoL25ldXJvbi1kYXNoYm9hcmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gIi9ob21lL3VscmljaC9uZXVyb24tZGFzaGJvYXJkL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcyI7CmltcG9ydCBfYXN5bmNJdGVyYXRvciBmcm9tICIvaG9tZS91bHJpY2gvbmV1cm9uLWRhc2hib2FyZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNJdGVyYXRvciI7CnZhciBfZXhjbHVkZWQgPSBbImFkZHJlc3MiXSwKICAgIF9leGNsdWRlZDIgPSBbInZhbHVlIl07CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmRvdC1hbGwuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5zdGlja3kuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50ZXN0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyI7CmltcG9ydCB1c2VUYWJsZUZpbGVSZWFkZXIgZnJvbSAnQC9jb21wb3NhYmxlcy91c2VUYWJsZUZpbGVSZWFkZXInOwppbXBvcnQgeyBUYWdBdHRyaWJ1dGVUeXBlIH0gZnJvbSAnQC90eXBlcy9lbnVtcyc7CmltcG9ydCB7IEZJTExFUl9JTl9UQUdfQVRUUiB9IGZyb20gJ0AvdXRpbHMvY29uc3RhbnRzJzsKaW1wb3J0IHsgZ2V0RXJyb3JNc2csIG1hdGNoT2JqU2hhcGUsIHBvcFVwRXJyb3JNZXNzYWdlIH0gZnJvbSAnQC91dGlscy91dGlscyc7CmltcG9ydCB7IEVtcXhNZXNzYWdlIH0gZnJvbSAnQGVtcXgvZW1xeC11aSc7CmltcG9ydCB7IHVzZUkxOG4gfSBmcm9tICd2dWUtaTE4bic7CmltcG9ydCB7IHVzZVRhZ1R5cGVTZWxlY3QsIHVzZVRhZ0F0dHJpYnV0ZVR5cGVTZWxlY3QsIGNyZWF0ZVRhZ0Zvcm0gfSBmcm9tICdAL2NvbXBvc2FibGVzL2NvbmZpZy91c2VBZGRUYWdDb21tb24nOwppbXBvcnQgdXNlV3JpdGVEYXRhQ2hlY2tOUGFyc2UgZnJvbSAnQC9jb21wb3NhYmxlcy9kYXRhL3VzZVdyaXRlRGF0YUNoZWNrTlBhcnNlJzsKZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChwbHVnaW5JbmZvKSB7CiAgdmFyIF91c2VUYWJsZUZpbGVSZWFkZXIgPSB1c2VUYWJsZUZpbGVSZWFkZXIoKSwKICAgICAgZmlsZVJlYWRlciA9IF91c2VUYWJsZUZpbGVSZWFkZXIuZmlsZVJlYWRlcjsKCiAgdmFyIF9jcmVhdGVUYWdGb3JtID0gY3JlYXRlVGFnRm9ybSgpLAogICAgICBjcmVhdGVSYXdUYWdGb3JtID0gX2NyZWF0ZVRhZ0Zvcm0uY3JlYXRlUmF3VGFnRm9ybTsKCiAgdmFyIF91c2VJMThuID0gdXNlSTE4bigpLAogICAgICB0ID0gX3VzZUkxOG4udDsKCiAgdmFyIF91c2VXcml0ZURhdGFDaGVja05QYSA9IHVzZVdyaXRlRGF0YUNoZWNrTlBhcnNlKCksCiAgICAgIGNoZWNrV3JpdGVEYXRhID0gX3VzZVdyaXRlRGF0YUNoZWNrTlBhLmNoZWNrV3JpdGVEYXRhOwoKICB2YXIgX3VzZVRhZ1R5cGVTZWxlY3QgPSB1c2VUYWdUeXBlU2VsZWN0KCksCiAgICAgIGZpbmRUeXBlVmFsdWVCeUxhYmVsID0gX3VzZVRhZ1R5cGVTZWxlY3QuZmluZFZhbHVlQnlMYWJlbCwKICAgICAgZmluZFR5cGVMYWJlbEJ5VmFsdWUgPSBfdXNlVGFnVHlwZVNlbGVjdC5maW5kTGFiZWxCeVZhbHVlOwoKICB2YXIgX3VzZVRhZ0F0dHJpYnV0ZVR5cGVTID0gdXNlVGFnQXR0cmlidXRlVHlwZVNlbGVjdCgpLAogICAgICBnZXRBdHRyVG90YWxWYWx1ZUJ5U3RyID0gX3VzZVRhZ0F0dHJpYnV0ZVR5cGVTLmdldFRvdGFsVmFsdWVCeVN0ciwKICAgICAgaXNBdHRyc0luY2x1ZGVUaGVWYWx1ZSA9IF91c2VUYWdBdHRyaWJ1dGVUeXBlUy5pc0F0dHJzSW5jbHVkZVRoZVZhbHVlOwoKICB2YXIgY2hlY2tBdHRySW5jbHVkZVN0YXRpYyA9IGZ1bmN0aW9uIGNoZWNrQXR0ckluY2x1ZGVTdGF0aWMoYXR0cikgewogICAgdmFyIGlzSW5jbHVkZVN0YXRpY0F0dHIgPSBpc0F0dHJzSW5jbHVkZVRoZVZhbHVlKGF0dHIsIFRhZ0F0dHJpYnV0ZVR5cGUuU3RhdGljKTsKICAgIHJldHVybiBpc0luY2x1ZGVTdGF0aWNBdHRyOwogIH07IC8vIENoZWNrIGV4Y2VsIGNvbHVubSByZXF1aXJlZCBmaWxlZHMgaW4gdGhlIGluaXQgc3RhdGUKCgogIHZhciBjaGVja1RhZ0xpc3RJblRhYmxlRmlsZSA9IGZ1bmN0aW9uIGNoZWNrVGFnTGlzdEluVGFibGVGaWxlKGRhdGEpIHsKICAgIHZhciBfZGF0YSQ7CgogICAgaWYgKCFkYXRhLmxlbmd0aCkgewogICAgICBFbXF4TWVzc2FnZS53YXJuaW5nKHQoJ2NvbmZpZy52YWxpZFRhYmxlRXJyb3InKSk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0gLy8gZGVzY3JpcHRpb24sIHZhbHVlIGZpZWxkcyBhcmUgbm90IHJlcXVpcmVkLCB2b2lkIHVwbG9hZGluZyBmYWlsdXJlcyBkdWUgdG8gbm90IG1hdGNoaW5nCgoKICAgIHZhciBfY3JlYXRlUmF3VGFnRm9ybSA9IGNyZWF0ZVJhd1RhZ0Zvcm0oKSwKICAgICAgICBuYW1lID0gX2NyZWF0ZVJhd1RhZ0Zvcm0ubmFtZSwKICAgICAgICBhdHRyaWJ1dGUgPSBfY3JlYXRlUmF3VGFnRm9ybS5hdHRyaWJ1dGUsCiAgICAgICAgdHlwZSA9IF9jcmVhdGVSYXdUYWdGb3JtLnR5cGUsCiAgICAgICAgYWRkcmVzcyA9IF9jcmVhdGVSYXdUYWdGb3JtLmFkZHJlc3MsCiAgICAgICAgdmFsdWUgPSBfY3JlYXRlUmF3VGFnRm9ybS52YWx1ZTsKCiAgICB2YXIgcmVxdWlyZURhdGEgPSB7CiAgICAgIG5hbWU6IG5hbWUsCiAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLAogICAgICB0eXBlOiB0eXBlLAogICAgICBhZGRyZXNzOiBhZGRyZXNzLAogICAgICB2YWx1ZTogdmFsdWUKICAgIH07CiAgICB2YXIgcmVxdWlyZUZpZWxkcyA9IHt9OwoKICAgIGlmICghKChfZGF0YSQgPSBkYXRhWzBdKSAhPT0gbnVsbCAmJiBfZGF0YSQgIT09IHZvaWQgMCAmJiBfZGF0YSQuYXR0cmlidXRlKSkgewogICAgICBFbXF4TWVzc2FnZS53YXJuaW5nKHQoJ2NvbmZpZy5lcnJvclRhYmxlRXJyb3InKSk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICB2YXIgYXR0ciA9IGdldEF0dHJUb3RhbFZhbHVlQnlTdHIoU3RyaW5nKGRhdGFbMF0uYXR0cmlidXRlKSwgRklMTEVSX0lOX1RBR19BVFRSKTsKICAgIHZhciBpc0F0dHJJbmNsdWRlU3RhdGljID0gYXR0ciA/IGNoZWNrQXR0ckluY2x1ZGVTdGF0aWMoYXR0cikgOiBmYWxzZTsKCiAgICBpZiAoaXNBdHRySW5jbHVkZVN0YXRpYykgewogICAgICB2YXIgYWRkciA9IHJlcXVpcmVEYXRhLmFkZHJlc3MsCiAgICAgICAgICByZXN0RGF0YSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhyZXF1aXJlRGF0YSwgX2V4Y2x1ZGVkKTsKCiAgICAgIHJlcXVpcmVGaWVsZHMgPSByZXN0RGF0YTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciB2YWwgPSByZXF1aXJlRGF0YS52YWx1ZSwKICAgICAgICAgIF9yZXN0RGF0YSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhyZXF1aXJlRGF0YSwgX2V4Y2x1ZGVkMik7CgogICAgICByZXF1aXJlRmllbGRzID0gX3Jlc3REYXRhOwogICAgfQoKICAgIGlmICghbWF0Y2hPYmpTaGFwZShkYXRhWzBdLCByZXF1aXJlRmllbGRzKSkgewogICAgICBFbXF4TWVzc2FnZS53YXJuaW5nKHQoJ2NvbmZpZy5lcnJvclRhYmxlRXJyb3InKSk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICByZXR1cm4gdHJ1ZTsKICB9OwoKICB2YXIgY2hlY2tUYWdUeXBlID0gZnVuY3Rpb24gY2hlY2tUYWdUeXBlKHR5cGUpIHsKICAgIHZhciBfcGx1Z2luSW5mbyR0YWdfdHlwZTsKCiAgICByZXR1cm4gKHBsdWdpbkluZm8gPT09IG51bGwgfHwgcGx1Z2luSW5mbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9wbHVnaW5JbmZvJHRhZ190eXBlID0gcGx1Z2luSW5mby50YWdfdHlwZSkgPT09IG51bGwgfHwgX3BsdWdpbkluZm8kdGFnX3R5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wbHVnaW5JbmZvJHRhZ190eXBlLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgcmV0dXJuIGl0ZW0gPT09IHR5cGU7CiAgICB9KSkgfHwgdHJ1ZTsKICB9OwoKICB2YXIgZ2V0VGFnUmVnZXggPSBmdW5jdGlvbiBnZXRUYWdSZWdleCh0eXBlKSB7CiAgICB2YXIgX3BsdWdpbkluZm8kdGFnX3JlZ2V4OwoKICAgIHZhciB0YWdSZWdleCA9IHBsdWdpbkluZm8gPT09IG51bGwgfHwgcGx1Z2luSW5mbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9wbHVnaW5JbmZvJHRhZ19yZWdleCA9IHBsdWdpbkluZm8udGFnX3JlZ2V4KSA9PT0gbnVsbCB8fCBfcGx1Z2luSW5mbyR0YWdfcmVnZXggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wbHVnaW5JbmZvJHRhZ19yZWdleC5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgIHJldHVybiBpdGVtLnR5cGUgPT09IHR5cGU7CiAgICB9KTsKICAgIHZhciByZWdleCA9IHRhZ1JlZ2V4ICE9PSBudWxsICYmIHRhZ1JlZ2V4ICE9PSB2b2lkIDAgJiYgdGFnUmVnZXgucmVnZXggPyBuZXcgUmVnRXhwKHRhZ1JlZ2V4LnJlZ2V4KSA6IHVuZGVmaW5lZDsKICAgIHJldHVybiByZWdleDsKICB9OyAvLyB3aGVuIGEgZmlsZWQgaXMgYWRkZWQgdG8gdGFn77yIcmVmZXIgdG8gdGhlIGBjcmVhdGVSYXdUYWdGb3JtYCBpbiB1c2VBZGRUYWcudHPvvIksIHN5bmMgaGVyZS4KCgogIHZhciBoYW5kbGVUYWdMaXN0SW5UYWJsZUZpbGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHRhZ0xpc3QpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgbmV3IFByb21pc2UoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICAgIHZhciBzdGFydEluZGV4LCByZXQsIF9pdGVyYXRvckFicnVwdENvbXBsZXRpb24sIF9kaWRJdGVyYXRvckVycm9yLCBfaXRlcmF0b3JFcnJvciwgX2l0ZXJhdG9yLCBfc3RlcCwgX3N0ZXAkdmFsdWUsIGdyb3VwLCBuYW1lLCBhZGRyZXNzLCBhdHRyaWJ1dGUsIHR5cGVMYWJlbCwgX3N0ZXAkdmFsdWUkZGVzY3JpcHRpLCBkZXNjcmlwdGlvbiwgZGVjaW1hbCwgcHJlY2lzaW9uLCB2YWx1ZSwgYXR0ciwgdHlwZSwgdGFnUmVnZXgsIGlzSW5jbHVkZVN0YXRpY0F0dHIsIHRydWVWYWx1ZSwgdGFnSXRlbTsKCiAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gMjsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JBYnJ1cHRDb21wbGV0aW9uID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNDsKICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IgPSBfYXN5bmNJdGVyYXRvcih0YWdMaXN0KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2l0ZXJhdG9yLm5leHQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShfaXRlcmF0b3JBYnJ1cHRDb21wbGV0aW9uID0gIShfc3RlcCA9IF9jb250ZXh0LnNlbnQpLmRvbmUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgIF9zdGVwJHZhbHVlID0gX3N0ZXAudmFsdWUsIGdyb3VwID0gX3N0ZXAkdmFsdWUuZ3JvdXAsIG5hbWUgPSBfc3RlcCR2YWx1ZS5uYW1lLCBhZGRyZXNzID0gX3N0ZXAkdmFsdWUuYWRkcmVzcywgYXR0cmlidXRlID0gX3N0ZXAkdmFsdWUuYXR0cmlidXRlLCB0eXBlTGFiZWwgPSBfc3RlcCR2YWx1ZS50eXBlLCBfc3RlcCR2YWx1ZSRkZXNjcmlwdGkgPSBfc3RlcCR2YWx1ZS5kZXNjcmlwdGlvbiwgZGVzY3JpcHRpb24gPSBfc3RlcCR2YWx1ZSRkZXNjcmlwdGkgPT09IHZvaWQgMCA/ICcnIDogX3N0ZXAkdmFsdWUkZGVzY3JpcHRpLCBkZWNpbWFsID0gX3N0ZXAkdmFsdWUuZGVjaW1hbCwgcHJlY2lzaW9uID0gX3N0ZXAkdmFsdWUucHJlY2lzaW9uLCB2YWx1ZSA9IF9zdGVwJHZhbHVlLnZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIgPSBnZXRBdHRyVG90YWxWYWx1ZUJ5U3RyKGF0dHJpYnV0ZSwgRklMTEVSX0lOX1RBR19BVFRSKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gZmluZFR5cGVWYWx1ZUJ5TGFiZWwodHlwZUxhYmVsKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIXR5cGUgfHwgIWF0dHIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgIEVtcXhNZXNzYWdlLmVycm9yKCIiLmNvbmNhdCh0KCdjb25maWcudGFibGVSb3dEYXRhRXJyb3InLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dOdW06IHN0YXJ0SW5kZXgKICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgIiAiKS5jb25jYXQodCgnY29uZmlnLmVycm9yVGFibGVFcnJvcicpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgiYnJlYWsiLCA0NSk7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja1RhZ1R5cGUodHlwZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgRW1xeE1lc3NhZ2UuZXJyb3IodCgnY29uZmlnLnRhZ1R5cGVFcnJvcicsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVzU3RyOiBwbHVnaW5JbmZvLnRhZ190eXBlLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmluZFR5cGVMYWJlbEJ5VmFsdWUoaXRlbSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCcsICcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoImJyZWFrIiwgNDUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdSZWdleCA9IGdldFRhZ1JlZ2V4KHR5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgIGlzSW5jbHVkZVN0YXRpY0F0dHIgPSBjaGVja0F0dHJJbmNsdWRlU3RhdGljKGF0dHIpOyAvLyB2YWlsZCBhZGRyZXNzOiBgYXR0cmlidXRlYCBpc25vdCBpbmNsdWRlcyBgU3RhdGljYAoKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISghaXNJbmNsdWRlU3RhdGljQXR0ciAmJiB0YWdSZWdleCAmJiAhdGFnUmVnZXgudGVzdChhZGRyZXNzKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgRW1xeE1lc3NhZ2UuZXJyb3IoIiIuY29uY2F0KHQoJ2NvbmZpZy5lcnJvclRhYmxlQWRkcmVzcycsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd051bTogc3RhcnRJbmRleCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoImJyZWFrIiwgNDUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrQXR0ckluY2x1ZGVTdGF0aWMoYXR0cikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzODsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI3OwogICAgICAgICAgICAgICAgICAgICAgICAgIHRydWVWYWx1ZSA9IFN0cmluZyh2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDMxOwogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGVja1dyaXRlRGF0YSh0eXBlLCB0cnVlVmFsdWUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMzOgogICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAzMzsKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDI3KTsKICAgICAgICAgICAgICAgICAgICAgICAgICBFbXF4TWVzc2FnZS5lcnJvcigiIi5jb25jYXQodCgnY29uZmlnLmVycm9yU3RhdGljV2l0aFZhbHVlJywgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93TnVtOiBzdGFydEluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgiYnJlYWsiLCA0NSk7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OgogICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0l0ZW0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cDogZ3JvdXAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAobmFtZSA9PT0gbnVsbCB8fCBuYW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuYW1lLnRvU3RyaW5nKCkpIHx8ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogKGFkZHJlc3MgPT09IG51bGwgfHwgYWRkcmVzcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWRkcmVzcy50b1N0cmluZygpKSB8fCAnJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogYXR0ciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogKGRlc2NyaXB0aW9uID09PSBudWxsIHx8IGRlc2NyaXB0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZXNjcmlwdGlvbi50b1N0cmluZygpKSB8fCAnJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWw6IGRlY2ltYWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVjaXNpb246IHByZWNpc2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgIH07IC8vIHdoZW4gYGF0dHJpYnV0ZWAgaXMgaW5jbHVkZXMgYFN0YXRpY2AKCiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiBgYXR0cmlidXRlYCBpcyBpbmNsdWRlcyBgU3RhdGljYAogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja0F0dHJJbmNsdWRlU3RhdGljKGF0dHIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdJdGVtID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0YWdJdGVtKSwge30sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKHRhZ0l0ZW0pOwogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXggKz0gMTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yQWJydXB0Q29tcGxldGlvbiA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0NToKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OgogICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA0NzsKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC50MSA9IF9jb250ZXh0WyJjYXRjaCJdKDQpOwogICAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IF9jb250ZXh0LnQxOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1MToKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNTE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDUyOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShfaXRlcmF0b3JBYnJ1cHRDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1NjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU2OwogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfaXRlcmF0b3IucmV0dXJuKCk7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU2OgogICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA1NjsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfZGlkSXRlcmF0b3JFcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU5OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCg1Nik7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDYwOgogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goNTEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2MToKICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJldCk7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDYyOgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzQsIDQ3LCA1MSwgNjFdLCBbMjcsIDMzXSwgWzUyLCwgNTYsIDYwXV0pOwogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gyLCBfeDMpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0oKSkpOwoKICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIpOwogICAgfSkpOwoKICAgIHJldHVybiBmdW5jdGlvbiBoYW5kbGVUYWdMaXN0SW5UYWJsZUZpbGUoX3gpIHsKICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICB2YXIgaGFuZGxlUGFydGlhbFN1YyA9IGZ1bmN0aW9uIGhhbmRsZVBhcnRpYWxTdWMoZXJySW5kZXgsIGVycm9yTnVtKSB7CiAgICBpZiAoZXJySW5kZXggPT09IDApIHsKICAgICAgaWYgKGVycm9yTnVtID09PSAyNDA1KSB7CiAgICAgICAgRW1xeE1lc3NhZ2UuZXJyb3IodCgnZXJyb3IuaW1wb3J0VGFnMjQwNScpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBwb3BVcEVycm9yTWVzc2FnZShlcnJvck51bSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIEVtcXhNZXNzYWdlLmVycm9yKHQoJ2NvbmZpZy5wYXJ0aWFsVXBsb2FkRmFpbGVkJywgewogICAgICAgIHJlYXNvbjogZ2V0RXJyb3JNc2coZXJyb3JOdW0pLAogICAgICAgIGVycm9yUm93OiBlcnJJbmRleCArIDEgKyAxCiAgICAgIH0pKTsKICAgIH0KICB9OwogIC8qKgogICAqIGJhdGNoIGFkZCB0YWdzIGJ5IG5vZGUKICAgKiBUT0RPOiBhZnRlciB0aGUgaW1wb3J0IHRhZyBhcGkgaXMgbW9kaWZpZWQgdG8gYmF0Y2jvvIxjYWxsIHRoYXQgYXBpIGF0IG9uY2UgJiYgcGFyYW1zIHdpdGhvdXQg4oCYZ3JvdXDigJkKICAgKi8KCgogIHZhciBiYXRjaEFkZFRhZ3MgPSBmdW5jdGlvbiBiYXRjaEFkZFRhZ3MocmVxdWVzdExpc3QpIHsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIFByb21pc2UuYWxsKHJlcXVlc3RMaXN0KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBFbXF4TWVzc2FnZS5zdWNjZXNzKHQoJ2NvbmZpZy51cGxvYWRTdWMnKSk7CiAgICAgICAgcmVzb2x2ZSh0cnVlKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgdmFyIF9lcnJvciRkYXRhID0gZXJyb3IuZGF0YSwKICAgICAgICAgICAgZGF0YSA9IF9lcnJvciRkYXRhID09PSB2b2lkIDAgPyB7fSA6IF9lcnJvciRkYXRhOwoKICAgICAgICBpZiAoZGF0YS5pbmRleCAhPT0gdW5kZWZpbmVkICYmIGRhdGEuZXJyb3IgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgaGFuZGxlUGFydGlhbFN1YyhkYXRhLmluZGV4LCBkYXRhLmVycm9yKTsKICAgICAgICB9CgogICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgdmFyIHJlYWRUYWdMaXN0RmlsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKGZpbGUpIHsKICAgICAgdmFyIGRhdGEsIHRhZ0xpc3QsIF9lcnJvciRkYXRhMiwgX2RhdGE7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMDsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIGZpbGVSZWFkZXIoZmlsZSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgIHRhZ0xpc3QgPSBkYXRhWzBdICYmIGRhdGFbMF0uc2hlZXQgfHwgW107CgogICAgICAgICAgICAgIGlmIChjaGVja1RhZ0xpc3RJblRhYmxlRmlsZSh0YWdMaXN0KSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgUHJvbWlzZS5yZWplY3QoKSk7CgogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVzb2x2ZSh0YWdMaXN0KSk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTA7CiAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gX2NvbnRleHQzWyJjYXRjaCJdKDApOwogICAgICAgICAgICAgIF9lcnJvciRkYXRhMiA9IF9jb250ZXh0My50MC5kYXRhLCBfZGF0YSA9IF9lcnJvciRkYXRhMiA9PT0gdm9pZCAwID8ge30gOiBfZXJyb3IkZGF0YTI7CgogICAgICAgICAgICAgIGlmIChfZGF0YS5pbmRleCAhPT0gdW5kZWZpbmVkICYmIF9kYXRhLmVycm9yICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIGhhbmRsZVBhcnRpYWxTdWMoX2RhdGEuaW5kZXgsIF9kYXRhLmVycm9yKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBQcm9taXNlLnJlamVjdChfY29udGV4dDMudDApKTsKCiAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMywgbnVsbCwgW1swLCAxMF1dKTsKICAgIH0pKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gcmVhZFRhZ0xpc3RGaWxlKF94NCkgewogICAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICByZXR1cm4gewogICAgaGFuZGxlVGFnTGlzdEluVGFibGVGaWxlOiBoYW5kbGVUYWdMaXN0SW5UYWJsZUZpbGUsCiAgICByZWFkVGFnTGlzdEZpbGU6IHJlYWRUYWdMaXN0RmlsZSwKICAgIGJhdGNoQWRkVGFnczogYmF0Y2hBZGRUYWdzCiAgfTsKfSk7"},null]}